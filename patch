From c165b518e97bdefa447c4b7e03fe0ab164af064e Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 24 Jan 2014 20:24:15 +0100
Subject: [PATCH] initial commit

---
 extension/data/lib/data.js                         |  86 +++++++++++++++++
 extension/data/package.json                        |   5 +
 extension/data/public/js/data.create.view.js       |  24 +++++
 extension/data/public/js/data.detail.view.js       |  21 +++++
 extension/data/public/js/data.dialog.model.js      |  63 +++++++++++++
 extension/data/public/js/data.dialog.view.js       |  46 ++++++++++
 extension/data/public/js/data.list.model.js        |  28 ++++++
 extension/data/public/js/data.list.view.js         |  23 +++++
 extension/data/public/js/data.model.js             |  15 +++
 extension/data/public/js/data.template.view.js     |  42 +++++++++
 extension/data/public/js/data.toolbar.view.js      |  14 +++
 extension/data/public/js/main.js                   | 102 +++++++++++++++++++++
 extension/data/public/js/main_dev.js               | 102 +++++++++++++++++++++
 extension/data/public/templates/data-create.html   |  19 ++++
 extension/data/public/templates/data-detail.html   |   5 +
 extension/data/public/templates/data-dialog.html   |  37 ++++++++
 .../data/public/templates/data-list-header.html    |   1 +
 .../data/public/templates/data-list-rows.html      |   1 +
 extension/data/public/templates/data-list.html     |   3 +
 .../public/templates/data-template-extension.html  |   4 +
 extension/data/public/templates/data-toolbar.html  |   6 ++
 extension/data/test/dataTest.js                    |  44 +++++++++
 22 files changed, 691 insertions(+)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
new file mode 100644
index 0000000000000000000000000000000000000000..9e430abf4a027823bd919a6f3ba3697893fe705c
--- /dev/null
+++ b/extension/data/lib/data.js
@@ -0,0 +1,86 @@
+﻿var Readable = require("stream").Readable,
+    shortid = require("shortid"),
+    winston = require("winston"),
+    events = require("events"),
+    util = require("util"),
+    sformat = require("stringformat"),
+    async = require("async"),
+    _ = require("underscore"),
+    Q = require("q");
+    sformat = require("stringformat");
+
+
+var logger = winston.loggers.get('jsreport');
+
+module.exports = function (reporter, definition) {
+    reporter[definition.name] = new Data(reporter, definition);
+};
+
+Data = function (reporter, definition) {
+    this.reporter = reporter;
+    this.definition = definition;
+    
+    Object.defineProperty(this, "entitySet", {
+        get: function () {
+            return reporter.context.data;
+        }
+    });
+    
+    this.DataItemType = $data.Class.define(reporter.extendGlobalTypeName("$entity.DataItem"), $data.Entity, null, {
+        dataJson: { type: "string" },
+        name: { type: "string" },
+    }, null);
+    
+    if (this.reporter.playgroundMode) {
+        reporter.templates.TemplateType.addMember("dataItem", { type:  this.DataItemType });
+    } else {
+        this.DataItemType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
+        reporter.templates.TemplateType.addMember("dataItemId", { type: "id" });
+    }
+    
+    this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
+    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
+};
+
+Data.prototype.handleBeforeRender = function (request, response) {
+    
+    if (!request.template.dataItemId && !request.template.dataItem) {
+        logger.info("DateItem not defined for this template.");
+        return;
+    }
+
+    var self = this;
+
+    function FindDataItem() {
+        if (request.template.dataItem != null && request.template.dataItem != "")
+            return Q(request.template.dataItem);
+
+        logger.info("Searching for before dataItem to apply");
+
+        return self.entitySet.find(request.template.dataItemId);
+    };
+
+    return FindDataItem().then(function(di) {
+        di = di.dataJson || di;
+        logger.info("Applying data - " + di);
+
+        request.data = JSON.parse(di);
+    });
+};
+
+Data.prototype.create = function (dataItem) {
+    logger.info(sformat("Creating dataItem {0}.", dataItem.name));
+
+    var ent = new this.DataItemType(dataItem);
+    this.entitySet.add(ent);
+    
+    return this.entitySet.saveChanges().then(function() { return Q(ent); });
+};
+
+function createEntitySetDefinitions(entitySets, next) {
+    if (!this.reporter.playgroundMode) {
+        entitySets["data"] = { type: $data.EntitySet, elementType: this.DataItemType };
+    }
+
+    next();
+};
\ No newline at end of file
diff --git a/extension/data/package.json b/extension/data/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..a57d912fd95313c7aea00ea915656d12a9c28f72
--- /dev/null
+++ b/extension/data/package.json
@@ -0,0 +1,5 @@
+﻿{
+  "name": "data",
+  "main": "lib/data.js",
+  "dependencies": ["templates"]
+}
\ No newline at end of file
diff --git a/extension/data/public/js/data.create.view.js b/extension/data/public/js/data.create.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..278f2ed966596fcf341729f4496df98743f8c090
--- /dev/null
+++ b/extension/data/public/js/data.create.view.js
@@ -0,0 +1,24 @@
+﻿define(["marionette", "app", "core/view.base"], function (Marionette, app, ViewBase) {
+    return ViewBase.extend({
+        template: "data-create",
+
+        initialize: function () {
+            var self = this;
+        },
+
+        events: {
+            "click #saveCommand": "save"
+        },
+
+        save: function () {
+            var self = this;
+            this.model.set("name", this.$el.find("#name").val());
+            this.model.save({}, {
+                success: function () {
+                    app.layout.dialog.hide();
+                    app.data.trigger("created");
+                }
+            });
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.detail.view.js b/extension/data/public/js/data.detail.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..22a6722f095320e45a6c4694c510435f9f4a7bc4
--- /dev/null
+++ b/extension/data/public/js/data.detail.view.js
@@ -0,0 +1,21 @@
+﻿define(["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function () {
+            this.listenTo(this.model, "sync", this.render);
+        },
+        
+        onDomRefresh: function () {
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+            
+             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+    });
+});
+
diff --git a/extension/data/public/js/data.dialog.model.js b/extension/data/public/js/data.dialog.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..7aa2afe3274bf6002f5bfee1e38e52034d22016e
--- /dev/null
+++ b/extension/data/public/js/data.dialog.model.js
@@ -0,0 +1,63 @@
+﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            if (app.settings.playgroundMode) {
+                var obj = this.templateModel.get("dataItem") || {};
+                obj = obj.initData || {};
+                this.set(this.parse(obj), {silent: true});
+                return options.success();
+            }
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items;
+
+                if (self.templateModel.get("dataItemId") != null) {
+                    return app.dataContext.data.find(self.templateModel.get("dataItemId")).then(function (res) {
+                        self.set(self.parse(res.initData), {silent: true});
+                        return options.success();
+                    });
+                }
+
+                self.set(items.length > 0 ? items[0].initData : {}, { silent: true });
+                return options.success();
+            });
+        },
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:_id", function() {
+                this.set(this.parse(_.where(self.items, { _id: self.get("_id")})[0].initData));
+            });
+        },
+
+        save: function (options) {
+            var self = this;
+            var entity = new $entity.DataItem(this.attributes);
+
+            if (app.settings.playgroundMode) {
+                this.templateModel.set("dataItem", entity);
+                return options.success();
+            } 
+            
+            if (entity._id != null) {
+                app.dataContext.data.attach(entity);
+                this.copyAttributesToEntity(entity);
+            } else {
+                app.dataContext.data.add(entity);
+            }
+
+            app.dataContext.data.saveChanges().then(function () {
+                self.templateModel.set("dataItemId", entity._id);
+                options.success();
+            });
+        },
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.dialog.view.js b/extension/data/public/js/data.dialog.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..0971931228d80d5d3155afe2252d238a06a99a48
--- /dev/null
+++ b/extension/data/public/js/data.dialog.view.js
@@ -0,0 +1,46 @@
+﻿define(["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+            "click #createCommand": "create",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "getItems", "getItemsLength");
+        },
+        
+        onDomRefresh: function () {
+
+            if (this.model.get("_id") == null)
+                return;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        create: function () {
+            app.data.trigger("create");
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.list.model.js b/extension/data/public/js/data.list.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..06f21d4bfd89fc0b5bd3af389891b5fab877def9
--- /dev/null
+++ b/extension/data/public/js/data.list.model.js
@@ -0,0 +1,28 @@
+﻿define(["app", "backbone", "core/dataGrid", "./data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
diff --git a/extension/data/public/js/data.list.view.js b/extension/data/public/js/data.list.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..0c89faae7005e4b0eb7a5c9f628cad9d7abbdf10
--- /dev/null
+++ b/extension/data/public/js/data.list.view.js
@@ -0,0 +1,23 @@
+﻿define(["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
\ No newline at end of file
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..a7016f9c6a6c7408036ad78ff4f257dbf1ac5c64
--- /dev/null
+++ b/extension/data/public/js/data.model.js
@@ -0,0 +1,15 @@
+﻿define(["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function() {
+            return app.dataContext.data.find(this.get("_id"));
+        },                
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.view.js b/extension/data/public/js/data.template.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..8bdc7ea8bc556464916824c0a30fbc82a636b7c0
--- /dev/null
+++ b/extension/data/public/js/data.template.view.js
@@ -0,0 +1,42 @@
+﻿define(["app", "marionette", "core/view.base", "core/utils", "./data.dialog.view", "./data.dialog.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return this.templateModel.get("dataItemId") ||
+                ((this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null));
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            model.fetch({
+                success: function () {
+                    var dialog = new DialogView({
+                        model: model
+                    });
+                    self.listenTo(dialog, "dialog-close", function() {
+                         self.render();
+                    });
+                    app.layout.dialog.show(dialog);
+                }
+            });
+        }
+    });
+});
+
diff --git a/extension/data/public/js/data.toolbar.view.js b/extension/data/public/js/data.toolbar.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..194fe0152d46464eb9dfe27a9388799b098b5538
--- /dev/null
+++ b/extension/data/public/js/data.toolbar.view.js
@@ -0,0 +1,14 @@
+﻿define(["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                this.model.save();
+            },
+        });
+    });
\ No newline at end of file
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
new file mode 100644
index 0000000000000000000000000000000000000000..c3ff94919e42f3a2b529cd5d22b83e0a462de3ee
--- /dev/null
+++ b/extension/data/public/js/main.js
@@ -0,0 +1,102 @@
+﻿define(["app", "marionette", "backbone",
+        "./data.list.model", "./data.list.view",
+        "./data.model", "./data.detail.view",
+        "./data.create.view", "./data.template.view", "./data.toolbar.view"],
+    function(app, Marionette, Backbone, DataListModel, DataListView, DataModel, DataDetailView, DataCreateView, TemplateView, ToolbarView) {
+
+        app.module("data", function(module) {
+            var Router = Backbone.Router.extend({
+                routes: {
+                    "extension/data": "data",
+                    "extension/data/:id": "dataDetail",
+                },
+
+                data: function() {
+                    this.navigate("/extension/data");
+
+                    var model = new DataListModel();
+                    var view = new DataListView({
+                        collection: model
+                    });
+
+                    app.layout.content.show(view);
+
+                    model.fetch();
+                },
+
+                dataDetail: function(id) {
+                    var model = new DataModel();
+                    model.set("_id", id);
+                    
+                    app.layout.showToolbarViewComposition(new DataDetailView({model: model}), new ToolbarView({model: model}) );
+
+                    model.fetch();
+                },
+
+                dataCreate: function() {
+                    app.layout.dialog.show(new DataCreateView({
+                        model: new DataModel()
+                    }));
+                }
+            });
+
+            app.data.on("created", function() {
+                app.data.router.data();
+            });
+
+            app.data.on("create", function() {
+                app.data.router.dataCreate();
+            });
+
+            app.data.router = new Router();
+
+            if (!app.settings.playgroundMode) {
+
+                app.on("menu-render", function(context) {
+                    context.result += "<li><a href='#/extension/data'>Data</a></li>";
+                });
+
+                app.on("menu-actions-render", function(context) {
+                    context.result += "<li><a id='createDataLink'>Create Data</a></li>";
+                    context.on("after-render", function($el) {
+                        $el.find("#createDataLink").click(function() {
+                            app.data.router.dataCreate();
+                        });
+                    });
+                });
+            }
+
+            app.on("template-extensions-render", function(context) {
+                var view = new TemplateView();
+                view.setTemplateModel(context.template);
+                context.extensionsRegion.show(view);
+            });
+
+            app.on("template-extensions-get-state", function(model, state) {
+                if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
+                    state.dataItem = model.get("dataItem").dataJson;
+                else
+                    state.dataItem = null;
+            });
+
+            app.on("entity-registration", function(context) {
+
+                $data.Class.define("$entity.DataItem", $data.Entity, null, {
+                    'name': { 'type': 'Edm.String' },
+                    'dataJson': { 'type': 'Edm.String' },
+                }, null);
+
+                $entity.DataItem.prototype.toString = function() {
+                    return "DataItem " + (this.name || "");
+                };
+
+                if (app.settings.playgroundMode) {
+                    $entity.Template.addMember("dataItem", { 'type': "$entity.DataItem" });
+                } else {
+                    $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                    $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                    context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
+                }
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..c3ff94919e42f3a2b529cd5d22b83e0a462de3ee
--- /dev/null
+++ b/extension/data/public/js/main_dev.js
@@ -0,0 +1,102 @@
+﻿define(["app", "marionette", "backbone",
+        "./data.list.model", "./data.list.view",
+        "./data.model", "./data.detail.view",
+        "./data.create.view", "./data.template.view", "./data.toolbar.view"],
+    function(app, Marionette, Backbone, DataListModel, DataListView, DataModel, DataDetailView, DataCreateView, TemplateView, ToolbarView) {
+
+        app.module("data", function(module) {
+            var Router = Backbone.Router.extend({
+                routes: {
+                    "extension/data": "data",
+                    "extension/data/:id": "dataDetail",
+                },
+
+                data: function() {
+                    this.navigate("/extension/data");
+
+                    var model = new DataListModel();
+                    var view = new DataListView({
+                        collection: model
+                    });
+
+                    app.layout.content.show(view);
+
+                    model.fetch();
+                },
+
+                dataDetail: function(id) {
+                    var model = new DataModel();
+                    model.set("_id", id);
+                    
+                    app.layout.showToolbarViewComposition(new DataDetailView({model: model}), new ToolbarView({model: model}) );
+
+                    model.fetch();
+                },
+
+                dataCreate: function() {
+                    app.layout.dialog.show(new DataCreateView({
+                        model: new DataModel()
+                    }));
+                }
+            });
+
+            app.data.on("created", function() {
+                app.data.router.data();
+            });
+
+            app.data.on("create", function() {
+                app.data.router.dataCreate();
+            });
+
+            app.data.router = new Router();
+
+            if (!app.settings.playgroundMode) {
+
+                app.on("menu-render", function(context) {
+                    context.result += "<li><a href='#/extension/data'>Data</a></li>";
+                });
+
+                app.on("menu-actions-render", function(context) {
+                    context.result += "<li><a id='createDataLink'>Create Data</a></li>";
+                    context.on("after-render", function($el) {
+                        $el.find("#createDataLink").click(function() {
+                            app.data.router.dataCreate();
+                        });
+                    });
+                });
+            }
+
+            app.on("template-extensions-render", function(context) {
+                var view = new TemplateView();
+                view.setTemplateModel(context.template);
+                context.extensionsRegion.show(view);
+            });
+
+            app.on("template-extensions-get-state", function(model, state) {
+                if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
+                    state.dataItem = model.get("dataItem").dataJson;
+                else
+                    state.dataItem = null;
+            });
+
+            app.on("entity-registration", function(context) {
+
+                $data.Class.define("$entity.DataItem", $data.Entity, null, {
+                    'name': { 'type': 'Edm.String' },
+                    'dataJson': { 'type': 'Edm.String' },
+                }, null);
+
+                $entity.DataItem.prototype.toString = function() {
+                    return "DataItem " + (this.name || "");
+                };
+
+                if (app.settings.playgroundMode) {
+                    $entity.Template.addMember("dataItem", { 'type': "$entity.DataItem" });
+                } else {
+                    $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                    $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                    context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
+                }
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/data/public/templates/data-create.html b/extension/data/public/templates/data-create.html
new file mode 100644
index 0000000000000000000000000000000000000000..ca96bb28b01529c72eeb4550df55bf8b0af5e0d5
--- /dev/null
+++ b/extension/data/public/templates/data-create.html
@@ -0,0 +1,19 @@
+﻿<div class="modal-dialog">
+    <div class="modal-content">
+        <div class="modal-header">
+            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
+            <h4 class="modal-title">Create Schema</h4>
+        </div>
+        <div class="modal-body">
+            <div>
+                <label>Name</label>
+                <input id="name" />
+            </div>
+        </div>
+        <div class="modal-footer">
+            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
+            <button type="button" id="saveCommand" class="btn btn-primary">Save</button>
+        </div>
+    </div>
+</div>
+
diff --git a/extension/data/public/templates/data-detail.html b/extension/data/public/templates/data-detail.html
new file mode 100644
index 0000000000000000000000000000000000000000..bab90d447f93e571ac4ae21b5b1a40fbc58df4bb
--- /dev/null
+++ b/extension/data/public/templates/data-detail.html
@@ -0,0 +1,5 @@
+﻿<h2> Schema - {{:name}}</h2>
+
+<div>
+    <textarea id="contentArea">{{:dataJson}}</textarea>
+</div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
new file mode 100644
index 0000000000000000000000000000000000000000..e6d4c9b2528091f8918ed4efd9223cf9d1c0f203
--- /dev/null
+++ b/extension/data/public/templates/data-dialog.html
@@ -0,0 +1,37 @@
+﻿<div class="modal-dialog">
+    <div class="modal-content">
+        <div class="modal-header">
+            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
+            <h4 class="modal-title">Inline data source</h4>
+        </div>
+        <div class="modal-body">
+            {{if ~getMode()}}
+               <textarea id="contentArea">{{:dataJson}}</textarea>
+            {{else}}
+              {{if ~getItemsLength() > 0}}
+                  Choose an existing data item 
+                  <div class="btn-group" data-binding="_id" style="margin-bottom: 15px; margin-left: 10px">
+                      <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:_id}}">{{:name}}</button>
+                      <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
+                          <span class="caret"></span>
+                      </button>
+                      <ul class="dropdown-menu" role="menu">
+                          {{for ~getItems()}}
+                          <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:_id}}">{{:name}}</a></li>
+                          {{/for}}
+                      </ul>
+                   </div>
+                   <textarea id="contentArea">{{:dataJson}}</textarea>
+              {{else}}
+                    You dont have a data item yet. Go ahead and create one. 
+                         <button type="button" id="createCommand" class="btn btn-primary" data-dismiss="modal">Create data item</button>
+              {{/if}}
+            {{/if}}
+         
+        </div>
+        <div class="modal-footer">
+            <button type="button" id="saveCommand" class="btn btn-primary" data-dismiss="modal">Save</button>
+        </div>
+    </div>
+</div>
+
diff --git a/extension/data/public/templates/data-list-header.html b/extension/data/public/templates/data-list-header.html
new file mode 100644
index 0000000000000000000000000000000000000000..574425e2b26d38ff1168067990a3e099b46d15aa
--- /dev/null
+++ b/extension/data/public/templates/data-list-header.html
@@ -0,0 +1 @@
+﻿<th>Name</th>
diff --git a/extension/data/public/templates/data-list-rows.html b/extension/data/public/templates/data-list-rows.html
new file mode 100644
index 0000000000000000000000000000000000000000..9d9d1c23397109e5c9aac9dc7ab6b8ab1aaa1fa8
--- /dev/null
+++ b/extension/data/public/templates/data-list-rows.html
@@ -0,0 +1 @@
+﻿<td><a>{{:name}}</a></td>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-list.html b/extension/data/public/templates/data-list.html
new file mode 100644
index 0000000000000000000000000000000000000000..b4675c3cb42de0106f3faa58dd18297e7f60cfdd
--- /dev/null
+++ b/extension/data/public/templates/data-list.html
@@ -0,0 +1,3 @@
+﻿<div id="schemaGridBox">
+    
+</div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-template-extension.html b/extension/data/public/templates/data-template-extension.html
new file mode 100644
index 0000000000000000000000000000000000000000..8beb06da5f1be032a11edfc4674200fb9772677e
--- /dev/null
+++ b/extension/data/public/templates/data-template-extension.html
@@ -0,0 +1,4 @@
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+<div class="expandable-body properties" style="display: none">
+    <button class="btn btn-sm btn-primary" id="dataItemCommand">Data Upload</button>
+</div>
diff --git a/extension/data/public/templates/data-toolbar.html b/extension/data/public/templates/data-toolbar.html
new file mode 100644
index 0000000000000000000000000000000000000000..167ede6b77bc64df21c3ec5b5453f423ecb6f98d
--- /dev/null
+++ b/extension/data/public/templates/data-toolbar.html
@@ -0,0 +1,6 @@
+﻿<div class="navbar-header sub-header">
+    <ul class="nav navbar-nav sub-header">
+        <p class="navbar-text" name="name">{{:name}}</p>
+        <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
+    </ul>
+</div>
\ No newline at end of file
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
new file mode 100644
index 0000000000000000000000000000000000000000..79574ce830cf721aca961ff8264022783170a409
--- /dev/null
+++ b/extension/data/test/dataTest.js
@@ -0,0 +1,44 @@
+﻿var assert = require("assert"),
+    describeReporting = require("../../../test/helpers.js").describeReporting;
+
+describeReporting(["data"], function (reporter) {
+    
+    describe('data', function() {
+
+        it('should find and use data', function (done) {
+            var dataItem = {
+                name: "test",
+                dataJson: JSON.stringify({ a: 'xx' }) + "",
+            };
+
+            reporter.data.create(dataItem).then(function(data) {
+                reporter.logger.info(JSON.stringify(data));
+                var request = {
+                    reporter: reporter,
+                    template: { html: "html", dataItemId: data._id },
+                    options: { recipe: "html" },
+                };
+
+                reporter.data.handleBeforeRender(request, {}).then(function() {
+                    assert.equal(request.data.a, JSON.parse(dataItem.dataJson).a);
+
+                    done();
+                });
+            });
+        });
+        
+        it('should callback error when missing data', function(done) {
+            var request = {
+                reporter: reporter,
+                template: { html: "html", dataItemId: "AAAAAAAAAAAAAAAAAAAAAAAA" },
+                options: { recipe: "html" },
+            };
+
+            reporter.data.handleBeforeRender(request, {}).fail(function (err) {
+                assert.notEqual(null, err);
+                done();
+            });
+        });
+
+    });
+});

From d668d4fddc4ab8fe9df8cc95da16b4c5a7e127cd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 26 Jan 2014 14:50:17 +0100
Subject: [PATCH] avoid caching in browser

---
 extension/data/lib/data.js | 2 --
 1 file changed, 2 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 9e430abf4a027823bd919a6f3ba3697893fe705c..a7e090e408da6ee7c1574e89e7ccd23248b46d15 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -62,8 +62,6 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
     return FindDataItem().then(function(di) {
         di = di.dataJson || di;
-        logger.info("Applying data - " + di);
-
         request.data = JSON.parse(di);
     });
 };

From ca71825d93593fece05231cd77dce7d652928309 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 30 Jan 2014 09:42:57 +0100
Subject: [PATCH] examples improvments

---
 extension/data/public/js/data.dialog.view.js | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/extension/data/public/js/data.dialog.view.js b/extension/data/public/js/data.dialog.view.js
index 0971931228d80d5d3155afe2252d238a06a99a48..850faff8b4b146803d5502e2ae273f562d95a9e5 100644
--- a/extension/data/public/js/data.dialog.view.js
+++ b/extension/data/public/js/data.dialog.view.js
@@ -12,9 +12,9 @@
         },
         
         onDomRefresh: function () {
-
-            if (this.model.get("_id") == null)
-                return;
+            //why is this here?
+            //if (this.model.get("_id") == null)
+            //    return;
             
             this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
                 mode: "javascript",

From f6f7513d96c16a2e5e6d40df1c66f5e3cc935868 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 30 Jan 2014 20:43:53 +0100
Subject: [PATCH] ui refactoring

---
 extension/data/lib/data.js                         | 10 +++-
 extension/data/public/js/data.create.view.js       | 24 ----------
 extension/data/public/js/data.list.toolbar.view.js | 19 ++++++++
 extension/data/public/js/data.list.view.js         |  5 +-
 extension/data/public/js/data.model.js             |  6 +--
 extension/data/public/js/data.toolbar.view.js      |  7 ++-
 extension/data/public/js/main.js                   | 53 ++++++++++------------
 extension/data/public/js/main_dev.js               | 53 ++++++++++------------
 extension/data/public/templates/data-create.html   | 19 --------
 extension/data/public/templates/data-detail.html   |  4 +-
 .../data/public/templates/data-list-toolbar.html   |  7 +++
 .../public/templates/data-template-extension.html  |  2 +-
 12 files changed, 95 insertions(+), 114 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index a7e090e408da6ee7c1574e89e7ccd23248b46d15..14d7b409457855a15a04d043a8619cf1e6478c17 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -29,6 +29,7 @@ Data = function (reporter, definition) {
     this.DataItemType = $data.Class.define(reporter.extendGlobalTypeName("$entity.DataItem"), $data.Entity, null, {
         dataJson: { type: "string" },
         name: { type: "string" },
+        shortid: { type: "string"}
     }, null);
     
     if (this.reporter.playgroundMode) {
@@ -38,6 +39,7 @@ Data = function (reporter, definition) {
         reporter.templates.TemplateType.addMember("dataItemId", { type: "id" });
     }
     
+    this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
     this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
     this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
@@ -75,10 +77,16 @@ Data.prototype.create = function (dataItem) {
     return this.entitySet.saveChanges().then(function() { return Q(ent); });
 };
 
+Data.prototype._beforeCreateHandler = function(args, entity) {
+     if (entity.shortid == null)
+        entity.shortid = shortid.generate();
+};
+
 function createEntitySetDefinitions(entitySets, next) {
     if (!this.reporter.playgroundMode) {
         entitySets["data"] = { type: $data.EntitySet, elementType: this.DataItemType };
     }
 
     next();
-};
\ No newline at end of file
+};
+
diff --git a/extension/data/public/js/data.create.view.js b/extension/data/public/js/data.create.view.js
deleted file mode 100644
index 278f2ed966596fcf341729f4496df98743f8c090..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.create.view.js
+++ /dev/null
@@ -1,24 +0,0 @@
-﻿define(["marionette", "app", "core/view.base"], function (Marionette, app, ViewBase) {
-    return ViewBase.extend({
-        template: "data-create",
-
-        initialize: function () {
-            var self = this;
-        },
-
-        events: {
-            "click #saveCommand": "save"
-        },
-
-        save: function () {
-            var self = this;
-            this.model.set("name", this.$el.find("#name").val());
-            this.model.save({}, {
-                success: function () {
-                    app.layout.dialog.hide();
-                    app.data.trigger("created");
-                }
-            });
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.list.toolbar.view.js b/extension/data/public/js/data.list.toolbar.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..7b4b94bd6d7dd869c20b62bb6b95bdaa6c9b461e
--- /dev/null
+++ b/extension/data/public/js/data.list.toolbar.view.js
@@ -0,0 +1,19 @@
+﻿define(["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
diff --git a/extension/data/public/js/data.list.view.js b/extension/data/public/js/data.list.view.js
index 0c89faae7005e4b0eb7a5c9f628cad9d7abbdf10..e5048add5b9c1b5e138673e1cd5fedd8da738900 100644
--- a/extension/data/public/js/data.list.view.js
+++ b/extension/data/public/js/data.list.view.js
@@ -8,11 +8,12 @@
         },
 
         onDomRefresh: function () {
-            DataGrid.show({
+            this.dataGrid = DataGrid.show({
                 collection: this.collection,
                 filter: this.collection.filter,
+                idKey: "shortid",
                 onShowDetail: function (id) {
-                    window.location.hash = "extension/data/" + id;
+                    window.location.hash = "extension/data/detail/" + id;
                 },
                 el: $("#schemaGridBox"),
                 headerTemplate: "data-list-header",
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index a7016f9c6a6c7408036ad78ff4f257dbf1ac5c64..6eedfc4de72b44df4329afc154aea43cbf068070 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -3,9 +3,9 @@
     return ModelBase.extend({
         contextSet: function() { return app.dataContext.data; },
 
-        fetchQuery: function() {
-            return app.dataContext.data.find(this.get("_id"));
-        },                
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },        
 
         _initialize: function() {
             var self = this;
diff --git a/extension/data/public/js/data.toolbar.view.js b/extension/data/public/js/data.toolbar.view.js
index 194fe0152d46464eb9dfe27a9388799b098b5538..f83ac45e89af410b232e8117b37bcd2c96b278d0 100644
--- a/extension/data/public/js/data.toolbar.view.js
+++ b/extension/data/public/js/data.toolbar.view.js
@@ -8,7 +8,12 @@
             },
 
             save: function() {
-                this.model.save();
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
             },
         });
     });
\ No newline at end of file
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index c3ff94919e42f3a2b529cd5d22b83e0a462de3ee..537d7c4bd3805d77f9f193ebeed078fb1e941da9 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,68 +1,60 @@
 ﻿define(["app", "marionette", "backbone",
-        "./data.list.model", "./data.list.view",
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
-        "./data.create.view", "./data.template.view", "./data.toolbar.view"],
-    function(app, Marionette, Backbone, DataListModel, DataListView, DataModel, DataDetailView, DataCreateView, TemplateView, ToolbarView) {
+        "./data.template.view", "./data.toolbar.view"],
+    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateView, ToolbarView) {
 
         app.module("data", function(module) {
             var Router = Backbone.Router.extend({
+                
+                initialize: function() {
+                    app.listenTo(app, "data-saved", function(model) {
+                        window.location.hash = "/extension/data/detail/" + model.get("shortid");
+                    });  
+                },
+
                 routes: {
-                    "extension/data": "data",
-                    "extension/data/:id": "dataDetail",
+                    "extension/data/list": "data",
+                    "extension/data/detail/:id": "dataDetail",
+                    "extension/data/detail": "dataDetail",
                 },
 
                 data: function() {
-                    this.navigate("/extension/data");
+                    this.navigate("/extension/data/list");
 
                     var model = new DataListModel();
-                    var view = new DataListView({
-                        collection: model
-                    });
+                    
+                    app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
 
-                    app.layout.content.show(view);
 
                     model.fetch();
                 },
 
                 dataDetail: function(id) {
                     var model = new DataModel();
-                    model.set("_id", id);
-                    
                     app.layout.showToolbarViewComposition(new DataDetailView({model: model}), new ToolbarView({model: model}) );
 
-                    model.fetch();
+                    if (id != null) {
+                        model.set("shortid", id);
+                        model.fetch();
+                    }
                 },
-
-                dataCreate: function() {
-                    app.layout.dialog.show(new DataCreateView({
-                        model: new DataModel()
-                    }));
-                }
             });
 
             app.data.on("created", function() {
                 app.data.router.data();
             });
 
-            app.data.on("create", function() {
-                app.data.router.dataCreate();
-            });
-
             app.data.router = new Router();
 
             if (!app.settings.playgroundMode) {
 
                 app.on("menu-render", function(context) {
-                    context.result += "<li><a href='#/extension/data'>Data</a></li>";
+                    context.result += "<li><a href='#/extension/data/list'>Data</a></li>";
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a id='createDataLink'>Create Data</a></li>";
-                    context.on("after-render", function($el) {
-                        $el.find("#createDataLink").click(function() {
-                            app.data.router.dataCreate();
-                        });
-                    });
+                    context.result += "<li><a href='#/extension/data/detail'createDataLink'>Create Data</a></li>";
                 });
             }
 
@@ -82,6 +74,7 @@
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
+                    'shortid': { 'type': 'Edm.String'},
                     'name': { 'type': 'Edm.String' },
                     'dataJson': { 'type': 'Edm.String' },
                 }, null);
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index c3ff94919e42f3a2b529cd5d22b83e0a462de3ee..537d7c4bd3805d77f9f193ebeed078fb1e941da9 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -1,68 +1,60 @@
 ﻿define(["app", "marionette", "backbone",
-        "./data.list.model", "./data.list.view",
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
-        "./data.create.view", "./data.template.view", "./data.toolbar.view"],
-    function(app, Marionette, Backbone, DataListModel, DataListView, DataModel, DataDetailView, DataCreateView, TemplateView, ToolbarView) {
+        "./data.template.view", "./data.toolbar.view"],
+    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateView, ToolbarView) {
 
         app.module("data", function(module) {
             var Router = Backbone.Router.extend({
+                
+                initialize: function() {
+                    app.listenTo(app, "data-saved", function(model) {
+                        window.location.hash = "/extension/data/detail/" + model.get("shortid");
+                    });  
+                },
+
                 routes: {
-                    "extension/data": "data",
-                    "extension/data/:id": "dataDetail",
+                    "extension/data/list": "data",
+                    "extension/data/detail/:id": "dataDetail",
+                    "extension/data/detail": "dataDetail",
                 },
 
                 data: function() {
-                    this.navigate("/extension/data");
+                    this.navigate("/extension/data/list");
 
                     var model = new DataListModel();
-                    var view = new DataListView({
-                        collection: model
-                    });
+                    
+                    app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
 
-                    app.layout.content.show(view);
 
                     model.fetch();
                 },
 
                 dataDetail: function(id) {
                     var model = new DataModel();
-                    model.set("_id", id);
-                    
                     app.layout.showToolbarViewComposition(new DataDetailView({model: model}), new ToolbarView({model: model}) );
 
-                    model.fetch();
+                    if (id != null) {
+                        model.set("shortid", id);
+                        model.fetch();
+                    }
                 },
-
-                dataCreate: function() {
-                    app.layout.dialog.show(new DataCreateView({
-                        model: new DataModel()
-                    }));
-                }
             });
 
             app.data.on("created", function() {
                 app.data.router.data();
             });
 
-            app.data.on("create", function() {
-                app.data.router.dataCreate();
-            });
-
             app.data.router = new Router();
 
             if (!app.settings.playgroundMode) {
 
                 app.on("menu-render", function(context) {
-                    context.result += "<li><a href='#/extension/data'>Data</a></li>";
+                    context.result += "<li><a href='#/extension/data/list'>Data</a></li>";
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a id='createDataLink'>Create Data</a></li>";
-                    context.on("after-render", function($el) {
-                        $el.find("#createDataLink").click(function() {
-                            app.data.router.dataCreate();
-                        });
-                    });
+                    context.result += "<li><a href='#/extension/data/detail'createDataLink'>Create Data</a></li>";
                 });
             }
 
@@ -82,6 +74,7 @@
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
+                    'shortid': { 'type': 'Edm.String'},
                     'name': { 'type': 'Edm.String' },
                     'dataJson': { 'type': 'Edm.String' },
                 }, null);
diff --git a/extension/data/public/templates/data-create.html b/extension/data/public/templates/data-create.html
deleted file mode 100644
index ca96bb28b01529c72eeb4550df55bf8b0af5e0d5..0000000000000000000000000000000000000000
--- a/extension/data/public/templates/data-create.html
+++ /dev/null
@@ -1,19 +0,0 @@
-﻿<div class="modal-dialog">
-    <div class="modal-content">
-        <div class="modal-header">
-            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
-            <h4 class="modal-title">Create Schema</h4>
-        </div>
-        <div class="modal-body">
-            <div>
-                <label>Name</label>
-                <input id="name" />
-            </div>
-        </div>
-        <div class="modal-footer">
-            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
-            <button type="button" id="saveCommand" class="btn btn-primary">Save</button>
-        </div>
-    </div>
-</div>
-
diff --git a/extension/data/public/templates/data-detail.html b/extension/data/public/templates/data-detail.html
index bab90d447f93e571ac4ae21b5b1a40fbc58df4bb..3b1b82f816fbde9ba74e81528fbebaa53365a8a8 100644
--- a/extension/data/public/templates/data-detail.html
+++ b/extension/data/public/templates/data-detail.html
@@ -1,5 +1,3 @@
-﻿<h2> Schema - {{:name}}</h2>
-
-<div>
+﻿<div>
     <textarea id="contentArea">{{:dataJson}}</textarea>
 </div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-list-toolbar.html b/extension/data/public/templates/data-list-toolbar.html
new file mode 100644
index 0000000000000000000000000000000000000000..1e45951598c9f6dfc8684f0225f0f6d18be54206
--- /dev/null
+++ b/extension/data/public/templates/data-list-toolbar.html
@@ -0,0 +1,7 @@
+﻿<div class="navbar-header sub-header">
+    <ul class="nav navbar-nav sub-header">
+        <p class="navbar-text">List of data items</p>
+        <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
+    </ul>
+
+</div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-template-extension.html b/extension/data/public/templates/data-template-extension.html
index 8beb06da5f1be032a11edfc4674200fb9772677e..e57ae3ef2932475799e78590dbe966b8b5be579f 100644
--- a/extension/data/public/templates/data-template-extension.html
+++ b/extension/data/public/templates/data-template-extension.html
@@ -1,4 +1,4 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 <div class="expandable-body properties" style="display: none">
     <button class="btn btn-sm btn-primary" id="dataItemCommand">Data Upload</button>
 </div>

From 1b167e78b854d10a9a6e2348cebc1295f4ac4063 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 30 Jan 2014 21:46:34 +0100
Subject: [PATCH] toolbars, editable name

---
 extension/data/lib/data.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 14d7b409457855a15a04d043a8619cf1e6478c17..ab35ae8000dad5ef80087b5727f703b2e1758870 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -80,6 +80,9 @@ Data.prototype.create = function (dataItem) {
 Data.prototype._beforeCreateHandler = function(args, entity) {
      if (entity.shortid == null)
         entity.shortid = shortid.generate();
+    
+      if (entity.name == null)
+        entity.name = "not set";
 };
 
 function createEntitySetDefinitions(entitySets, next) {

From 8c3ff062375b74ef94bfac84ac3122609406d76a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 31 Jan 2014 20:15:05 +0100
Subject: [PATCH] api help

---
 extension/data/lib/data.js                    |  4 ++--
 extension/data/public/js/data.dialog.model.js |  2 +-
 extension/data/public/js/main.js              | 18 ++++++++++++------
 extension/data/public/js/main_dev.js          | 18 ++++++++++++------
 4 files changed, 27 insertions(+), 15 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index ab35ae8000dad5ef80087b5727f703b2e1758870..d9af1d4b78cad27398d8801ad52d74e2d474cbdb 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -36,7 +36,7 @@ Data = function (reporter, definition) {
         reporter.templates.TemplateType.addMember("dataItem", { type:  this.DataItemType });
     } else {
         this.DataItemType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
-        reporter.templates.TemplateType.addMember("dataItemId", { type: "id" });
+        reporter.templates.TemplateType.addMember("dataItemId", { type: "string" });
     }
     
     this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
@@ -59,7 +59,7 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
         logger.info("Searching for before dataItem to apply");
 
-        return self.entitySet.find(request.template.dataItemId);
+        return self.entitySet.single(function(d) { return d.shortid == this.id; }, { id: request.template.dataItemId } );
     };
 
     return FindDataItem().then(function(di) {
diff --git a/extension/data/public/js/data.dialog.model.js b/extension/data/public/js/data.dialog.model.js
index 7aa2afe3274bf6002f5bfee1e38e52034d22016e..c4366b7b0c863cbc686f21d734277d9926d1193a 100644
--- a/extension/data/public/js/data.dialog.model.js
+++ b/extension/data/public/js/data.dialog.model.js
@@ -55,7 +55,7 @@
             }
 
             app.dataContext.data.saveChanges().then(function () {
-                self.templateModel.set("dataItemId", entity._id);
+                self.templateModel.set("dataItemId", entity.shortid);
                 options.success();
             });
         },
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 537d7c4bd3805d77f9f193ebeed078fb1e941da9..bb6a486d784a4d77a80cb28b56be88353df2f565 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -5,12 +5,11 @@
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateView, ToolbarView) {
 
         app.module("data", function(module) {
-            var Router = Backbone.Router.extend({
-                
+            var Router = Backbone.Router.extend({                
                 initialize: function() {
                     app.listenTo(app, "data-saved", function(model) {
                         window.location.hash = "/extension/data/detail/" + model.get("shortid");
-                    });  
+                    });
                 },
 
                 routes: {
@@ -23,7 +22,7 @@
                     this.navigate("/extension/data/list");
 
                     var model = new DataListModel();
-                    
+
                     app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
 
 
@@ -32,7 +31,7 @@
 
                 dataDetail: function(id) {
                     var model = new DataModel();
-                    app.layout.showToolbarViewComposition(new DataDetailView({model: model}), new ToolbarView({model: model}) );
+                    app.layout.showToolbarViewComposition(new DataDetailView({ model: model }), new ToolbarView({ model: model }));
 
                     if (id != null) {
                         model.set("shortid", id);
@@ -64,17 +63,24 @@
                 context.extensionsRegion.show(view);
             });
 
+
             app.on("template-extensions-get-state", function(model, state) {
+                if (!app.settings.playgroundMode) {
+                    state.dataItemId = model.get("dataItemId");
+                    return;
+                }
+
                 if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
                     state.dataItem = model.get("dataItem").dataJson;
                 else
                     state.dataItem = null;
             });
 
+
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
-                    'shortid': { 'type': 'Edm.String'},
+                    'shortid': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
                     'dataJson': { 'type': 'Edm.String' },
                 }, null);
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 537d7c4bd3805d77f9f193ebeed078fb1e941da9..bb6a486d784a4d77a80cb28b56be88353df2f565 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -5,12 +5,11 @@
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateView, ToolbarView) {
 
         app.module("data", function(module) {
-            var Router = Backbone.Router.extend({
-                
+            var Router = Backbone.Router.extend({                
                 initialize: function() {
                     app.listenTo(app, "data-saved", function(model) {
                         window.location.hash = "/extension/data/detail/" + model.get("shortid");
-                    });  
+                    });
                 },
 
                 routes: {
@@ -23,7 +22,7 @@
                     this.navigate("/extension/data/list");
 
                     var model = new DataListModel();
-                    
+
                     app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
 
 
@@ -32,7 +31,7 @@
 
                 dataDetail: function(id) {
                     var model = new DataModel();
-                    app.layout.showToolbarViewComposition(new DataDetailView({model: model}), new ToolbarView({model: model}) );
+                    app.layout.showToolbarViewComposition(new DataDetailView({ model: model }), new ToolbarView({ model: model }));
 
                     if (id != null) {
                         model.set("shortid", id);
@@ -64,17 +63,24 @@
                 context.extensionsRegion.show(view);
             });
 
+
             app.on("template-extensions-get-state", function(model, state) {
+                if (!app.settings.playgroundMode) {
+                    state.dataItemId = model.get("dataItemId");
+                    return;
+                }
+
                 if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
                     state.dataItem = model.get("dataItem").dataJson;
                 else
                     state.dataItem = null;
             });
 
+
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
-                    'shortid': { 'type': 'Edm.String'},
+                    'shortid': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
                     'dataJson': { 'type': 'Edm.String' },
                 }, null);

From 5cb948875769cb3fa0e7ef2d2796f8cc66274e2a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 5 Feb 2014 20:25:47 +0100
Subject: [PATCH] examples refactoring

---
 extension/data/public/js/data.template.view.js | 3 ++-
 extension/data/public/js/main.js               | 3 +++
 extension/data/public/js/main_dev.js           | 3 +++
 extension/data/test/dataTest.js                | 2 +-
 4 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/extension/data/public/js/data.template.view.js b/extension/data/public/js/data.template.view.js
index 8bdc7ea8bc556464916824c0a30fbc82a636b7c0..3885bd3c65dbdc688870e4b58bd8ff1093e773c1 100644
--- a/extension/data/public/js/data.template.view.js
+++ b/extension/data/public/js/data.template.view.js
@@ -31,7 +31,8 @@
                         model: model
                     });
                     self.listenTo(dialog, "dialog-close", function() {
-                         self.render();
+                        self.render();
+                        self.templateModel.save();
                     });
                     app.layout.dialog.show(dialog);
                 }
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index bb6a486d784a4d77a80cb28b56be88353df2f565..0fa9934c6b424dcce664dabccf748a37b048b037 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -66,6 +66,9 @@
 
             app.on("template-extensions-get-state", function(model, state) {
                 if (!app.settings.playgroundMode) {
+                     if (model.get("dataItemId") == null)
+                        return;
+                    
                     state.dataItemId = model.get("dataItemId");
                     return;
                 }
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index bb6a486d784a4d77a80cb28b56be88353df2f565..0fa9934c6b424dcce664dabccf748a37b048b037 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -66,6 +66,9 @@
 
             app.on("template-extensions-get-state", function(model, state) {
                 if (!app.settings.playgroundMode) {
+                     if (model.get("dataItemId") == null)
+                        return;
+                    
                     state.dataItemId = model.get("dataItemId");
                     return;
                 }
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 79574ce830cf721aca961ff8264022783170a409..f0008eeaec66ca57713aa9412d248f35a5a75324 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -15,7 +15,7 @@ describeReporting(["data"], function (reporter) {
                 reporter.logger.info(JSON.stringify(data));
                 var request = {
                     reporter: reporter,
-                    template: { html: "html", dataItemId: data._id },
+                    template: { html: "html", dataItemId: data.shortid },
                     options: { recipe: "html" },
                 };
 

From 68108ab2bd045a9d060bb325953a3e1bb92cd361 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 10:22:55 +0100
Subject: [PATCH] statistics and refactoring

---
 extension/data/public/js/data.dialog.model.js | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/extension/data/public/js/data.dialog.model.js b/extension/data/public/js/data.dialog.model.js
index c4366b7b0c863cbc686f21d734277d9926d1193a..f2d6abb75318819920b894931bc3b5c96f8bac11 100644
--- a/extension/data/public/js/data.dialog.model.js
+++ b/extension/data/public/js/data.dialog.model.js
@@ -16,9 +16,10 @@
                 self.items = items;
 
                 if (self.templateModel.get("dataItemId") != null) {
-                    return app.dataContext.data.find(self.templateModel.get("dataItemId")).then(function (res) {
-                        self.set(self.parse(res.initData), {silent: true});
-                        return options.success();
+                    return app.dataContext.data.single(function(i) { return i.shortid == this.id; }, { id: self.templateModel.get("dataItemId") })
+                        .then(function (res) {
+                            self.set(self.parse(res.initData), {silent: true});
+                            return options.success();
                     });
                 }
 

From b342d6e6e076846a042232b201c3b190c9160751 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 12:28:38 +0100
Subject: [PATCH] fixed design

---
 extension/data/public/templates/data-list-header.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/public/templates/data-list-header.html b/extension/data/public/templates/data-list-header.html
index 574425e2b26d38ff1168067990a3e099b46d15aa..da75fdb0f5deb323d0e5657f05ef57a9c5a072cf 100644
--- a/extension/data/public/templates/data-list-header.html
+++ b/extension/data/public/templates/data-list-header.html
@@ -1 +1 @@
-﻿<th>Name</th>
+﻿<th>NAME</th>

From c2800e8d2a6b9b2084cc2662ca89b3ac5550953a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 16:00:58 +0100
Subject: [PATCH] refactored template exntensions layout for standard mode

---
 extension/data/public/js/data.dialog.model.js      | 64 ----------------------
 extension/data/public/js/data.dialog.view.js       | 46 ----------------
 .../public/js/data.template.playground.dialog.js   | 30 ++++++++++
 .../public/js/data.template.playground.model.js    | 24 ++++++++
 .../public/js/data.template.playground.view.js     | 42 ++++++++++++++
 .../data/public/js/data.template.standard.model.js | 36 ++++++++++++
 .../data/public/js/data.template.standard.view.js  | 22 ++++++++
 extension/data/public/js/data.template.view.js     | 43 ---------------
 extension/data/public/js/main.js                   | 25 +++++++--
 extension/data/public/js/main_dev.js               | 25 +++++++--
 extension/data/public/templates/data-dialog.html   | 18 ------
 .../data-template-extension-playground.html        |  4 ++
 .../data-template-extension-standard.html          | 19 +++++++
 .../public/templates/data-template-extension.html  |  4 --
 14 files changed, 215 insertions(+), 187 deletions(-)

diff --git a/extension/data/public/js/data.dialog.model.js b/extension/data/public/js/data.dialog.model.js
deleted file mode 100644
index f2d6abb75318819920b894931bc3b5c96f8bac11..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.dialog.model.js
+++ /dev/null
@@ -1,64 +0,0 @@
-﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            if (app.settings.playgroundMode) {
-                var obj = this.templateModel.get("dataItem") || {};
-                obj = obj.initData || {};
-                this.set(this.parse(obj), {silent: true});
-                return options.success();
-            }
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items;
-
-                if (self.templateModel.get("dataItemId") != null) {
-                    return app.dataContext.data.single(function(i) { return i.shortid == this.id; }, { id: self.templateModel.get("dataItemId") })
-                        .then(function (res) {
-                            self.set(self.parse(res.initData), {silent: true});
-                            return options.success();
-                    });
-                }
-
-                self.set(items.length > 0 ? items[0].initData : {}, { silent: true });
-                return options.success();
-            });
-        },
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:_id", function() {
-                this.set(this.parse(_.where(self.items, { _id: self.get("_id")})[0].initData));
-            });
-        },
-
-        save: function (options) {
-            var self = this;
-            var entity = new $entity.DataItem(this.attributes);
-
-            if (app.settings.playgroundMode) {
-                this.templateModel.set("dataItem", entity);
-                return options.success();
-            } 
-            
-            if (entity._id != null) {
-                app.dataContext.data.attach(entity);
-                this.copyAttributesToEntity(entity);
-            } else {
-                app.dataContext.data.add(entity);
-            }
-
-            app.dataContext.data.saveChanges().then(function () {
-                self.templateModel.set("dataItemId", entity.shortid);
-                options.success();
-            });
-        },
-    });
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.dialog.view.js b/extension/data/public/js/data.dialog.view.js
deleted file mode 100644
index 850faff8b4b146803d5502e2ae273f562d95a9e5..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.dialog.view.js
+++ /dev/null
@@ -1,46 +0,0 @@
-﻿define(["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-            "click #createCommand": "create",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "getItems", "getItemsLength");
-        },
-        
-        onDomRefresh: function () {
-            //why is this here?
-            //if (this.model.get("_id") == null)
-            //    return;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        create: function () {
-            app.data.trigger("create");
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.playground.dialog.js b/extension/data/public/js/data.template.playground.dialog.js
new file mode 100644
index 0000000000000000000000000000000000000000..0f0690321aae5a0fed206f06007e89d224012bb8
--- /dev/null
+++ b/extension/data/public/js/data.template.playground.dialog.js
@@ -0,0 +1,30 @@
+﻿define(["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.playground.model.js b/extension/data/public/js/data.template.playground.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..a94ceb20a3e434384efa52f8b015ddd5758c0ad1
--- /dev/null
+++ b/extension/data/public/js/data.template.playground.model.js
@@ -0,0 +1,24 @@
+﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var obj = this.templateModel.get("dataItem") || {};
+            obj = obj.initData || {};
+            this.set(this.parse(obj), {silent: true});
+            return options.success();
+        },
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        save: function (options) {
+            var self = this;
+            var entity = new $entity.DataItem(this.attributes);
+            
+            this.templateModel.set("dataItem", entity);
+            return options.success();
+        },
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.playground.view.js b/extension/data/public/js/data.template.playground.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..6b3ca9f555c03b8b0fa9dc6cc0365f2827c6bce2
--- /dev/null
+++ b/extension/data/public/js/data.template.playground.view.js
@@ -0,0 +1,42 @@
+﻿define(["app", "marionette", "core/view.base", "core/utils", "./data.template.playground.dialog", "./data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            model.fetch({
+                success: function () {
+                    var dialog = new DialogView({
+                        model: model
+                    });
+                    self.listenTo(dialog, "dialog-close", function() {
+                        self.render();
+                        self.templateModel.save();
+                    });
+                    app.layout.dialog.show(dialog);
+                }
+            });
+        }
+    });
+});
+
diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..54d1eac88af490492e9614db342b6fa76382df12
--- /dev/null
+++ b/extension/data/public/js/data.template.standard.model.js
@@ -0,0 +1,36 @@
+﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                    
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.standard.view.js b/extension/data/public/js/data.template.standard.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..6f090000e19b267225e9c837e26101104259c818
--- /dev/null
+++ b/extension/data/public/js/data.template.standard.view.js
@@ -0,0 +1,22 @@
+﻿define(["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.view.js b/extension/data/public/js/data.template.view.js
deleted file mode 100644
index 3885bd3c65dbdc688870e4b58bd8ff1093e773c1..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.template.view.js
+++ /dev/null
@@ -1,43 +0,0 @@
-﻿define(["app", "marionette", "core/view.base", "core/utils", "./data.dialog.view", "./data.dialog.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return this.templateModel.get("dataItemId") ||
-                ((this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null));
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            model.fetch({
-                success: function () {
-                    var dialog = new DialogView({
-                        model: model
-                    });
-                    self.listenTo(dialog, "dialog-close", function() {
-                        self.render();
-                        self.templateModel.save();
-                    });
-                    app.layout.dialog.show(dialog);
-                }
-            });
-        }
-    });
-});
-
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 0fa9934c6b424dcce664dabccf748a37b048b037..1fdd9c3a381ccefeb6292d05f98eea2982c4a2b8 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,10 @@
-﻿define(["app", "marionette", "backbone",
+﻿define(["app", "marionette", "backbone",    
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
-        "./data.template.view", "./data.toolbar.view"],
-    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateView, ToolbarView) {
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
+    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
+        TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
         app.module("data", function(module) {
             var Router = Backbone.Router.extend({                
@@ -58,9 +60,20 @@
             }
 
             app.on("template-extensions-render", function(context) {
-                var view = new TemplateView();
-                view.setTemplateModel(context.template);
-                context.extensionsRegion.show(view);
+                
+                if (app.settings.playgroundMode) {
+                    var view = new TemplatePlaygroundView();
+                    view.setTemplateModel(context.template);
+                    context.extensionsRegion.show(view);
+                } else {
+                    var model = new TemplateStandardModel();
+                    model.setTemplate(context.template);
+                    
+                    model.fetch({ success: function() {
+                        var view = new TemplateStandardView({ model: model});
+                        context.extensionsRegion.show(view);     
+                    }});
+                }
             });
 
 
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 0fa9934c6b424dcce664dabccf748a37b048b037..1fdd9c3a381ccefeb6292d05f98eea2982c4a2b8 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -1,8 +1,10 @@
-﻿define(["app", "marionette", "backbone",
+﻿define(["app", "marionette", "backbone",    
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
-        "./data.template.view", "./data.toolbar.view"],
-    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateView, ToolbarView) {
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
+    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
+        TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
         app.module("data", function(module) {
             var Router = Backbone.Router.extend({                
@@ -58,9 +60,20 @@
             }
 
             app.on("template-extensions-render", function(context) {
-                var view = new TemplateView();
-                view.setTemplateModel(context.template);
-                context.extensionsRegion.show(view);
+                
+                if (app.settings.playgroundMode) {
+                    var view = new TemplatePlaygroundView();
+                    view.setTemplateModel(context.template);
+                    context.extensionsRegion.show(view);
+                } else {
+                    var model = new TemplateStandardModel();
+                    model.setTemplate(context.template);
+                    
+                    model.fetch({ success: function() {
+                        var view = new TemplateStandardView({ model: model});
+                        context.extensionsRegion.show(view);     
+                    }});
+                }
             });
 
 
diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
index e6d4c9b2528091f8918ed4efd9223cf9d1c0f203..ee9ed4cac16d8bc6a4ed88ce132514459702e6e4 100644
--- a/extension/data/public/templates/data-dialog.html
+++ b/extension/data/public/templates/data-dialog.html
@@ -8,24 +8,6 @@
             {{if ~getMode()}}
                <textarea id="contentArea">{{:dataJson}}</textarea>
             {{else}}
-              {{if ~getItemsLength() > 0}}
-                  Choose an existing data item 
-                  <div class="btn-group" data-binding="_id" style="margin-bottom: 15px; margin-left: 10px">
-                      <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:_id}}">{{:name}}</button>
-                      <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
-                          <span class="caret"></span>
-                      </button>
-                      <ul class="dropdown-menu" role="menu">
-                          {{for ~getItems()}}
-                          <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:_id}}">{{:name}}</a></li>
-                          {{/for}}
-                      </ul>
-                   </div>
-                   <textarea id="contentArea">{{:dataJson}}</textarea>
-              {{else}}
-                    You dont have a data item yet. Go ahead and create one. 
-                         <button type="button" id="createCommand" class="btn btn-primary" data-dismiss="modal">Create data item</button>
-              {{/if}}
             {{/if}}
          
         </div>
diff --git a/extension/data/public/templates/data-template-extension-playground.html b/extension/data/public/templates/data-template-extension-playground.html
new file mode 100644
index 0000000000000000000000000000000000000000..e57ae3ef2932475799e78590dbe966b8b5be579f
--- /dev/null
+++ b/extension/data/public/templates/data-template-extension-playground.html
@@ -0,0 +1,4 @@
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+<div class="expandable-body properties" style="display: none">
+    <button class="btn btn-sm btn-primary" id="dataItemCommand">Data Upload</button>
+</div>
diff --git a/extension/data/public/templates/data-template-extension-standard.html b/extension/data/public/templates/data-template-extension-standard.html
new file mode 100644
index 0000000000000000000000000000000000000000..e43639ed586683ca20a064501188d0461c6bcba6
--- /dev/null
+++ b/extension/data/public/templates/data-template-extension-standard.html
@@ -0,0 +1,19 @@
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+
+<div class="expandable-body properties" style="display: none">
+    {{if ~getItemsLength() > 1}}
+    <div class="btn-group" data-binding="shortid" style="margin-bottom: 15px; margin-left: 10px">
+        <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+        <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
+            <span class="caret"></span>
+        </button>
+        <ul class="dropdown-menu" role="menu">
+            {{for ~getItems()}}
+            <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
+            {{/for}}
+        </ul>
+    </div>
+    {{else}}
+    <a class="btn btn-primary" href="/#/extension/data/detail">Create</a>
+    {{/if}}
+</div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-template-extension.html b/extension/data/public/templates/data-template-extension.html
deleted file mode 100644
index e57ae3ef2932475799e78590dbe966b8b5be579f..0000000000000000000000000000000000000000
--- a/extension/data/public/templates/data-template-extension.html
+++ /dev/null
@@ -1,4 +0,0 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
-<div class="expandable-body properties" style="display: none">
-    <button class="btn btn-sm btn-primary" id="dataItemCommand">Data Upload</button>
-</div>

From 4904ffc6fa68d4c02d4de952cb4424f1a987b36a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 20:23:56 +0100
Subject: [PATCH] title edit

---
 extension/data/public/js/data.detail.view.js     | 3 ++-
 extension/data/public/js/data.model.js           | 1 +
 extension/data/public/templates/data-detail.html | 4 +++-
 extension/data/public/templates/data-list.html   | 4 +++-
 4 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/extension/data/public/js/data.detail.view.js b/extension/data/public/js/data.detail.view.js
index 22a6722f095320e45a6c4694c510435f9f4a7bc4..4db3678b33c7e0e4f845e24b551e31ecac153f66 100644
--- a/extension/data/public/js/data.detail.view.js
+++ b/extension/data/public/js/data.detail.view.js
@@ -3,7 +3,8 @@
         template: "data-detail",
 
         initialize: function () {
-            this.listenTo(this.model, "sync", this.render);
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
         },
         
         onDomRefresh: function () {
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index 6eedfc4de72b44df4329afc154aea43cbf068070..f7bc40fd29ec04e5dccbc529af7cc31a827b1c5e 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -10,6 +10,7 @@
         _initialize: function() {
             var self = this;
             this.Entity = $entity.DataItem;
+            this.set("name", "anonymous");
         },
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/templates/data-detail.html b/extension/data/public/templates/data-detail.html
index 3b1b82f816fbde9ba74e81528fbebaa53365a8a8..5ce3dbc0f22bd3ae32ace3ed4247b9cabdf6ed25 100644
--- a/extension/data/public/templates/data-detail.html
+++ b/extension/data/public/templates/data-detail.html
@@ -1,3 +1,5 @@
-﻿<div>
+﻿{{title #data}}{{/title}}
+
+<div>
     <textarea id="contentArea">{{:dataJson}}</textarea>
 </div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-list.html b/extension/data/public/templates/data-list.html
index b4675c3cb42de0106f3faa58dd18297e7f60cfdd..3167d98c749f711bce34fe87e45ca647355b15f5 100644
--- a/extension/data/public/templates/data-list.html
+++ b/extension/data/public/templates/data-list.html
@@ -1,3 +1,5 @@
-﻿<div id="schemaGridBox">
+﻿<span style="pull-left"><h3>data items list</h3></span>
+
+<div id="schemaGridBox">
     
 </div>
\ No newline at end of file

From 43beb96192e4a501e9ec5dfa3aca12d18b1d222d Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Feb 2014 21:13:45 +0100
Subject: [PATCH] added columns to tables

---
 extension/data/lib/data.js                            | 15 +++++++++++----
 extension/data/public/js/data.model.js                |  7 +++++--
 extension/data/public/js/main.js                      |  6 ++++--
 extension/data/public/js/main_dev.js                  |  6 ++++--
 extension/data/public/templates/data-list-header.html |  2 ++
 extension/data/public/templates/data-list-rows.html   |  5 ++++-
 6 files changed, 30 insertions(+), 11 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index d9af1d4b78cad27398d8801ad52d74e2d474cbdb..6fb47b805de2df26ccfe891e56925d87026bcf3a 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -29,7 +29,9 @@ Data = function (reporter, definition) {
     this.DataItemType = $data.Class.define(reporter.extendGlobalTypeName("$entity.DataItem"), $data.Entity, null, {
         dataJson: { type: "string" },
         name: { type: "string" },
-        shortid: { type: "string"}
+        creationDate: { type: "date" },
+        shortid: { type: "string"},
+        modificationDate: { type: "date" },
     }, null);
     
     if (this.reporter.playgroundMode) {
@@ -40,6 +42,8 @@ Data = function (reporter, definition) {
     }
     
     this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
+    this.DataItemType.addEventListener("beforeUpdate", Data.prototype._beforeUpdateHandler.bind(this));
+    
     this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
     this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
 };
@@ -70,7 +74,6 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
 Data.prototype.create = function (dataItem) {
     logger.info(sformat("Creating dataItem {0}.", dataItem.name));
-
     var ent = new this.DataItemType(dataItem);
     this.entitySet.add(ent);
     
@@ -81,8 +84,12 @@ Data.prototype._beforeCreateHandler = function(args, entity) {
      if (entity.shortid == null)
         entity.shortid = shortid.generate();
     
-      if (entity.name == null)
-        entity.name = "not set";
+    entity.creationDate = new Date();
+    entity.modificationDate = new Date();
+};
+
+Data.prototype._beforeUpdateHandler = function(args, entity) {
+     entity.modificationDate = new Date();
 };
 
 function createEntitySetDefinitions(entitySets, next) {
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index f7bc40fd29ec04e5dccbc529af7cc31a827b1c5e..4deee150595c493c3f78232b958ab2d500eb3b80 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -5,12 +5,15 @@
 
         fetchQuery: function (cb) {
             return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },        
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
 
         _initialize: function() {
             var self = this;
             this.Entity = $entity.DataItem;
-            this.set("name", "anonymous");
         },
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 1fdd9c3a381ccefeb6292d05f98eea2982c4a2b8..daf389277b4b173548af72c74d420f3f73210829 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -51,11 +51,11 @@
             if (!app.settings.playgroundMode) {
 
                 app.on("menu-render", function(context) {
-                    context.result += "<li><a href='#/extension/data/list'>Data</a></li>";
+                    context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='#/extension/data/detail'createDataLink'>Create Data</a></li>";
+                    context.result += "<li><a href='/#/extension/data/detail'createDataLink'>Create Data</a></li>";
                 });
             }
 
@@ -98,6 +98,8 @@
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
                     'shortid': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
                     'dataJson': { 'type': 'Edm.String' },
                 }, null);
 
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 1fdd9c3a381ccefeb6292d05f98eea2982c4a2b8..daf389277b4b173548af72c74d420f3f73210829 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -51,11 +51,11 @@
             if (!app.settings.playgroundMode) {
 
                 app.on("menu-render", function(context) {
-                    context.result += "<li><a href='#/extension/data/list'>Data</a></li>";
+                    context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='#/extension/data/detail'createDataLink'>Create Data</a></li>";
+                    context.result += "<li><a href='/#/extension/data/detail'createDataLink'>Create Data</a></li>";
                 });
             }
 
@@ -98,6 +98,8 @@
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
                     'shortid': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
                     'dataJson': { 'type': 'Edm.String' },
                 }, null);
 
diff --git a/extension/data/public/templates/data-list-header.html b/extension/data/public/templates/data-list-header.html
index da75fdb0f5deb323d0e5657f05ef57a9c5a072cf..edde79d6f1b815a5cbb3e1a1293457a7f897f05c 100644
--- a/extension/data/public/templates/data-list-header.html
+++ b/extension/data/public/templates/data-list-header.html
@@ -1 +1,3 @@
 ﻿<th>NAME</th>
+<th>LAST MODIFIED</th>
+<th>CREATED</th>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-list-rows.html b/extension/data/public/templates/data-list-rows.html
index 9d9d1c23397109e5c9aac9dc7ab6b8ab1aaa1fa8..e2cc8f2141abf6c5b14c7ecbd442ddef53f4dc2f 100644
--- a/extension/data/public/templates/data-list-rows.html
+++ b/extension/data/public/templates/data-list-rows.html
@@ -1 +1,4 @@
-﻿<td><a>{{:name}}</a></td>
\ No newline at end of file
+﻿<td><a>{{:name}}</a></td>
+<td>{{:~dateToString(modificationDate)}}</td>
+<td>{{:~dateToString(creationDate)}}</td>
+

From 84d69ba40febea954a7b4a8674dd99d91412afec Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Feb 2014 15:55:54 +0100
Subject: [PATCH] checkboxes and merge

---
 extension/data/public/templates/data-dialog.html                      | 4 ++--
 extension/data/public/templates/data-list-rows.html                   | 2 +-
 extension/data/public/templates/data-list.html                        | 2 +-
 extension/data/public/templates/data-template-extension-standard.html | 2 +-
 4 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
index ee9ed4cac16d8bc6a4ed88ce132514459702e6e4..f31ddd180a1a553644184bb3e110aac0c7a75ae8 100644
--- a/extension/data/public/templates/data-dialog.html
+++ b/extension/data/public/templates/data-dialog.html
@@ -1,4 +1,4 @@
-﻿<div class="modal-dialog">
+﻿<div class="modal-dialog fs">
     <div class="modal-content">
         <div class="modal-header">
             <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
@@ -12,7 +12,7 @@
          
         </div>
         <div class="modal-footer">
-            <button type="button" id="saveCommand" class="btn btn-primary" data-dismiss="modal">Save</button>
+            <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Save</button>
         </div>
     </div>
 </div>
diff --git a/extension/data/public/templates/data-list-rows.html b/extension/data/public/templates/data-list-rows.html
index e2cc8f2141abf6c5b14c7ecbd442ddef53f4dc2f..4dbdcd8ade3b17bf901110a30d8cc82a205d0b4d 100644
--- a/extension/data/public/templates/data-list-rows.html
+++ b/extension/data/public/templates/data-list-rows.html
@@ -1,4 +1,4 @@
-﻿<td><a>{{:name}}</a></td>
+﻿<td class="link"><a>{{:name}}</a></td>
 <td>{{:~dateToString(modificationDate)}}</td>
 <td>{{:~dateToString(creationDate)}}</td>
 
diff --git a/extension/data/public/templates/data-list.html b/extension/data/public/templates/data-list.html
index 3167d98c749f711bce34fe87e45ca647355b15f5..1c0faacd53bb7ce95ba284b978dfdbc9a89ef560 100644
--- a/extension/data/public/templates/data-list.html
+++ b/extension/data/public/templates/data-list.html
@@ -1,4 +1,4 @@
-﻿<span style="pull-left"><h3>data items list</h3></span>
+﻿<span><h3>all items</h3></span>
 
 <div id="schemaGridBox">
     
diff --git a/extension/data/public/templates/data-template-extension-standard.html b/extension/data/public/templates/data-template-extension-standard.html
index e43639ed586683ca20a064501188d0461c6bcba6..365ffc832938bb88d7c5a61e2c5875b1846139ef 100644
--- a/extension/data/public/templates/data-template-extension-standard.html
+++ b/extension/data/public/templates/data-template-extension-standard.html
@@ -2,7 +2,7 @@
 
 <div class="expandable-body properties" style="display: none">
     {{if ~getItemsLength() > 1}}
-    <div class="btn-group" data-binding="shortid" style="margin-bottom: 15px; margin-left: 10px">
+    <div class="btn-group" data-binding="shortid">
         <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
         <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
             <span class="caret"></span>

From 36e1abe6c122581673b8d5d5c95e86bc246b4fa0 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Feb 2014 19:59:53 +0100
Subject: [PATCH] styles fix

---
 extension/data/public/js/data.detail.view.js     | 8 ++++++++
 extension/data/public/templates/data-detail.html | 8 +++++---
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/extension/data/public/js/data.detail.view.js b/extension/data/public/js/data.detail.view.js
index 4db3678b33c7e0e4f845e24b551e31ecac153f66..59683c485ce56ba784803f41dea0b5f514f62e71 100644
--- a/extension/data/public/js/data.detail.view.js
+++ b/extension/data/public/js/data.detail.view.js
@@ -8,6 +8,9 @@
         },
         
         onDomRefresh: function () {
+            
+            var top = $("#contentWrap").position().top;
+            
             this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
                 mode: "javascript",
                 height: "350px",
@@ -16,6 +19,11 @@
             });
             
              codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
         },
     });
 });
diff --git a/extension/data/public/templates/data-detail.html b/extension/data/public/templates/data-detail.html
index 5ce3dbc0f22bd3ae32ace3ed4247b9cabdf6ed25..12fa9f4c95f9ccb3c1d2348b1b101eb7dc505ddd 100644
--- a/extension/data/public/templates/data-detail.html
+++ b/extension/data/public/templates/data-detail.html
@@ -1,5 +1,7 @@
-﻿{{title #data}}{{/title}}
+﻿<div>
+    {{title #data}}{{/title}}
+</div>
 
-<div>
-    <textarea id="contentArea">{{:dataJson}}</textarea>
+<div id="contentWrap">
+    <textarea id="contentArea" class="full-content">{{:dataJson}}</textarea>
 </div>
\ No newline at end of file

From 2d9d6f876b5c9fcdf8913dc8ca6f09887606483c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 16 Feb 2014 11:12:22 +0100
Subject: [PATCH] fixed tests, support for standard on prem mode

---
 extension/data/public/js/main.js | 308 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 303 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index daf389277b4b173548af72c74d420f3f73210829..834755f5d3a3cae2544cf5d5857510900cb5accc 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,306 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+        
+        onDomRefresh: function () {
+            
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+            
+             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+    });
+});
+
+
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var obj = this.templateModel.get("dataItem") || {};
+            obj = obj.initData || {};
+            this.set(this.parse(obj), {silent: true});
+            return options.success();
+        },
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+        
+        save: function (options) {
+            var self = this;
+            var entity = new $entity.DataItem(this.attributes);
+            
+            this.templateModel.set("dataItem", entity);
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            model.fetch({
+                success: function () {
+                    var dialog = new DialogView({
+                        model: model
+                    });
+                    self.listenTo(dialog, "dialog-close", function() {
+                        self.render();
+                        self.templateModel.save();
+                    });
+                    app.layout.dialog.show(dialog);
+                }
+            });
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                    
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 8160cdc4dd040bcb5b592acb311946e8cac5a37d Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 16 Feb 2014 20:15:08 +0100
Subject: [PATCH] phantom margin, refactoring

---
 extension/data/lib/data.js                         |   2 +-
 .../public/js/data.template.playground.model.js    |  13 +-
 .../public/js/data.template.playground.view.js     |  20 +-
 extension/data/public/js/main.js                   | 330 +--------------------
 extension/data/public/js/main_dev.js               |  17 --
 5 files changed, 28 insertions(+), 354 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 6fb47b805de2df26ccfe891e56925d87026bcf3a..2f2edf996667eeb6a77106b57bc773c881dba433 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -50,7 +50,7 @@ Data = function (reporter, definition) {
 
 Data.prototype.handleBeforeRender = function (request, response) {
     
-    if (!request.template.dataItemId && !request.template.dataItem) {
+    if (!request.template.dataItemId && !(request.template.dataItem != null && request.template.dataItem.dataJson)) {
         logger.info("DateItem not defined for this template.");
         return;
     }
diff --git a/extension/data/public/js/data.template.playground.model.js b/extension/data/public/js/data.template.playground.model.js
index a94ceb20a3e434384efa52f8b015ddd5758c0ad1..bbc1af09cfe42654af60d8c57238e2c8b19fd2fb 100644
--- a/extension/data/public/js/data.template.playground.model.js
+++ b/extension/data/public/js/data.template.playground.model.js
@@ -1,23 +1,14 @@
 ﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
    
     return ModelBase.extend({
-        
-        fetch: function (options) {
-            var obj = this.templateModel.get("dataItem") || {};
-            obj = obj.initData || {};
-            this.set(this.parse(obj), {silent: true});
-            return options.success();
-        },
 
         setTemplateModel: function (templateModel) {
             this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
         },
         
         save: function (options) {
-            var self = this;
-            var entity = new $entity.DataItem(this.attributes);
-            
-            this.templateModel.set("dataItem", entity);
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
             return options.success();
         },
     });
diff --git a/extension/data/public/js/data.template.playground.view.js b/extension/data/public/js/data.template.playground.view.js
index 6b3ca9f555c03b8b0fa9dc6cc0365f2827c6bce2..98409aca0f33e31692a434372e80517f75484a64 100644
--- a/extension/data/public/js/data.template.playground.view.js
+++ b/extension/data/public/js/data.template.playground.view.js
@@ -17,6 +17,9 @@
         
         setTemplateModel: function (model) {
             this.templateModel = model;
+            
+            if (model.get("dataItem") == null)
+                model.set("dataItem", new $entity.DataItem());
         },
         
 
@@ -24,18 +27,13 @@
             var self = this;
             var model = new Model();
             model.setTemplateModel(this.templateModel);
-            model.fetch({
-                success: function () {
-                    var dialog = new DialogView({
-                        model: model
-                    });
-                    self.listenTo(dialog, "dialog-close", function() {
-                        self.render();
-                        self.templateModel.save();
-                    });
-                    app.layout.dialog.show(dialog);
-                }
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
             });
+            
+            app.layout.dialog.show(dialog);
         }
     });
 });
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 834755f5d3a3cae2544cf5d5857510900cb5accc..90f56863fb2c2fafbdb9bd1cd0d9b1f2237bf42e 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,306 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            name: "data item name"
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-        
-        onDomRefresh: function () {
-            
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-            
-             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-    });
-});
-
-
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var obj = this.templateModel.get("dataItem") || {};
-            obj = obj.initData || {};
-            this.set(this.parse(obj), {silent: true});
-            return options.success();
-        },
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-        },
-        
-        save: function (options) {
-            var self = this;
-            var entity = new $entity.DataItem(this.attributes);
-            
-            this.templateModel.set("dataItem", entity);
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            model.fetch({
-                success: function () {
-                    var dialog = new DialogView({
-                        model: model
-                    });
-                    self.listenTo(dialog, "dialog-close", function() {
-                        self.render();
-                        self.templateModel.save();
-                    });
-                    app.layout.dialog.show(dialog);
-                }
-            });
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                    
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
@@ -376,18 +78,18 @@ define(["app", "marionette", "backbone",
 
 
             app.on("template-extensions-get-state", function(model, state) {
-                if (!app.settings.playgroundMode) {
-                     if (model.get("dataItemId") == null)
-                        return;
+                //if (!app.settings.playgroundMode) {
+                //     if (model.get("dataItemId") == null)
+                //        return;
                     
-                    state.dataItemId = model.get("dataItemId");
-                    return;
-                }
-
-                if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
-                    state.dataItem = model.get("dataItem").dataJson;
-                else
-                    state.dataItem = null;
+                //    state.dataItemId = model.get("dataItemId");
+                //    return;
+                //}
+
+                //if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
+                //    state.dataItem = model.get("dataItem").dataJson;
+                //else
+                //    state.dataItem = null;
             });
 
 
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index daf389277b4b173548af72c74d420f3f73210829..98642139ce1f2ba679003abb015a46a4df3bbbad 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -76,23 +76,6 @@
                 }
             });
 
-
-            app.on("template-extensions-get-state", function(model, state) {
-                if (!app.settings.playgroundMode) {
-                     if (model.get("dataItemId") == null)
-                        return;
-                    
-                    state.dataItemId = model.get("dataItemId");
-                    return;
-                }
-
-                if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
-                    state.dataItem = model.get("dataItem").dataJson;
-                else
-                    state.dataItem = null;
-            });
-
-
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {

From 0777e6f2f48c38dd50904b47535f79263a3a6880 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 18 Feb 2014 12:24:32 +0100
Subject: [PATCH] child templates

---
 extension/data/public/js/main.js | 17 -----------------
 1 file changed, 17 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 90f56863fb2c2fafbdb9bd1cd0d9b1f2237bf42e..98642139ce1f2ba679003abb015a46a4df3bbbad 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -76,23 +76,6 @@
                 }
             });
 
-
-            app.on("template-extensions-get-state", function(model, state) {
-                //if (!app.settings.playgroundMode) {
-                //     if (model.get("dataItemId") == null)
-                //        return;
-                    
-                //    state.dataItemId = model.get("dataItemId");
-                //    return;
-                //}
-
-                //if (model.get("dataItem") != null && model.get("dataItem").dataJson != null)
-                //    state.dataItem = model.get("dataItem").dataJson;
-                //else
-                //    state.dataItem = null;
-            });
-
-
             app.on("entity-registration", function(context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {

From 3db996dff6b535f7d8a714a5f92436cd845b9343 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 18 Feb 2014 21:20:57 +0100
Subject: [PATCH] fixing tests and api dialog

---
 extension/data/public/js/data.template.standard.model.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
index 54d1eac88af490492e9614db342b6fa76382df12..12b3091b91abe9b6d5e881cd312d278e93de5a5e 100644
--- a/extension/data/public/js/data.template.standard.model.js
+++ b/extension/data/public/js/data.template.standard.model.js
@@ -23,6 +23,11 @@
 
         setTemplate: function (templateModel) {
             this.templateModel = templateModel;
+
+            var self = this;
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("dataItemId", self.get("shortid"));
+            });
         },
 
         initialize: function () {

From eb34274b9b4e30af8b67ca3ef9541354275b9855 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 20 Feb 2014 01:15:26 +0100
Subject: [PATCH] tutorials, phantom recipe improvments

---
 extension/data/test/dataTest.js | 1 -
 1 file changed, 1 deletion(-)

diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index f0008eeaec66ca57713aa9412d248f35a5a75324..91eb8c0d165032cfac92434d4beabce7b8c4a62b 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -12,7 +12,6 @@ describeReporting(["data"], function (reporter) {
             };
 
             reporter.data.create(dataItem).then(function(data) {
-                reporter.logger.info(JSON.stringify(data));
                 var request = {
                     reporter: reporter,
                     template: { html: "html", dataItemId: data.shortid },

From bc0d6f5245dd612351b30b84f0ca12a14b8f0c62 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 20 Feb 2014 14:38:13 +0100
Subject: [PATCH] changed url for api endpoints

---
 extension/data/test/dataTest.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 91eb8c0d165032cfac92434d4beabce7b8c4a62b..4c9c174ad775b70ac1e4b201357ff4ae1ad57c1c 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -14,7 +14,7 @@ describeReporting(["data"], function (reporter) {
             reporter.data.create(dataItem).then(function(data) {
                 var request = {
                     reporter: reporter,
-                    template: { html: "html", dataItemId: data.shortid },
+                    template: { content: "html", dataItemId: data.shortid },
                     options: { recipe: "html" },
                 };
 
@@ -29,7 +29,7 @@ describeReporting(["data"], function (reporter) {
         it('should callback error when missing data', function(done) {
             var request = {
                 reporter: reporter,
-                template: { html: "html", dataItemId: "AAAAAAAAAAAAAAAAAAAAAAAA" },
+                template: { content: "html", dataItemId: "AAAAAAAAAAAAAAAAAAAAAAAA" },
                 options: { recipe: "html" },
             };
 

From 340d5ee90afc343256fd0514ac2b3f859c2180c7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 23 Feb 2014 17:56:56 +0100
Subject: [PATCH] extension as node modules

---
 extension/data/jsreport.config.js                        | 5 +++++
 extension/data/public/js/data.template.standard.model.js | 2 +-
 extension/data/public/js/main.js                         | 4 ++--
 extension/data/public/js/main_dev.js                     | 4 ++--
 4 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/extension/data/jsreport.config.js b/extension/data/jsreport.config.js
new file mode 100644
index 0000000000000000000000000000000000000000..8369b1b5045d6f3fa6ce7b86d8d5a34143f87107
--- /dev/null
+++ b/extension/data/jsreport.config.js
@@ -0,0 +1,5 @@
+﻿module.exports = {
+  "name": "data",
+  "main": "lib/data.js",
+  "dependencies": ["templates"]
+}
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
index 12b3091b91abe9b6d5e881cd312d278e93de5a5e..456a3a5500139bbb4e61995945f10dcb2ca3955b 100644
--- a/extension/data/public/js/data.template.standard.model.js
+++ b/extension/data/public/js/data.template.standard.model.js
@@ -11,7 +11,7 @@
                 self.items.unshift(empty);
 
                 if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }), { silent: true });
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
                 else 
                   self.set(empty, { silent: true });
                 
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 98642139ce1f2ba679003abb015a46a4df3bbbad..2d630f3e1923956b2be1732c75d55d6ab3f3f283 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -64,14 +64,14 @@
                 if (app.settings.playgroundMode) {
                     var view = new TemplatePlaygroundView();
                     view.setTemplateModel(context.template);
-                    context.extensionsRegion.show(view);
+                    context.extensionsRegion.show(view, "data");
                 } else {
                     var model = new TemplateStandardModel();
                     model.setTemplate(context.template);
                     
                     model.fetch({ success: function() {
                         var view = new TemplateStandardView({ model: model});
-                        context.extensionsRegion.show(view);     
+                        context.extensionsRegion.show(view, "data");     
                     }});
                 }
             });
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 98642139ce1f2ba679003abb015a46a4df3bbbad..2d630f3e1923956b2be1732c75d55d6ab3f3f283 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -64,14 +64,14 @@
                 if (app.settings.playgroundMode) {
                     var view = new TemplatePlaygroundView();
                     view.setTemplateModel(context.template);
-                    context.extensionsRegion.show(view);
+                    context.extensionsRegion.show(view, "data");
                 } else {
                     var model = new TemplateStandardModel();
                     model.setTemplate(context.template);
                     
                     model.fetch({ success: function() {
                         var view = new TemplateStandardView({ model: model});
-                        context.extensionsRegion.show(view);     
+                        context.extensionsRegion.show(view, "data");     
                     }});
                 }
             });

From c7a0586882814a1b16313cf0e70001e4c5304a75 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 23 Feb 2014 19:35:28 +0100
Subject: [PATCH] ui merge

---
 extension/data/public/js/main.js                   | 302 ++++++++++++++++++++-
 .../data/public/templates/data-list-toolbar.html   |   2 +-
 extension/data/public/templates/data-toolbar.html  |   2 +-
 3 files changed, 299 insertions(+), 7 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 2d630f3e1923956b2be1732c75d55d6ab3f3f283..7cb568155dbc7adb844c33377cbfdfbac4ca0713 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,300 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+        
+        onDomRefresh: function () {
+            
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+            
+             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+    });
+});
+
+
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+            
+            if (model.get("dataItem") == null)
+                model.set("dataItem", new $entity.DataItem());
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                    
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+
+            var self = this;
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("dataItemId", self.get("shortid"));
+            });
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
diff --git a/extension/data/public/templates/data-list-toolbar.html b/extension/data/public/templates/data-list-toolbar.html
index 1e45951598c9f6dfc8684f0225f0f6d18be54206..92123ebf75856568dc5d3c4da897e4276cdcfc55 100644
--- a/extension/data/public/templates/data-list-toolbar.html
+++ b/extension/data/public/templates/data-list-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header sub-header">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text">List of data items</p>
+        <p class="navbar-text"></p>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 
diff --git a/extension/data/public/templates/data-toolbar.html b/extension/data/public/templates/data-toolbar.html
index 167ede6b77bc64df21c3ec5b5453f423ecb6f98d..f9383ad7c86863536b1cb107d6b06075604293d1 100644
--- a/extension/data/public/templates/data-toolbar.html
+++ b/extension/data/public/templates/data-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header sub-header">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text" name="name">{{:name}}</p>
+        <p class="navbar-text"></p>
         <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
 </div>
\ No newline at end of file

From 5bd90bbd6cfe4905ea81d33af7a3342066970a69 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 10:25:42 +0100
Subject: [PATCH] before merge

---
 extension/data/public/js/main.js | 302 +--------------------------------------
 1 file changed, 5 insertions(+), 297 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 7cb568155dbc7adb844c33377cbfdfbac4ca0713..2d630f3e1923956b2be1732c75d55d6ab3f3f283 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,300 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            name: "data item name"
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-        
-        onDomRefresh: function () {
-            
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-            
-             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-    });
-});
-
-
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-            
-            if (model.get("dataItem") == null)
-                model.set("dataItem", new $entity.DataItem());
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                    
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-
-            var self = this;
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("dataItemId", self.get("shortid"));
-            });
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From d9c54341b0df4088d08f4b9d611ef31f13283abd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 11:27:50 +0100
Subject: [PATCH] after merge

---
 extension/data/public/js/main.js | 302 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 297 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 2d630f3e1923956b2be1732c75d55d6ab3f3f283..7cb568155dbc7adb844c33377cbfdfbac4ca0713 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,300 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+        
+        onDomRefresh: function () {
+            
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+            
+             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+    });
+});
+
+
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+            
+            if (model.get("dataItem") == null)
+                model.set("dataItem", new $entity.DataItem());
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                    
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+
+            var self = this;
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("dataItemId", self.get("shortid"));
+            });
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 1be5f1f06ece88aafc0a9240dc027e15f7745b34 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Feb 2014 12:52:47 +0100
Subject: [PATCH] add missing fonts

---
 extension/data/public/js/main.js | 302 +--------------------------------------
 1 file changed, 5 insertions(+), 297 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 7cb568155dbc7adb844c33377cbfdfbac4ca0713..2d630f3e1923956b2be1732c75d55d6ab3f3f283 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,300 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            name: "data item name"
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-        
-        onDomRefresh: function () {
-            
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-            
-             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-    });
-});
-
-
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-            
-            if (model.get("dataItem") == null)
-                model.set("dataItem", new $entity.DataItem());
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                    
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-
-            var self = this;
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("dataItemId", self.get("shortid"));
-            });
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 52c683802e7085e328cd920ed2dbe4c3a1eb6a82 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 27 Feb 2014 15:30:45 +0100
Subject: [PATCH] bug fixing

---
 extension/data/lib/data.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 2f2edf996667eeb6a77106b57bc773c881dba433..056dc3244153c53135389b4b08c16b84ac15d7c4 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -50,7 +50,7 @@ Data = function (reporter, definition) {
 
 Data.prototype.handleBeforeRender = function (request, response) {
     
-    if (!request.template.dataItemId && !(request.template.dataItem != null && request.template.dataItem.dataJson)) {
+    if (request.data || (!request.template.dataItemId && !(request.template.dataItem != null && request.template.dataItem.dataJson))) {
         logger.info("DateItem not defined for this template.");
         return;
     }

From 78e2264f864a42783eab5a290e1b1e644b9c7723 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 27 Feb 2014 19:06:28 +0100
Subject: [PATCH] copyrights

---
 extension/data/lib/data.js | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 056dc3244153c53135389b4b08c16b84ac15d7c4..f1e16f1221644d7909d02c21aefe2486b1259e2a 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -1,4 +1,8 @@
-﻿var Readable = require("stream").Readable,
+﻿/*! 
+ * Copyright(c) 2014 Jan Blaha 
+ */ 
+
+var Readable = require("stream").Readable,
     shortid = require("shortid"),
     winston = require("winston"),
     events = require("events"),

From 48c22957ed23acabc373c7969f7febaff3362771 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 1 Mar 2014 21:20:57 +0100
Subject: [PATCH] refactoring to get q promise more involved

---
 extension/data/lib/data.js | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index f1e16f1221644d7909d02c21aefe2486b1259e2a..b15bce6425d4bf11c1081c52a24aee597bf1610c 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -96,11 +96,9 @@ Data.prototype._beforeUpdateHandler = function(args, entity) {
      entity.modificationDate = new Date();
 };
 
-function createEntitySetDefinitions(entitySets, next) {
+function createEntitySetDefinitions(entitySets) {
     if (!this.reporter.playgroundMode) {
         entitySets["data"] = { type: $data.EntitySet, elementType: this.DataItemType };
     }
-
-    next();
 };
 

From f07ab678510dd01e274ed44ae840acef17b72717 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 2 Mar 2014 13:17:04 +0100
Subject: [PATCH] improving tests

---
 extension/data/lib/data.js      | 47 ++++++++++++++---------------------------
 extension/data/test/dataTest.js | 17 ++++++++++++++-
 2 files changed, 32 insertions(+), 32 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index b15bce6425d4bf11c1081c52a24aee597bf1610c..8ac246d337b34d7cc18ebd8ab0e3c9e70dde0215 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -1,35 +1,25 @@
 ﻿/*! 
  * Copyright(c) 2014 Jan Blaha 
+ *
+ * Inline Data plugin able to add some sample data to rendering process
  */ 
 
-var Readable = require("stream").Readable,
-    shortid = require("shortid"),
-    winston = require("winston"),
-    events = require("events"),
+var shortid = require("shortid"),
     util = require("util"),
     sformat = require("stringformat"),
-    async = require("async"),
     _ = require("underscore"),
     Q = require("q");
-    sformat = require("stringformat");
 
 
-var logger = winston.loggers.get('jsreport');
-
 module.exports = function (reporter, definition) {
     reporter[definition.name] = new Data(reporter, definition);
 };
 
 Data = function (reporter, definition) {
+    var self = this;
     this.reporter = reporter;
     this.definition = definition;
     
-    Object.defineProperty(this, "entitySet", {
-        get: function () {
-            return reporter.context.data;
-        }
-    });
-    
     this.DataItemType = $data.Class.define(reporter.extendGlobalTypeName("$entity.DataItem"), $data.Entity, null, {
         dataJson: { type: "string" },
         name: { type: "string" },
@@ -49,14 +39,17 @@ Data = function (reporter, definition) {
     this.DataItemType.addEventListener("beforeUpdate", Data.prototype._beforeUpdateHandler.bind(this));
     
     this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
-    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, createEntitySetDefinitions);
+    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, function(entitySets) {
+        if (!self.reporter.playgroundMode) 
+            entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType };
+    });
 };
 
 Data.prototype.handleBeforeRender = function (request, response) {
     
     if (request.data || (!request.template.dataItemId && !(request.template.dataItem != null && request.template.dataItem.dataJson))) {
-        logger.info("DateItem not defined for this template.");
-        return;
+        this.reporter.logger.info("DateItem not defined for this template.");
+        return Q();
     }
 
     var self = this;
@@ -65,9 +58,9 @@ Data.prototype.handleBeforeRender = function (request, response) {
         if (request.template.dataItem != null && request.template.dataItem != "")
             return Q(request.template.dataItem);
 
-        logger.info("Searching for before dataItem to apply");
+        self.reporter.logger.info("Searching for before dataItem to apply");
 
-        return self.entitySet.single(function(d) { return d.shortid == this.id; }, { id: request.template.dataItemId } );
+        return request.context.data.single(function(d) { return d.shortid == this.id; }, { id: request.template.dataItemId } );
     };
 
     return FindDataItem().then(function(di) {
@@ -76,12 +69,11 @@ Data.prototype.handleBeforeRender = function (request, response) {
     });
 };
 
-Data.prototype.create = function (dataItem) {
-    logger.info(sformat("Creating dataItem {0}.", dataItem.name));
+Data.prototype.create = function (context, dataItem) {
     var ent = new this.DataItemType(dataItem);
-    this.entitySet.add(ent);
+    context.data.add(ent);
     
-    return this.entitySet.saveChanges().then(function() { return Q(ent); });
+    return context.saveChanges().then(function() { return Q(ent); });
 };
 
 Data.prototype._beforeCreateHandler = function(args, entity) {
@@ -94,11 +86,4 @@ Data.prototype._beforeCreateHandler = function(args, entity) {
 
 Data.prototype._beforeUpdateHandler = function(args, entity) {
      entity.modificationDate = new Date();
-};
-
-function createEntitySetDefinitions(entitySets) {
-    if (!this.reporter.playgroundMode) {
-        entitySets["data"] = { type: $data.EntitySet, elementType: this.DataItemType };
-    }
-};
-
+};
\ No newline at end of file
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 4c9c174ad775b70ac1e4b201357ff4ae1ad57c1c..06d7b24eabcb1d4a55ba3cf8abd3cc43ecb9fe09 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -11,11 +11,12 @@ describeReporting(["data"], function (reporter) {
                 dataJson: JSON.stringify({ a: 'xx' }) + "",
             };
 
-            reporter.data.create(dataItem).then(function(data) {
+            reporter.data.create(reporter.context, dataItem).then(function(data) {
                 var request = {
                     reporter: reporter,
                     template: { content: "html", dataItemId: data.shortid },
                     options: { recipe: "html" },
+                    context: reporter.context
                 };
 
                 reporter.data.handleBeforeRender(request, {}).then(function() {
@@ -31,6 +32,7 @@ describeReporting(["data"], function (reporter) {
                 reporter: reporter,
                 template: { content: "html", dataItemId: "AAAAAAAAAAAAAAAAAAAAAAAA" },
                 options: { recipe: "html" },
+                context: reporter.context
             };
 
             reporter.data.handleBeforeRender(request, {}).fail(function (err) {
@@ -38,6 +40,19 @@ describeReporting(["data"], function (reporter) {
                 done();
             });
         });
+        
+        it('should ignore extension when no inline data specified', function(done) {
+            var request = {
+                reporter: reporter,
+                template: { content: "html", dataItemId: null },
+                options: { recipe: "html" },
+                context: reporter.context
+            };
+
+            reporter.data.handleBeforeRender(request, {}).then(function () {
+                done();
+            });
+        });
 
     });
 });

From a8a5855721644d9c8ffe282a167c490604cdb56c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 12:17:24 +0100
Subject: [PATCH] unit tests

---
 extension/data/lib/data.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 8ac246d337b34d7cc18ebd8ab0e3c9e70dde0215..544c0d92081b6f09cdb1bca083a0d66c49ec4120 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -38,8 +38,8 @@ Data = function (reporter, definition) {
     this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
     this.DataItemType.addEventListener("beforeUpdate", Data.prototype._beforeUpdateHandler.bind(this));
     
-    this.reporter.extensionsManager.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
-    this.reporter.extensionsManager.entitySetRegistrationListners.add(definition.name, this, function(entitySets) {
+    this.reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
+    this.reporter.entitySetRegistrationListners.add(definition.name, this, function(entitySets) {
         if (!self.reporter.playgroundMode) 
             entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType };
     });

From 2468149ad3e484c300f8bfe4eadce2b6e240439b Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 13:12:00 +0100
Subject: [PATCH] ui merge

---
 extension/data/public/templates/data-list-toolbar.html            | 3 +--
 .../data/public/templates/data-template-extension-playground.html | 4 ++--
 .../data/public/templates/data-template-extension-standard.html   | 8 ++++----
 extension/data/public/templates/data-toolbar.html                 | 3 +--
 4 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/extension/data/public/templates/data-list-toolbar.html b/extension/data/public/templates/data-list-toolbar.html
index 92123ebf75856568dc5d3c4da897e4276cdcfc55..ff4dbefd3233c79002b73749195df391ff541b86 100644
--- a/extension/data/public/templates/data-list-toolbar.html
+++ b/extension/data/public/templates/data-list-toolbar.html
@@ -1,6 +1,5 @@
-﻿<div class="navbar-header sub-header">
+﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text"></p>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 
diff --git a/extension/data/public/templates/data-template-extension-playground.html b/extension/data/public/templates/data-template-extension-playground.html
index e57ae3ef2932475799e78590dbe966b8b5be579f..f410487d791e5cdbc48bdfe4623ff1e360c29f47 100644
--- a/extension/data/public/templates/data-template-extension-playground.html
+++ b/extension/data/public/templates/data-template-extension-playground.html
@@ -1,4 +1,4 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-sm glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 <div class="expandable-body properties" style="display: none">
-    <button class="btn btn-sm btn-primary" id="dataItemCommand">Data Upload</button>
+    <button class="btn btn-sm btn-success" id="dataItemCommand">Data Upload</button>
 </div>
diff --git a/extension/data/public/templates/data-template-extension-standard.html b/extension/data/public/templates/data-template-extension-standard.html
index 365ffc832938bb88d7c5a61e2c5875b1846139ef..07cf1d2ba38c765e54a4b1d967cbd18514b08247 100644
--- a/extension/data/public/templates/data-template-extension-standard.html
+++ b/extension/data/public/templates/data-template-extension-standard.html
@@ -1,13 +1,13 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
+﻿<a class="expandable-header"><i class="glyphicon glyphicon-sm glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 
 <div class="expandable-body properties" style="display: none">
     {{if ~getItemsLength() > 1}}
     <div class="btn-group" data-binding="shortid">
-        <button class="btn btn-primary btn-sm dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
-        <button class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown">
+        <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+        <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
             <span class="caret"></span>
         </button>
-        <ul class="dropdown-menu" role="menu">
+        <ul class="dropdown-menu pull-right" role="menu">
             {{for ~getItems()}}
             <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
             {{/for}}
diff --git a/extension/data/public/templates/data-toolbar.html b/extension/data/public/templates/data-toolbar.html
index f9383ad7c86863536b1cb107d6b06075604293d1..83f249f8bacf9068761a9c9467a4ee45e1048d20 100644
--- a/extension/data/public/templates/data-toolbar.html
+++ b/extension/data/public/templates/data-toolbar.html
@@ -1,6 +1,5 @@
-﻿<div class="navbar-header sub-header">
+﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
-        <p class="navbar-text"></p>
         <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
 </div>
\ No newline at end of file

From 90fe59f928ee796f8d5abec9de3f4df857055073 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 7 Mar 2014 13:27:30 +0100
Subject: [PATCH] fix package.json

---
 extension/data/public/js/main.js | 302 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 297 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 2d630f3e1923956b2be1732c75d55d6ab3f3f283..7cb568155dbc7adb844c33377cbfdfbac4ca0713 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,300 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+        
+        onDomRefresh: function () {
+            
+            var top = $("#contentWrap").position().top;
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+            
+             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+    });
+});
+
+
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+            
+            if (model.get("dataItem") == null)
+                model.set("dataItem", new $entity.DataItem());
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                    
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+
+            var self = this;
+            this.listenTo(templateModel, "api-overrides", function(addProperty) {
+                addProperty("dataItemId", self.get("shortid"));
+            });
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 32d13d407ada7a1af0cbb7f0221587f2d26b57d7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 8 Mar 2014 16:56:31 +0100
Subject: [PATCH] finishing standalone extension architecture

---
 extension/data/public/js/main.js | 302 +--------------------------------------
 extension/data/test/dataTest.js  |   3 +-
 2 files changed, 7 insertions(+), 298 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 7cb568155dbc7adb844c33377cbfdfbac4ca0713..2d630f3e1923956b2be1732c75d55d6ab3f3f283 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,300 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            name: "data item name"
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-        
-        onDomRefresh: function () {
-            
-            var top = $("#contentWrap").position().top;
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-            
-             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-    });
-});
-
-
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-            
-            if (model.get("dataItem") == null)
-                model.set("dataItem", new $entity.DataItem());
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                    
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-
-            var self = this;
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("dataItemId", self.get("shortid"));
-            });
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 06d7b24eabcb1d4a55ba3cf8abd3cc43ecb9fe09..0340c1ad408ebb5d385dfd8e0c0fd89f9b7e569e 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -1,7 +1,8 @@
 ﻿var assert = require("assert"),
+    path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 
-describeReporting(["data"], function (reporter) {
+describeReporting(path.join(__dirname, "../../"), ["data"], function (reporter) {
     
     describe('data', function() {
 

From cbe0fd9a3fff1fe2d2e8d888b1fbcc76322d7532 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 9 Mar 2014 15:06:05 +0100
Subject: [PATCH] validate leaving the page for unsaved changes

---
 extension/data/public/js/data.detail.view.js | 23 +++++++++++++----------
 1 file changed, 13 insertions(+), 10 deletions(-)

diff --git a/extension/data/public/js/data.detail.view.js b/extension/data/public/js/data.detail.view.js
index 59683c485ce56ba784803f41dea0b5f514f62e71..5ad65643b97e09d636a069c715e0f6424d5ca4e0 100644
--- a/extension/data/public/js/data.detail.view.js
+++ b/extension/data/public/js/data.detail.view.js
@@ -2,29 +2,32 @@
     return ViewBase.extend({
         template: "data-detail",
 
-        initialize: function () {
+        initialize: function() {
             var self = this;
             this.listenTo(this.model, "sync", self.render);
         },
-        
-        onDomRefresh: function () {
-            
+
+        onDomRefresh: function() {
+
             var top = $("#contentWrap").position().top;
-            
+
             this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
                 mode: "javascript",
                 height: "350px",
                 lineNumbers: true,
                 lineWrapping: true
             });
-            
-             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
+
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+
             $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
             $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
 
             this.contentCodeMirror.refresh();
         },
-    });
-});
 
+        validateLeaving: function() {
+            return !this.model.hasChanged();
+        },
+    });
+});
\ No newline at end of file

From 06b5c573d0584cdf31a62eea6f895db3f67d038b Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 11 Mar 2014 09:34:49 +0100
Subject: [PATCH] bug fixing

---
 extension/data/public/js/data.template.playground.view.js |  4 ++--
 extension/data/public/js/data.template.standard.model.js  | 12 +++++-------
 extension/data/public/js/data.template.standard.view.js   |  4 ++++
 extension/data/public/js/main.js                          |  3 +--
 extension/data/public/js/main_dev.js                      |  3 +--
 5 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/extension/data/public/js/data.template.playground.view.js b/extension/data/public/js/data.template.playground.view.js
index 98409aca0f33e31692a434372e80517f75484a64..5d6d93432a13a97a8e4b0a9c6dd9fdfe48369c1f 100644
--- a/extension/data/public/js/data.template.playground.view.js
+++ b/extension/data/public/js/data.template.playground.view.js
@@ -17,9 +17,9 @@
         
         setTemplateModel: function (model) {
             this.templateModel = model;
-            
+
             if (model.get("dataItem") == null)
-                model.set("dataItem", new $entity.DataItem());
+                model.attributes["dataItem"] = new $entity.DataItem();
         },
         
 
diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
index 456a3a5500139bbb4e61995945f10dcb2ca3955b..0aec0c269a4cc48940011c9602a3baca6a6f8bac 100644
--- a/extension/data/public/js/data.template.standard.model.js
+++ b/extension/data/public/js/data.template.standard.model.js
@@ -15,19 +15,17 @@
                 else 
                   self.set(empty, { silent: true });
                 
-                    
-                
                 return options.success();
             });
         },
 
         setTemplate: function (templateModel) {
             this.templateModel = templateModel;
-
-            var self = this;
-            this.listenTo(templateModel, "api-overrides", function(addProperty) {
-                addProperty("dataItemId", self.get("shortid"));
-            });
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
         },
 
         initialize: function () {
diff --git a/extension/data/public/js/data.template.standard.view.js b/extension/data/public/js/data.template.standard.view.js
index 6f090000e19b267225e9c837e26101104259c818..bf4a469ab3791c9b123243a31c100c8cbfb949de 100644
--- a/extension/data/public/js/data.template.standard.view.js
+++ b/extension/data/public/js/data.template.standard.view.js
@@ -18,5 +18,9 @@
         getItemsLength: function () {
             return this.model.items.length;
         },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 2d630f3e1923956b2be1732c75d55d6ab3f3f283..723f197f1537b01d5a2c6720f7a82252ddd25526 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -60,7 +60,6 @@
             }
 
             app.on("template-extensions-render", function(context) {
-                
                 if (app.settings.playgroundMode) {
                     var view = new TemplatePlaygroundView();
                     view.setTemplateModel(context.template);
@@ -71,7 +70,7 @@
                     
                     model.fetch({ success: function() {
                         var view = new TemplateStandardView({ model: model});
-                        context.extensionsRegion.show(view, "data");     
+                        context.extensionsRegion.show(view, "data");   
                     }});
                 }
             });
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 2d630f3e1923956b2be1732c75d55d6ab3f3f283..723f197f1537b01d5a2c6720f7a82252ddd25526 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -60,7 +60,6 @@
             }
 
             app.on("template-extensions-render", function(context) {
-                
                 if (app.settings.playgroundMode) {
                     var view = new TemplatePlaygroundView();
                     view.setTemplateModel(context.template);
@@ -71,7 +70,7 @@
                     
                     model.fetch({ success: function() {
                         var view = new TemplateStandardView({ model: model});
-                        context.extensionsRegion.show(view, "data");     
+                        context.extensionsRegion.show(view, "data");   
                     }});
                 }
             });

From 511c4819c5144ff09e654d4fa8490fe5538dd6dc Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Mar 2014 16:09:46 +0100
Subject: [PATCH] embeddable feature

---
 extension/data/public/js/main.js | 306 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 301 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 723f197f1537b01d5a2c6720f7a82252ddd25526..9e2f002748dee2bfbf4ec6cbef3b408c67275c9d 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,304 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function() {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChanged();
+        },
+    });
+});
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("dataItem") == null)
+                model.attributes["dataItem"] = new $entity.DataItem();
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 78cb903fed286329612d9b20e8972234265cfb09 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 13 Mar 2014 14:54:14 +0100
Subject: [PATCH] gists extension, moving certificates

---
 extension/data/public/js/main.js | 306 +--------------------------------------
 1 file changed, 5 insertions(+), 301 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 9e2f002748dee2bfbf4ec6cbef3b408c67275c9d..723f197f1537b01d5a2c6720f7a82252ddd25526 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,304 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            name: "data item name"
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function() {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChanged();
-        },
-    });
-});
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("dataItem") == null)
-                model.attributes["dataItem"] = new $entity.DataItem();
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 45675e9cdfc005410a964f0227362a4ff57995f5 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 14 Mar 2014 12:56:52 +0100
Subject: [PATCH] fixing bugs

---
 extension/data/public/js/data.detail.view.js | 2 +-
 extension/data/public/js/main.js             | 2 +-
 extension/data/public/js/main_dev.js         | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/extension/data/public/js/data.detail.view.js b/extension/data/public/js/data.detail.view.js
index 5ad65643b97e09d636a069c715e0f6424d5ca4e0..f746e5c7d65797798b8cf733485c3d7b1f64bde2 100644
--- a/extension/data/public/js/data.detail.view.js
+++ b/extension/data/public/js/data.detail.view.js
@@ -27,7 +27,7 @@
         },
 
         validateLeaving: function() {
-            return !this.model.hasChanged();
+            return !this.model.hasChangesSyncLastSync();
         },
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 723f197f1537b01d5a2c6720f7a82252ddd25526..b3484e94844452fad440c71c6c3965437bad31a6 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -55,7 +55,7 @@
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='/#/extension/data/detail'createDataLink'>Create Data</a></li>";
+                    context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
                 });
             }
 
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 723f197f1537b01d5a2c6720f7a82252ddd25526..b3484e94844452fad440c71c6c3965437bad31a6 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -55,7 +55,7 @@
                 });
 
                 app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='/#/extension/data/detail'createDataLink'>Create Data</a></li>";
+                    context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
                 });
             }
 

From 7d96b6e81ad252c98acb5a4d1b873663ad06ebbd Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 18 Mar 2014 21:17:10 +0100
Subject: [PATCH] better compiling js files for production

---
 extension/data/public/js/main.js | 306 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 301 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index b3484e94844452fad440c71c6c3965437bad31a6..834a5d77fb44ef336fe222c157ae48d79046b908 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,304 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function() {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("dataItem") == null)
+                model.attributes["dataItem"] = new $entity.DataItem();
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 671545e726ad7779b61370a64c318fad9d529069 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 19 Mar 2014 23:06:55 +0100
Subject: [PATCH] killing rendering child process when the work is done
 changing multitenant mongo architecture - collection
 prefixing

---
 extension/data/public/js/main.js | 306 +--------------------------------------
 1 file changed, 5 insertions(+), 301 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 834a5d77fb44ef336fe222c157ae48d79046b908..b3484e94844452fad440c71c6c3965437bad31a6 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,304 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            name: "data item name"
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function() {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("dataItem") == null)
-                model.attributes["dataItem"] = new $entity.DataItem();
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 3adcd1d4a89963bad937a1510d21f698e10f348f Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 27 Mar 2014 11:12:23 +0100
Subject: [PATCH] images base64

---
 extension/data/public/js/data.template.playground.dialog.js | 4 ++++
 extension/data/public/templates/data-dialog.html            | 4 ++--
 2 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/extension/data/public/js/data.template.playground.dialog.js b/extension/data/public/js/data.template.playground.dialog.js
index 0f0690321aae5a0fed206f06007e89d224012bb8..4c91e2a465ad54fabb861e2b3cca30d749b8fb09 100644
--- a/extension/data/public/js/data.template.playground.dialog.js
+++ b/extension/data/public/js/data.template.playground.dialog.js
@@ -18,6 +18,10 @@
                 lineNumbers: true,
             });
             codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            
+            this.contentCodeMirror.refresh();
         },
         
         save: function () {
diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
index f31ddd180a1a553644184bb3e110aac0c7a75ae8..5e2aae3a5abc4e2ee5c5e4cbbe75ed30b489d9c0 100644
--- a/extension/data/public/templates/data-dialog.html
+++ b/extension/data/public/templates/data-dialog.html
@@ -4,9 +4,9 @@
             <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
             <h4 class="modal-title">Inline data source</h4>
         </div>
-        <div class="modal-body">
+        <div class="modal-body fs">
             {{if ~getMode()}}
-               <textarea id="contentArea">{{:dataJson}}</textarea>
+               <textarea id="contentArea" class="full-content-without-menu">{{:dataJson}}</textarea>
             {{else}}
             {{/if}}
          

From a2acc4640eb73216bbae6aa401a88432c1fbab64 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 28 Mar 2014 16:34:09 +0100
Subject: [PATCH] nedb support and cluster

---
 extension/data/public/js/main.js | 310 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 305 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index b3484e94844452fad440c71c6c3965437bad31a6..993a8bd5f924df271d3f54af18ce9b97ac15af09 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,308 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function() {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            
+            this.contentCodeMirror.refresh();
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("dataItem") == null)
+                model.attributes["dataItem"] = new $entity.DataItem();
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 8f37e5cd1e0e90b483b3319014b50a68d87b4370 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 13:35:33 +0200
Subject: [PATCH] nedb support

---
 extension/data/public/js/main.js | 310 +--------------------------------------
 1 file changed, 5 insertions(+), 305 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 993a8bd5f924df271d3f54af18ce9b97ac15af09..b3484e94844452fad440c71c6c3965437bad31a6 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,308 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            name: "data item name"
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function() {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            
-            this.contentCodeMirror.refresh();
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("dataItem") == null)
-                model.attributes["dataItem"] = new $entity.DataItem();
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From fb40a24f481b540a249f14f7c3178ffff762bcc4 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 16:09:56 +0200
Subject: [PATCH] fixing fonts link to local, nedb improvments

---
 extension/data/lib/data.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 544c0d92081b6f09cdb1bca083a0d66c49ec4120..786838acff88f5da9f7b236a681b6f630d7090ee 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -41,7 +41,7 @@ Data = function (reporter, definition) {
     this.reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
     this.reporter.entitySetRegistrationListners.add(definition.name, this, function(entitySets) {
         if (!self.reporter.playgroundMode) 
-            entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType };
+            entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType, tableOptions: { humanReadableKeys: ["name", "shortid"] }  };
     });
 };
 

From 1e5b9bec60279914a0785a7e6330226fbb478010 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 20:15:37 +0200
Subject: [PATCH] hotkeys for saving

---
 extension/data/lib/data.js                             |  2 +-
 extension/data/public/js/data.toolbar.view.js          | 16 ++++++++++++++++
 extension/data/public/templates/data-list-toolbar.html |  2 +-
 3 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 786838acff88f5da9f7b236a681b6f630d7090ee..c4226e75b0dc3030146d4338dadc62af0f138d69 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -41,7 +41,7 @@ Data = function (reporter, definition) {
     this.reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
     this.reporter.entitySetRegistrationListners.add(definition.name, this, function(entitySets) {
         if (!self.reporter.playgroundMode) 
-            entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType, tableOptions: { humanReadableKeys: ["name", "shortid"] }  };
+            entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
     });
 };
 
diff --git a/extension/data/public/js/data.toolbar.view.js b/extension/data/public/js/data.toolbar.view.js
index f83ac45e89af410b232e8117b37bcd2c96b278d0..d3d4b61fa09df97489ef8055bfffa63276ea221e 100644
--- a/extension/data/public/js/data.toolbar.view.js
+++ b/extension/data/public/js/data.toolbar.view.js
@@ -3,6 +3,10 @@
         return LayoutBase.extend({
             template: "data-toolbar",
 
+            initialize: function() {
+                $(document).on('keydown', this.hotkey.bind(this));
+            },
+
             events: {
                 "click #saveCommand": "save",
             },
@@ -15,5 +19,17 @@
                     }
                 });
             },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+
+            onClose: function() {
+                $(document).off("keydown", this.hotkey);
+            }
         });
     });
\ No newline at end of file
diff --git a/extension/data/public/templates/data-list-toolbar.html b/extension/data/public/templates/data-list-toolbar.html
index ff4dbefd3233c79002b73749195df391ff541b86..6063cf3eabc6799f3e602eb47de0cb6b289093bc 100644
--- a/extension/data/public/templates/data-list-toolbar.html
+++ b/extension/data/public/templates/data-list-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
+        <li><a href="/#/extension/data/detail"><i class="glyphicon glyphicon-plus"></i>New</a></li>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
-
 </div>
\ No newline at end of file

From 5c304966298895d21c2c0249df859c9984496a69 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 30 Mar 2014 20:40:28 +0200
Subject: [PATCH] added mkdirp to dependencies

---
 extension/data/public/js/main.js | 326 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 321 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index b3484e94844452fad440c71c6c3965437bad31a6..1e08abaf368e5b436887b2552e4886f50d95a3d0 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,324 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        defaults: {
+            name: "data item name"
+        },
+
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
+    function ($, app, CodeMirror, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function() {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+                lineWrapping: true
+            });
+
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
+
+            this.contentCodeMirror.refresh();
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+        
+        events: {
+            "click #saveCommand": "save",
+        },
+        
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+        
+        onDomRefresh: function () {
+            
+            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
+                mode: "javascript",
+                height: "350px",
+                lineNumbers: true,
+            });
+            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
+            
+            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
+            
+            this.contentCodeMirror.refresh();
+        },
+        
+        save: function () {
+            var self = this;
+            this.model.save({ success: function() {
+                self.trigger("dialog-close");
+            }});
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("dataItem") == null)
+                model.attributes["dataItem"] = new $entity.DataItem();
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            initialize: function() {
+                $(document).on('keydown', this.hotkey.bind(this));
+            },
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+
+            onClose: function() {
+                $(document).off("keydown", this.hotkey);
+            }
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 7720df20c96f6821f3a59f2b2dd1db8debff2b46 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 21 Apr 2014 09:24:58 +0200
Subject: [PATCH] support for page orientation and page size in phantom

---
 extension/data/public/js/data.model.js             |  3 ++-
 .../public/js/data.template.playground.model.js    |  5 ++--
 extension/data/public/js/data.toolbar.view.js      | 22 ++++++++++++++++
 extension/data/public/js/main.js                   | 30 +++++++++++++++++++---
 4 files changed, 54 insertions(+), 6 deletions(-)

diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index 4deee150595c493c3f78232b958ab2d500eb3b80..65754efee14dd25a30aeaf6d77969468edeff29d 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -8,7 +8,8 @@
         },   
         
         defaults: {
-            name: "data item name"
+            dataJson: app.settings.firstRun ? "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}"
+                                               : ""
         },
 
         _initialize: function() {
diff --git a/extension/data/public/js/data.template.playground.model.js b/extension/data/public/js/data.template.playground.model.js
index bbc1af09cfe42654af60d8c57238e2c8b19fd2fb..df8541936ac5fc4c61d125fdec0e584be12375e2 100644
--- a/extension/data/public/js/data.template.playground.model.js
+++ b/extension/data/public/js/data.template.playground.model.js
@@ -1,10 +1,11 @@
 ﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
    
     return ModelBase.extend({
-
         setTemplateModel: function (templateModel) {
             this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
+
+            var defaultJson = "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}";
+            this.set("dataJson", templateModel.get("dataItem").dataJson || defaultJson);
         },
         
         save: function (options) {
diff --git a/extension/data/public/js/data.toolbar.view.js b/extension/data/public/js/data.toolbar.view.js
index d3d4b61fa09df97489ef8055bfffa63276ea221e..48327dd1dfe29a94e2f4cb0ee26a0c47b4dd2488 100644
--- a/extension/data/public/js/data.toolbar.view.js
+++ b/extension/data/public/js/data.toolbar.view.js
@@ -12,6 +12,9 @@
             },
 
             save: function() {
+                if (!this.validate())
+                    return;
+
                 var self = this;
                 this.model.save({}, {
                     success: function() {
@@ -28,6 +31,25 @@
                 }
             },
 
+            onValidate: function() {
+                var res = [];
+
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+
+                try {
+                    var json = JSON.parse(this.model.get("dataJson"));
+                } catch(e) {
+                    res.push({
+                        message: "Data must be valid JSON. " + e.toString()
+                    });
+                }
+
+                return res;
+            },
+
             onClose: function() {
                 $(document).off("keydown", this.hotkey);
             }
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 1e08abaf368e5b436887b2552e4886f50d95a3d0..74bd231a604e325508881979046afb7393bfe28c 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -9,7 +9,8 @@ define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
         },   
         
         defaults: {
-            name: "data item name"
+            dataJson: app.settings.firstRun ? "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}"
+                                               : ""
         },
 
         _initialize: function() {
@@ -161,10 +162,11 @@ define('data.template.playground.dialog',["marionette", "app", "codemirror", "co
 define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
    
     return ModelBase.extend({
-
         setTemplateModel: function (templateModel) {
             this.templateModel = templateModel;
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
+
+            var defaultJson = "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}";
+            this.set("dataJson", templateModel.get("dataItem").dataJson || defaultJson);
         },
         
         save: function (options) {
@@ -254,6 +256,9 @@ define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
             },
 
             save: function() {
+                if (!this.validate())
+                    return;
+
                 var self = this;
                 this.model.save({}, {
                     success: function() {
@@ -270,6 +275,25 @@ define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
                 }
             },
 
+            onValidate: function() {
+                var res = [];
+
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+
+                try {
+                    var json = JSON.parse(this.model.get("dataJson"));
+                } catch(e) {
+                    res.push({
+                        message: "Data must be valid JSON. " + e.toString()
+                    });
+                }
+
+                return res;
+            },
+
             onClose: function() {
                 $(document).off("keydown", this.hotkey);
             }

From 6e7349912b9189c53f0e8c754ed4e212eb9ee121 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 25 Apr 2014 11:22:51 +0200
Subject: [PATCH] using node client session instead of express

---
 extension/data/public/js/main.js | 350 +--------------------------------------
 1 file changed, 5 insertions(+), 345 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 74bd231a604e325508881979046afb7393bfe28c..b3484e94844452fad440c71c6c3965437bad31a6 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,348 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        defaults: {
-            dataJson: app.settings.firstRun ? "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}"
-                                               : ""
-        },
-
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function() {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
-            });
-
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('data.template.playground.dialog',["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-        
-        events: {
-            "click #saveCommand": "save",
-        },
-        
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-            });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            
-            this.contentCodeMirror.refresh();
-        },
-        
-        save: function () {
-            var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-
-            var defaultJson = "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}";
-            this.set("dataJson", templateModel.get("dataItem").dataJson || defaultJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("dataItem") == null)
-                model.attributes["dataItem"] = new $entity.DataItem();
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            initialize: function() {
-                $(document).on('keydown', this.hotkey.bind(this));
-            },
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                if (!this.validate())
-                    return;
-
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-
-            hotkey: function(e) {
-                if (e.ctrlKey && e.which === 83) {
-                    this.save();
-                    e.preventDefault();
-                    return false;
-                }
-            },
-
-            onValidate: function() {
-                var res = [];
-
-                if (this.model.get("name") == null || this.model.get("name") == "")
-                    res.push({
-                        message: "Name cannot be empty"
-                    });
-
-                try {
-                    var json = JSON.parse(this.model.get("dataJson"));
-                } catch(e) {
-                    res.push({
-                        message: "Data must be valid JSON. " + e.toString()
-                    });
-                }
-
-                return res;
-            },
-
-            onClose: function() {
-                $(document).off("keydown", this.hotkey);
-            }
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 6c289c773d58de4341c5be83806ae51ceaf4bbab Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 8 May 2014 14:38:51 +0200
Subject: [PATCH] replace code mirror with ace

---
 extension/data/lib/data.js                         |  9 ++++-
 extension/data/public/js/data.detail.view.js       | 22 ++++++------
 extension/data/public/js/data.list.toolbar.view.js |  4 +--
 .../public/js/data.template.playground.dialog.js   | 39 +++++++++++-----------
 extension/data/public/templates/data-detail.html   |  2 +-
 extension/data/public/templates/data-dialog.html   |  2 +-
 .../data-template-extension-playground.html        |  2 +-
 7 files changed, 43 insertions(+), 37 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index c4226e75b0dc3030146d4338dadc62af0f138d69..ea2cb20a2f92bc8e55438f4aacd2dcfbaf6099e9 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -65,7 +65,14 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
     return FindDataItem().then(function(di) {
         di = di.dataJson || di;
-        request.data = JSON.parse(di);
+
+        try {
+            request.data = JSON.parse(di);
+        } catch(e) {
+            self.reporter.logger.warn("Invalid json in data item: " + e.message);
+            e.weak = true;
+            return Q.reject(e);
+        }
     });
 };
 
diff --git a/extension/data/public/js/data.detail.view.js b/extension/data/public/js/data.detail.view.js
index f746e5c7d65797798b8cf733485c3d7b1f64bde2..d82de31137a473402e9d6a62d9248960151a5e12 100644
--- a/extension/data/public/js/data.detail.view.js
+++ b/extension/data/public/js/data.detail.view.js
@@ -1,4 +1,4 @@
-﻿define(["marionette", "codemirror", "core/view.base", "core/codeMirrorBinder"], function(Marionette, CodeMirror, ViewBase, codeMirrorBinder) {
+﻿define(["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
     return ViewBase.extend({
         template: "data-detail",
 
@@ -11,19 +11,17 @@
 
             var top = $("#contentWrap").position().top;
 
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
-                lineWrapping: true
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/json");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
             });
+                
+            aceBinder(this.model, "dataJson", this.contentEditor);
 
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
-            $(this.contentCodeMirror.getWrapperElement()).css("margin-top", top);
-
-            this.contentCodeMirror.refresh();
+            $("#contentArea").css("margin-top", top);
         },
 
         validateLeaving: function() {
diff --git a/extension/data/public/js/data.list.toolbar.view.js b/extension/data/public/js/data.list.toolbar.view.js
index 7b4b94bd6d7dd869c20b62bb6b95bdaa6c9b461e..82194ca208a82851aec2faa5faebc6ca627da03a 100644
--- a/extension/data/public/js/data.list.toolbar.view.js
+++ b/extension/data/public/js/data.list.toolbar.view.js
@@ -1,5 +1,5 @@
-﻿define(["jquery", "app", "codemirror", "core/utils", "core/view.base", "underscore"],
-    function ($, app, CodeMirror, Utils, LayoutBase) {
+﻿define(["jquery", "app", "core/utils", "core/view.base", "underscore"],
+    function ($, app, Utils, LayoutBase) {
         return LayoutBase.extend({
             template: "data-list-toolbar",
             
diff --git a/extension/data/public/js/data.template.playground.dialog.js b/extension/data/public/js/data.template.playground.dialog.js
index 4c91e2a465ad54fabb861e2b3cca30d749b8fb09..16a4c077faad111de9930ac051de09756ed53516 100644
--- a/extension/data/public/js/data.template.playground.dialog.js
+++ b/extension/data/public/js/data.template.playground.dialog.js
@@ -1,34 +1,35 @@
-﻿define(["marionette", "app", "codemirror", "core/view.base", "core/codeMirrorBinder"], function (Marionette, app, Codemirror, ViewBase, codeMirrorBinder) {
+﻿define(["marionette", "app", "core/view.base", "core/aceBinder"], function(Marionette, app, ViewBase, aceBinder) {
     return ViewBase.extend({
         template: "data-dialog",
-        
+
         events: {
             "click #saveCommand": "save",
         },
-        
+
         initialize: function() {
             _.bindAll(this, "save");
         },
-        
-        onDomRefresh: function () {
-            
-            this.contentCodeMirror = CodeMirror.fromTextArea(this.$el.find("#contentArea")[0], {
-                mode: "javascript",
-                height: "350px",
-                lineNumbers: true,
+
+        onDomRefresh: function() {
+
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/json");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
             });
-            codeMirrorBinder(this.model, "dataJson", this.contentCodeMirror);
-            
-            $(this.contentCodeMirror.getWrapperElement()).addClass(this.$el.find("#contentArea").attr('class'));
             
-            this.contentCodeMirror.refresh();
+            aceBinder(this.model, "dataJson", this.contentEditor);
         },
-        
-        save: function () {
+
+        save: function() {
             var self = this;
-            this.model.save({ success: function() {
-                self.trigger("dialog-close");
-            }});
+            this.model.save({
+                success: function() {
+                    self.trigger("dialog-close");
+                }
+            });
         }
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/templates/data-detail.html b/extension/data/public/templates/data-detail.html
index 12fa9f4c95f9ccb3c1d2348b1b101eb7dc505ddd..a430b527e0d397d08960224136d81a2161d515d5 100644
--- a/extension/data/public/templates/data-detail.html
+++ b/extension/data/public/templates/data-detail.html
@@ -3,5 +3,5 @@
 </div>
 
 <div id="contentWrap">
-    <textarea id="contentArea" class="full-content">{{:dataJson}}</textarea>
+    <div id="contentArea" class="full-content">{{:dataJson}}</div>
 </div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
index 5e2aae3a5abc4e2ee5c5e4cbbe75ed30b489d9c0..a7400bbf100bf6aa2ac1794fd56c89f5015f5142 100644
--- a/extension/data/public/templates/data-dialog.html
+++ b/extension/data/public/templates/data-dialog.html
@@ -6,7 +6,7 @@
         </div>
         <div class="modal-body fs">
             {{if ~getMode()}}
-               <textarea id="contentArea" class="full-content-without-menu">{{:dataJson}}</textarea>
+               <div id="contentArea" class="full-content-without-menu">{{:dataJson}}</div>
             {{else}}
             {{/if}}
          
diff --git a/extension/data/public/templates/data-template-extension-playground.html b/extension/data/public/templates/data-template-extension-playground.html
index f410487d791e5cdbc48bdfe4623ff1e360c29f47..3c0fd728b989afde7ec7fb802351a34277e03722 100644
--- a/extension/data/public/templates/data-template-extension-playground.html
+++ b/extension/data/public/templates/data-template-extension-playground.html
@@ -1,4 +1,4 @@
 ﻿<a class="expandable-header"><i class="glyphicon glyphicon-sm glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
 <div class="expandable-body properties" style="display: none">
-    <button class="btn btn-sm btn-success" id="dataItemCommand">Data Upload</button>
+    <button class="btn btn-xs btn-success" id="dataItemCommand">Data Upload</button>
 </div>

From f4b7b2200a95d0301d9c742a744780190c71c3a7 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 9 May 2014 23:22:48 +0200
Subject: [PATCH] samples, examples, bug fixing

---
 extension/data/public/js/data.model.js                    |  5 -----
 .../data/public/js/data.template.playground.dialog.js     | 15 +++++++++++++--
 .../data/public/js/data.template.playground.model.js      |  5 ++---
 extension/data/public/js/data.template.playground.view.js |  1 +
 extension/data/public/js/data.toolbar.view.js             |  6 +++---
 extension/data/public/templates/data-dialog.html          |  4 ++--
 .../templates/data-template-extension-standard.html       |  2 +-
 extension/data/public/templates/data-toolbar.html         |  3 +++
 8 files changed, 25 insertions(+), 16 deletions(-)

diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index 65754efee14dd25a30aeaf6d77969468edeff29d..fc837ab4e46bd6c155bb6d0b5f49348c79f2c174 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -7,11 +7,6 @@
             return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
         },   
         
-        defaults: {
-            dataJson: app.settings.firstRun ? "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}"
-                                               : ""
-        },
-
         _initialize: function() {
             var self = this;
             this.Entity = $entity.DataItem;
diff --git a/extension/data/public/js/data.template.playground.dialog.js b/extension/data/public/js/data.template.playground.dialog.js
index 16a4c077faad111de9930ac051de09756ed53516..2799d3e3adb989d9f9fd5303b35b22a37687d940 100644
--- a/extension/data/public/js/data.template.playground.dialog.js
+++ b/extension/data/public/js/data.template.playground.dialog.js
@@ -19,12 +19,23 @@
                 enableBasicAutocompletion: true,
                 enableSnippets: true
             });
-            
+
             aceBinder(this.model, "dataJson", this.contentEditor);
         },
 
-        save: function() {
+        save: function(s, e) {
+
+            if (this.model.get("dataJson") != null && this.model.get("dataJson") !== "") {
+                try {
+                    var json = JSON.parse(this.model.get("dataJson"));
+                } catch(e) {
+                    alert("You must enter a valid JSON. e.g. { \"propertName\": \"propertyValue\"} ");
+                    return;
+                }
+            }
+
             var self = this;
+          
             this.model.save({
                 success: function() {
                     self.trigger("dialog-close");
diff --git a/extension/data/public/js/data.template.playground.model.js b/extension/data/public/js/data.template.playground.model.js
index df8541936ac5fc4c61d125fdec0e584be12375e2..495dc2284512bbb1f8523f8fd2d2fa4277ca2412 100644
--- a/extension/data/public/js/data.template.playground.model.js
+++ b/extension/data/public/js/data.template.playground.model.js
@@ -3,9 +3,8 @@
     return ModelBase.extend({
         setTemplateModel: function (templateModel) {
             this.templateModel = templateModel;
-
-            var defaultJson = "{\n  \"_comment\": \"this is must be valid JSON\",\n  \"people\" : [ { \"name\": \"Jan Blaha\" } ]\n}";
-            this.set("dataJson", templateModel.get("dataItem").dataJson || defaultJson);
+            
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
         },
         
         save: function (options) {
diff --git a/extension/data/public/js/data.template.playground.view.js b/extension/data/public/js/data.template.playground.view.js
index 5d6d93432a13a97a8e4b0a9c6dd9fdfe48369c1f..03a34527bf578e340d00b5713290b8b7e8dba620 100644
--- a/extension/data/public/js/data.template.playground.view.js
+++ b/extension/data/public/js/data.template.playground.view.js
@@ -31,6 +31,7 @@
             self.listenTo(dialog, "dialog-close", function() {
                 self.render();
                 self.templateModel.save();
+                app.layout.dialog.hide(dialog);
             });
             
             app.layout.dialog.show(dialog);
diff --git a/extension/data/public/js/data.toolbar.view.js b/extension/data/public/js/data.toolbar.view.js
index 48327dd1dfe29a94e2f4cb0ee26a0c47b4dd2488..30303467125da3998ee254f5c88f713240bde179 100644
--- a/extension/data/public/js/data.toolbar.view.js
+++ b/extension/data/public/js/data.toolbar.view.js
@@ -4,7 +4,7 @@
             template: "data-toolbar",
 
             initialize: function() {
-                $(document).on('keydown', this.hotkey.bind(this));
+                $(document).on('keydown.data-detail', this.hotkey.bind(this));
             },
 
             events: {
@@ -43,7 +43,7 @@
                     var json = JSON.parse(this.model.get("dataJson"));
                 } catch(e) {
                     res.push({
-                        message: "Data must be valid JSON. " + e.toString()
+                        message: "Data must be valid JSON. e.g. { \"propertName\": \"propertyValue\"} <br/>" + e.toString()
                     });
                 }
 
@@ -51,7 +51,7 @@
             },
 
             onClose: function() {
-                $(document).off("keydown", this.hotkey);
+                $(document).off(".data-detail");
             }
         });
     });
\ No newline at end of file
diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
index a7400bbf100bf6aa2ac1794fd56c89f5015f5142..d1e54e4230a026c2c22b4b9a45b8394edbd89876 100644
--- a/extension/data/public/templates/data-dialog.html
+++ b/extension/data/public/templates/data-dialog.html
@@ -1,4 +1,4 @@
-﻿<div class="modal-dialog fs">
+﻿<div class="modal-dialog fs" id="data-dialog">
     <div class="modal-content">
         <div class="modal-header">
             <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
@@ -12,7 +12,7 @@
          
         </div>
         <div class="modal-footer">
-            <button type="button" id="saveCommand" class="btn btn-primary btn-sm" data-dismiss="modal">Save</button>
+            <button type="button" id="saveCommand" class="btn btn-primary btn-sm">Save</button>
         </div>
     </div>
 </div>
diff --git a/extension/data/public/templates/data-template-extension-standard.html b/extension/data/public/templates/data-template-extension-standard.html
index 07cf1d2ba38c765e54a4b1d967cbd18514b08247..c60f9878d811b2837605f587afb5432f2311ae62 100644
--- a/extension/data/public/templates/data-template-extension-standard.html
+++ b/extension/data/public/templates/data-template-extension-standard.html
@@ -14,6 +14,6 @@
         </ul>
     </div>
     {{else}}
-    <a class="btn btn-primary" href="/#/extension/data/detail">Create</a>
+    <a class="btn btn-primary btn-xs" href="/#/extension/data/detail">Create</a>
     {{/if}}
 </div>
\ No newline at end of file
diff --git a/extension/data/public/templates/data-toolbar.html b/extension/data/public/templates/data-toolbar.html
index 83f249f8bacf9068761a9c9467a4ee45e1048d20..8faf2c51486b3cd1581ae5e2d7c5a6e80dfbc582 100644
--- a/extension/data/public/templates/data-toolbar.html
+++ b/extension/data/public/templates/data-toolbar.html
@@ -2,4 +2,7 @@
     <ul class="nav navbar-nav sub-header">
         <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
+    <ul class="nav navbar-nav sub-header pull-right">
+         <li><a target="_blank" href="http://jsreport.net/learn/inline-data"><i class="fa fa-lightbulb-o"></i>Help</a></li>
+    </ul>
 </div>
\ No newline at end of file

From 19933b57d13f33dd74b8e146a2f73b6834b79792 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 10 May 2014 15:01:45 +0200
Subject: [PATCH] release 0.1.0

---
 extension/data/public/js/main.js | 355 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 350 insertions(+), 5 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index b3484e94844452fad440c71c6c3965437bad31a6..46341bc830db61ce21b9b7950b989a3448da42f6 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,353 @@
-﻿define(["app", "marionette", "backbone",    
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
-        "./data.toolbar.view", "./data.template.standard.model"],
+
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        },
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
+    function ($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function() {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/json");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
+            });
+                
+            aceBinder(this.model, "dataJson", this.contentEditor);
+
+            $("#contentArea").css("margin-top", top);
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('data.template.playground.dialog',["marionette", "app", "core/view.base", "core/aceBinder"], function(Marionette, app, ViewBase, aceBinder) {
+    return ViewBase.extend({
+        template: "data-dialog",
+
+        events: {
+            "click #saveCommand": "save",
+        },
+
+        initialize: function() {
+            _.bindAll(this, "save");
+        },
+
+        onDomRefresh: function() {
+
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/json");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
+            });
+
+            aceBinder(this.model, "dataJson", this.contentEditor);
+        },
+
+        save: function(s, e) {
+
+            if (this.model.get("dataJson") != null && this.model.get("dataJson") !== "") {
+                try {
+                    var json = JSON.parse(this.model.get("dataJson"));
+                } catch(e) {
+                    alert("You must enter a valid JSON. e.g. { \"propertName\": \"propertyValue\"} ");
+                    return;
+                }
+            }
+
+            var self = this;
+          
+            this.model.save({
+                success: function() {
+                    self.trigger("dialog-close");
+                }
+            });
+        }
+    });
+});
+define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        setTemplateModel: function (templateModel) {
+            this.templateModel = templateModel;
+            
+            this.set("dataJson", templateModel.get("dataItem").dataJson);
+        },
+        
+        save: function (options) {
+            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
+            return options.success();
+        },
+    });
+});
+define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-playground",
+        
+        initialize: function () {
+            _.bindAll(this, "isFilled");
+        },
+
+        events: {
+            "click #dataItemCommand": "openDialog",
+        },
+        
+        isFilled: function () {
+            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
+        },
+        
+        setTemplateModel: function (model) {
+            this.templateModel = model;
+
+            if (model.get("dataItem") == null)
+                model.attributes["dataItem"] = new $entity.DataItem();
+        },
+        
+
+        openDialog: function () {
+            var self = this;
+            var model = new Model();
+            model.setTemplateModel(this.templateModel);
+            var dialog = new DialogView({ model: model });
+            self.listenTo(dialog, "dialog-close", function() {
+                self.render();
+                self.templateModel.save();
+                app.layout.dialog.hide(dialog);
+            });
+            
+            app.layout.dialog.show(dialog);
+        }
+    });
+});
+
+
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            initialize: function() {
+                $(document).on('keydown.data-detail', this.hotkey.bind(this));
+            },
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                if (!this.validate())
+                    return;
+
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+
+            onValidate: function() {
+                var res = [];
+
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+
+                try {
+                    var json = JSON.parse(this.model.get("dataJson"));
+                } catch(e) {
+                    res.push({
+                        message: "Data must be valid JSON. e.g. { \"propertName\": \"propertyValue\"} <br/>" + e.toString()
+                    });
+                }
+
+                return res;
+            },
+
+            onClose: function() {
+                $(document).off(".data-detail");
+            }
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",    
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.playground.view", "data.template.standard.view", 
+        "data.toolbar.view", "data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From aca40a53639832f260704bbdd28c8b3e8316d97c Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 10 May 2014 22:56:14 +0200
Subject: [PATCH] fixed logging and google analytics

---
 extension/data/public/js/main.js | 355 +--------------------------------------
 1 file changed, 5 insertions(+), 350 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 46341bc830db61ce21b9b7950b989a3448da42f6..b3484e94844452fad440c71c6c3965437bad31a6 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,353 +1,8 @@
-
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
-    function ($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function() {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/json");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-                
-            aceBinder(this.model, "dataJson", this.contentEditor);
-
-            $("#contentArea").css("margin-top", top);
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('data.template.playground.dialog',["marionette", "app", "core/view.base", "core/aceBinder"], function(Marionette, app, ViewBase, aceBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-
-        events: {
-            "click #saveCommand": "save",
-        },
-
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-
-        onDomRefresh: function() {
-
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/json");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-
-            aceBinder(this.model, "dataJson", this.contentEditor);
-        },
-
-        save: function(s, e) {
-
-            if (this.model.get("dataJson") != null && this.model.get("dataJson") !== "") {
-                try {
-                    var json = JSON.parse(this.model.get("dataJson"));
-                } catch(e) {
-                    alert("You must enter a valid JSON. e.g. { \"propertName\": \"propertyValue\"} ");
-                    return;
-                }
-            }
-
-            var self = this;
-          
-            this.model.save({
-                success: function() {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
-define('data.template.playground.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
-define('data.template.playground.view',["app", "marionette", "core/view.base", "core/utils", "data.template.playground.dialog", "data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("dataItem") == null)
-                model.attributes["dataItem"] = new $entity.DataItem();
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-                app.layout.dialog.hide(dialog);
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
-
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            initialize: function() {
-                $(document).on('keydown.data-detail', this.hotkey.bind(this));
-            },
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                if (!this.validate())
-                    return;
-
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-
-            hotkey: function(e) {
-                if (e.ctrlKey && e.which === 83) {
-                    this.save();
-                    e.preventDefault();
-                    return false;
-                }
-            },
-
-            onValidate: function() {
-                var res = [];
-
-                if (this.model.get("name") == null || this.model.get("name") == "")
-                    res.push({
-                        message: "Name cannot be empty"
-                    });
-
-                try {
-                    var json = JSON.parse(this.model.get("dataJson"));
-                } catch(e) {
-                    res.push({
-                        message: "Data must be valid JSON. e.g. { \"propertName\": \"propertyValue\"} <br/>" + e.toString()
-                    });
-                }
-
-                return res;
-            },
-
-            onClose: function() {
-                $(document).off(".data-detail");
-            }
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
-                self.items.unshift(empty);
-
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
-        },
-
-        initialize: function () {
-            var self = this;
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-        },
-    });
-});
-define(["app", "marionette", "backbone",    
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.playground.view", "data.template.standard.view", 
-        "data.toolbar.view", "data.template.standard.model"],
+﻿define(["app", "marionette", "backbone",    
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.toolbar.view", "./data.template.standard.model"],
     function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
         TemplateStandardView, ToolbarView, TemplateStandardModel) {
 

From 41a6c2a0e6f865bceac1681112e6926730143fdd Mon Sep 17 00:00:00 2001
From: kanalnik <sladek69@gmail.com>
Date: Sun, 11 May 2014 12:39:01 +0200
Subject: [PATCH] help button navigating to website document

---
 extension/data/public/templates/data-dialog.html | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
index d1e54e4230a026c2c22b4b9a45b8394edbd89876..c2009e9067c453c24dfa9f96a5362bb242c1ccbd 100644
--- a/extension/data/public/templates/data-dialog.html
+++ b/extension/data/public/templates/data-dialog.html
@@ -2,16 +2,14 @@
     <div class="modal-content">
         <div class="modal-header">
             <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
-            <h4 class="modal-title">Inline data source</h4>
+            <h4 class="modal-title">Inline data source 
+            </h4>
         </div>
         <div class="modal-body fs">
-            {{if ~getMode()}}
-               <div id="contentArea" class="full-content-without-menu">{{:dataJson}}</div>
-            {{else}}
-            {{/if}}
-         
+            <div id="contentArea" class="full-content-without-menu">{{:dataJson}}</div>
         </div>
         <div class="modal-footer">
+            <a target="_blank" class="btn" href="http://jsreport.net/learn/inline-data"><i class="fa fa-lightbulb-o"></i>Help</a>
             <button type="button" id="saveCommand" class="btn btn-primary btn-sm">Save</button>
         </div>
     </div>

From 2d94bd97f76bde4fb2467af718cb8441c35fadb3 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 29 May 2014 14:30:03 +0200
Subject: [PATCH] some refactoring

---
 extension/data/lib/data.js           | 16 ++++++++++------
 extension/data/package.json          |  5 -----
 extension/data/public/js/main_dev.js |  6 +++---
 extension/data/test/dataTest.js      |  4 ++--
 4 files changed, 15 insertions(+), 16 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index ea2cb20a2f92bc8e55438f4aacd2dcfbaf6099e9..7f694dc1ef75a6c06fb2dab56880a936ca2d700a 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -6,7 +6,6 @@
 
 var shortid = require("shortid"),
     util = require("util"),
-    sformat = require("stringformat"),
     _ = require("underscore"),
     Q = require("q");
 
@@ -25,7 +24,7 @@ Data = function (reporter, definition) {
         name: { type: "string" },
         creationDate: { type: "date" },
         shortid: { type: "string"},
-        modificationDate: { type: "date" },
+        modificationDate: { type: "date" }
     }, null);
     
     if (this.reporter.playgroundMode) {
@@ -46,9 +45,14 @@ Data = function (reporter, definition) {
 };
 
 Data.prototype.handleBeforeRender = function (request, response) {
-    
-    if (request.data || (!request.template.dataItemId && !(request.template.dataItem != null && request.template.dataItem.dataJson))) {
-        this.reporter.logger.info("DateItem not defined for this template.");
+
+    if (request.data) {
+        this.reporter.logger.debug("Inline data specified.");
+        return Q();
+    }
+
+    if (!request.data && !request.template.dataItemId && !request.template.dataItem) {
+        this.reporter.logger.debug("No data specified.");
         return Q();
     }
 
@@ -61,7 +65,7 @@ Data.prototype.handleBeforeRender = function (request, response) {
         self.reporter.logger.info("Searching for before dataItem to apply");
 
         return request.context.data.single(function(d) { return d.shortid == this.id; }, { id: request.template.dataItemId } );
-    };
+    }
 
     return FindDataItem().then(function(di) {
         di = di.dataJson || di;
diff --git a/extension/data/package.json b/extension/data/package.json
deleted file mode 100644
index a57d912fd95313c7aea00ea915656d12a9c28f72..0000000000000000000000000000000000000000
--- a/extension/data/package.json
+++ /dev/null
@@ -1,5 +0,0 @@
-﻿{
-  "name": "data",
-  "main": "lib/data.js",
-  "dependencies": ["templates"]
-}
\ No newline at end of file
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index b3484e94844452fad440c71c6c3965437bad31a6..a032e6e32307ae5362461a4601c2b2bbdaf15eac 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -17,7 +17,7 @@
                 routes: {
                     "extension/data/list": "data",
                     "extension/data/detail/:id": "dataDetail",
-                    "extension/data/detail": "dataDetail",
+                    "extension/data/detail": "dataDetail"
                 },
 
                 data: function() {
@@ -39,7 +39,7 @@
                         model.set("shortid", id);
                         model.fetch();
                     }
-                },
+                }
             });
 
             app.data.on("created", function() {
@@ -82,7 +82,7 @@
                     'name': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
                     "modificationDate": { type: "date" },
-                    'dataJson': { 'type': 'Edm.String' },
+                    'dataJson': { 'type': 'Edm.String' }
                 }, null);
 
                 $entity.DataItem.prototype.toString = function() {
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 0340c1ad408ebb5d385dfd8e0c0fd89f9b7e569e..c521911fd1d5299f21580bfd0d9f9da0fb55e691 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -9,7 +9,7 @@ describeReporting(path.join(__dirname, "../../"), ["data"], function (reporter)
         it('should find and use data', function (done) {
             var dataItem = {
                 name: "test",
-                dataJson: JSON.stringify({ a: 'xx' }) + "",
+                dataJson: JSON.stringify({ a: 'xx' }) + ""
             };
 
             reporter.data.create(reporter.context, dataItem).then(function(data) {
@@ -42,7 +42,7 @@ describeReporting(path.join(__dirname, "../../"), ["data"], function (reporter)
             });
         });
         
-        it('should ignore extension when no inline data specified', function(done) {
+        it('should ignore extension when no data specified', function(done) {
             var request = {
                 reporter: reporter,
                 template: { content: "html", dataItemId: null },

From 390e74f1511d53ad3464dbba7ec40bfc8b2ca9c9 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 9 Jun 2014 14:42:18 +0200
Subject: [PATCH] refactoring - splitting online, playground and core
 repository

---
 extension/data/.gitignore                          |  2 +
 extension/data/lib/data.js                         | 46 +++++++------
 .../public/js/data.template.playground.dialog.js   | 46 -------------
 .../public/js/data.template.playground.model.js    | 15 -----
 .../public/js/data.template.playground.view.js     | 41 ------------
 extension/data/public/js/main.js                   | 77 ++++++++++------------
 extension/data/public/js/main_dev.js               | 71 +++++++++-----------
 extension/data/public/templates/data-dialog.html   | 17 -----
 .../data-template-extension-playground.html        |  4 --
 9 files changed, 87 insertions(+), 232 deletions(-)

diff --git a/extension/data/.gitignore b/extension/data/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..7b014069d24cdc005fd0c90b91e6c43bbbd691f8
--- /dev/null
+++ b/extension/data/.gitignore
@@ -0,0 +1,2 @@
+public/js/main_dev.js
+public/js/main_built.js
\ No newline at end of file
diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 7f694dc1ef75a6c06fb2dab56880a936ca2d700a..f5a7d5ee086d70297bc2ad38acb3a33d0a075647 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -2,7 +2,7 @@
  * Copyright(c) 2014 Jan Blaha 
  *
  * Inline Data plugin able to add some sample data to rendering process
- */ 
+ */
 
 var shortid = require("shortid"),
     util = require("util"),
@@ -18,7 +18,7 @@ Data = function (reporter, definition) {
     var self = this;
     this.reporter = reporter;
     this.definition = definition;
-    
+
     this.DataItemType = $data.Class.define(reporter.extendGlobalTypeName("$entity.DataItem"), $data.Entity, null, {
         dataJson: { type: "string" },
         name: { type: "string" },
@@ -26,26 +26,20 @@ Data = function (reporter, definition) {
         shortid: { type: "string"},
         modificationDate: { type: "date" }
     }, null);
-    
-    if (this.reporter.playgroundMode) {
-        reporter.templates.TemplateType.addMember("dataItem", { type:  this.DataItemType });
-    } else {
-        this.DataItemType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
-        reporter.templates.TemplateType.addMember("dataItemId", { type: "string" });
-    }
-    
+
+    this.DataItemType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
+    reporter.templates.TemplateType.addMember("dataItemId", { type: "string" });
+
     this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
     this.DataItemType.addEventListener("beforeUpdate", Data.prototype._beforeUpdateHandler.bind(this));
-    
+
     this.reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
-    this.reporter.entitySetRegistrationListners.add(definition.name, this, function(entitySets) {
-        if (!self.reporter.playgroundMode) 
+    this.reporter.entitySetRegistrationListners.add(definition.name, this, function (entitySets) {
             entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
     });
 };
 
 Data.prototype.handleBeforeRender = function (request, response) {
-
     if (request.data) {
         this.reporter.logger.debug("Inline data specified.");
         return Q();
@@ -64,15 +58,17 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
         self.reporter.logger.info("Searching for before dataItem to apply");
 
-        return request.context.data.single(function(d) { return d.shortid == this.id; }, { id: request.template.dataItemId } );
+        return request.context.data.single(function (d) {
+            return d.shortid == this.id;
+        }, { id: request.template.dataItemId });
     }
 
-    return FindDataItem().then(function(di) {
+    return FindDataItem().then(function (di) {
         di = di.dataJson || di;
 
         try {
             request.data = JSON.parse(di);
-        } catch(e) {
+        } catch (e) {
             self.reporter.logger.warn("Invalid json in data item: " + e.message);
             e.weak = true;
             return Q.reject(e);
@@ -83,18 +79,20 @@ Data.prototype.handleBeforeRender = function (request, response) {
 Data.prototype.create = function (context, dataItem) {
     var ent = new this.DataItemType(dataItem);
     context.data.add(ent);
-    
-    return context.saveChanges().then(function() { return Q(ent); });
+
+    return context.saveChanges().then(function () {
+        return Q(ent);
+    });
 };
 
-Data.prototype._beforeCreateHandler = function(args, entity) {
-     if (entity.shortid == null)
+Data.prototype._beforeCreateHandler = function (args, entity) {
+    if (entity.shortid == null)
         entity.shortid = shortid.generate();
-    
+
     entity.creationDate = new Date();
     entity.modificationDate = new Date();
 };
 
-Data.prototype._beforeUpdateHandler = function(args, entity) {
-     entity.modificationDate = new Date();
+Data.prototype._beforeUpdateHandler = function (args, entity) {
+    entity.modificationDate = new Date();
 };
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.playground.dialog.js b/extension/data/public/js/data.template.playground.dialog.js
deleted file mode 100644
index 2799d3e3adb989d9f9fd5303b35b22a37687d940..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.template.playground.dialog.js
+++ /dev/null
@@ -1,46 +0,0 @@
-﻿define(["marionette", "app", "core/view.base", "core/aceBinder"], function(Marionette, app, ViewBase, aceBinder) {
-    return ViewBase.extend({
-        template: "data-dialog",
-
-        events: {
-            "click #saveCommand": "save",
-        },
-
-        initialize: function() {
-            _.bindAll(this, "save");
-        },
-
-        onDomRefresh: function() {
-
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/json");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-
-            aceBinder(this.model, "dataJson", this.contentEditor);
-        },
-
-        save: function(s, e) {
-
-            if (this.model.get("dataJson") != null && this.model.get("dataJson") !== "") {
-                try {
-                    var json = JSON.parse(this.model.get("dataJson"));
-                } catch(e) {
-                    alert("You must enter a valid JSON. e.g. { \"propertName\": \"propertyValue\"} ");
-                    return;
-                }
-            }
-
-            var self = this;
-          
-            this.model.save({
-                success: function() {
-                    self.trigger("dialog-close");
-                }
-            });
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.playground.model.js b/extension/data/public/js/data.template.playground.model.js
deleted file mode 100644
index 495dc2284512bbb1f8523f8fd2d2fa4277ca2412..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.template.playground.model.js
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        setTemplateModel: function (templateModel) {
-            this.templateModel = templateModel;
-            
-            this.set("dataJson", templateModel.get("dataItem").dataJson);
-        },
-        
-        save: function (options) {
-            this.templateModel.get("dataItem").dataJson = this.get("dataJson");
-            return options.success();
-        },
-    });
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.playground.view.js b/extension/data/public/js/data.template.playground.view.js
deleted file mode 100644
index 03a34527bf578e340d00b5713290b8b7e8dba620..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.template.playground.view.js
+++ /dev/null
@@ -1,41 +0,0 @@
-﻿define(["app", "marionette", "core/view.base", "core/utils", "./data.template.playground.dialog", "./data.template.playground.model"], function (app, Marionette, ViewBase, Utils, DialogView, Model) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-playground",
-        
-        initialize: function () {
-            _.bindAll(this, "isFilled");
-        },
-
-        events: {
-            "click #dataItemCommand": "openDialog",
-        },
-        
-        isFilled: function () {
-            return (this.templateModel.get("dataItem") != null) && (this.templateModel.get("dataItem").dataJson != null);
-        },
-        
-        setTemplateModel: function (model) {
-            this.templateModel = model;
-
-            if (model.get("dataItem") == null)
-                model.attributes["dataItem"] = new $entity.DataItem();
-        },
-        
-
-        openDialog: function () {
-            var self = this;
-            var model = new Model();
-            model.setTemplateModel(this.templateModel);
-            var dialog = new DialogView({ model: model });
-            self.listenTo(dialog, "dialog-close", function() {
-                self.render();
-                self.templateModel.save();
-                app.layout.dialog.hide(dialog);
-            });
-            
-            app.layout.dialog.show(dialog);
-        }
-    });
-});
-
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index b3484e94844452fad440c71c6c3965437bad31a6..ab14fd3e71777d50594f5dc7afa183a5b8b5c075 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,15 +1,14 @@
-﻿define(["app", "marionette", "backbone",    
+﻿define(["app", "marionette", "backbone",
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.template.standard.view",
         "./data.toolbar.view", "./data.template.standard.model"],
-    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
-        TemplateStandardView, ToolbarView, TemplateStandardModel) {
+    function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
-        app.module("data", function(module) {
-            var Router = Backbone.Router.extend({                
-                initialize: function() {
-                    app.listenTo(app, "data-saved", function(model) {
+        app.module("data", function (module) {
+            var Router = Backbone.Router.extend({
+                initialize: function () {
+                    app.listenTo(app, "data-saved", function (model) {
                         window.location.hash = "/extension/data/detail/" + model.get("shortid");
                     });
                 },
@@ -17,10 +16,10 @@
                 routes: {
                     "extension/data/list": "data",
                     "extension/data/detail/:id": "dataDetail",
-                    "extension/data/detail": "dataDetail",
+                    "extension/data/detail": "dataDetail"
                 },
 
-                data: function() {
+                data: function () {
                     this.navigate("/extension/data/list");
 
                     var model = new DataListModel();
@@ -31,7 +30,7 @@
                     model.fetch();
                 },
 
-                dataDetail: function(id) {
+                dataDetail: function (id) {
                     var model = new DataModel();
                     app.layout.showToolbarViewComposition(new DataDetailView({ model: model }), new ToolbarView({ model: model }));
 
@@ -39,63 +38,53 @@
                         model.set("shortid", id);
                         model.fetch();
                     }
-                },
+                }
             });
 
-            app.data.on("created", function() {
+            app.data.on("created", function () {
                 app.data.router.data();
             });
 
             app.data.router = new Router();
 
-            if (!app.settings.playgroundMode) {
 
-                app.on("menu-render", function(context) {
-                    context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
-                });
+            app.on("menu-render", function (context) {
+                context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
+            });
+
+            app.on("menu-actions-render", function (context) {
+                context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
+            });
 
-                app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
-                });
-            }
 
-            app.on("template-extensions-render", function(context) {
-                if (app.settings.playgroundMode) {
-                    var view = new TemplatePlaygroundView();
-                    view.setTemplateModel(context.template);
+            app.on("template-extensions-render", function (context) {
+
+                var model = new TemplateStandardModel();
+                model.setTemplate(context.template);
+
+                model.fetch({ success: function () {
+                    var view = new TemplateStandardView({ model: model});
                     context.extensionsRegion.show(view, "data");
-                } else {
-                    var model = new TemplateStandardModel();
-                    model.setTemplate(context.template);
-                    
-                    model.fetch({ success: function() {
-                        var view = new TemplateStandardView({ model: model});
-                        context.extensionsRegion.show(view, "data");   
-                    }});
-                }
+                }});
             });
 
-            app.on("entity-registration", function(context) {
+            app.on("entity-registration", function (context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
                     'shortid': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
                     "creationDate": { type: "date" },
                     "modificationDate": { type: "date" },
-                    'dataJson': { 'type': 'Edm.String' },
+                    'dataJson': { 'type': 'Edm.String' }
                 }, null);
 
-                $entity.DataItem.prototype.toString = function() {
+                $entity.DataItem.prototype.toString = function () {
                     return "DataItem " + (this.name || "");
                 };
 
-                if (app.settings.playgroundMode) {
-                    $entity.Template.addMember("dataItem", { 'type': "$entity.DataItem" });
-                } else {
-                    $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
-                    $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                    context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-                }
+                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
             });
         });
     });
\ No newline at end of file
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index a032e6e32307ae5362461a4601c2b2bbdaf15eac..ab14fd3e71777d50594f5dc7afa183a5b8b5c075 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -1,15 +1,14 @@
-﻿define(["app", "marionette", "backbone",    
+﻿define(["app", "marionette", "backbone",
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
-        "./data.template.playground.view", "./data.template.standard.view", 
+        "./data.template.standard.view",
         "./data.toolbar.view", "./data.template.standard.model"],
-    function(app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplatePlaygroundView,
-        TemplateStandardView, ToolbarView, TemplateStandardModel) {
+    function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
-        app.module("data", function(module) {
-            var Router = Backbone.Router.extend({                
-                initialize: function() {
-                    app.listenTo(app, "data-saved", function(model) {
+        app.module("data", function (module) {
+            var Router = Backbone.Router.extend({
+                initialize: function () {
+                    app.listenTo(app, "data-saved", function (model) {
                         window.location.hash = "/extension/data/detail/" + model.get("shortid");
                     });
                 },
@@ -20,7 +19,7 @@
                     "extension/data/detail": "dataDetail"
                 },
 
-                data: function() {
+                data: function () {
                     this.navigate("/extension/data/list");
 
                     var model = new DataListModel();
@@ -31,7 +30,7 @@
                     model.fetch();
                 },
 
-                dataDetail: function(id) {
+                dataDetail: function (id) {
                     var model = new DataModel();
                     app.layout.showToolbarViewComposition(new DataDetailView({ model: model }), new ToolbarView({ model: model }));
 
@@ -42,40 +41,34 @@
                 }
             });
 
-            app.data.on("created", function() {
+            app.data.on("created", function () {
                 app.data.router.data();
             });
 
             app.data.router = new Router();
 
-            if (!app.settings.playgroundMode) {
 
-                app.on("menu-render", function(context) {
-                    context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
-                });
+            app.on("menu-render", function (context) {
+                context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
+            });
+
+            app.on("menu-actions-render", function (context) {
+                context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
+            });
+
 
-                app.on("menu-actions-render", function(context) {
-                    context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
-                });
-            }
+            app.on("template-extensions-render", function (context) {
 
-            app.on("template-extensions-render", function(context) {
-                if (app.settings.playgroundMode) {
-                    var view = new TemplatePlaygroundView();
-                    view.setTemplateModel(context.template);
+                var model = new TemplateStandardModel();
+                model.setTemplate(context.template);
+
+                model.fetch({ success: function () {
+                    var view = new TemplateStandardView({ model: model});
                     context.extensionsRegion.show(view, "data");
-                } else {
-                    var model = new TemplateStandardModel();
-                    model.setTemplate(context.template);
-                    
-                    model.fetch({ success: function() {
-                        var view = new TemplateStandardView({ model: model});
-                        context.extensionsRegion.show(view, "data");   
-                    }});
-                }
+                }});
             });
 
-            app.on("entity-registration", function(context) {
+            app.on("entity-registration", function (context) {
 
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
                     'shortid': { 'type': 'Edm.String' },
@@ -85,17 +78,13 @@
                     'dataJson': { 'type': 'Edm.String' }
                 }, null);
 
-                $entity.DataItem.prototype.toString = function() {
+                $entity.DataItem.prototype.toString = function () {
                     return "DataItem " + (this.name || "");
                 };
 
-                if (app.settings.playgroundMode) {
-                    $entity.Template.addMember("dataItem", { 'type': "$entity.DataItem" });
-                } else {
-                    $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
-                    $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                    context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-                }
+                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
             });
         });
     });
\ No newline at end of file
diff --git a/extension/data/public/templates/data-dialog.html b/extension/data/public/templates/data-dialog.html
deleted file mode 100644
index c2009e9067c453c24dfa9f96a5362bb242c1ccbd..0000000000000000000000000000000000000000
--- a/extension/data/public/templates/data-dialog.html
+++ /dev/null
@@ -1,17 +0,0 @@
-﻿<div class="modal-dialog fs" id="data-dialog">
-    <div class="modal-content">
-        <div class="modal-header">
-            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
-            <h4 class="modal-title">Inline data source 
-            </h4>
-        </div>
-        <div class="modal-body fs">
-            <div id="contentArea" class="full-content-without-menu">{{:dataJson}}</div>
-        </div>
-        <div class="modal-footer">
-            <a target="_blank" class="btn" href="http://jsreport.net/learn/inline-data"><i class="fa fa-lightbulb-o"></i>Help</a>
-            <button type="button" id="saveCommand" class="btn btn-primary btn-sm">Save</button>
-        </div>
-    </div>
-</div>
-
diff --git a/extension/data/public/templates/data-template-extension-playground.html b/extension/data/public/templates/data-template-extension-playground.html
deleted file mode 100644
index 3c0fd728b989afde7ec7fb802351a34277e03722..0000000000000000000000000000000000000000
--- a/extension/data/public/templates/data-template-extension-playground.html
+++ /dev/null
@@ -1,4 +0,0 @@
-﻿<a class="expandable-header"><i class="glyphicon glyphicon-sm glyphicon-book"></i>Data<b class="caret caret-right" {{if ~isFilled()}}style="color: green"{{else}}{{/if}}></b></a>
-<div class="expandable-body properties" style="display: none">
-    <button class="btn btn-xs btn-success" id="dataItemCommand">Data Upload</button>
-</div>

From 8086ccd1622ca49790dab310d2ed17a35489206e Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Tue, 10 Jun 2014 19:35:12 +0200
Subject: [PATCH] refactoring - introducig dataProvider and abstracting out
 jaydata from extensions

---
 extension/data/lib/data.js      | 35 +++++++++++++++++------------------
 extension/data/test/dataTest.js |  4 +++-
 2 files changed, 20 insertions(+), 19 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index f5a7d5ee086d70297bc2ad38acb3a33d0a075647..8b0ae84be8d166c9e69d7f44caae1fd9ed7d112f 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -7,63 +7,62 @@
 var shortid = require("shortid"),
     util = require("util"),
     _ = require("underscore"),
-    Q = require("q");
+    q = require("q");
 
 
 module.exports = function (reporter, definition) {
     reporter[definition.name] = new Data(reporter, definition);
 };
 
-Data = function (reporter, definition) {
+var Data = function (reporter, definition) {
     var self = this;
     this.reporter = reporter;
     this.definition = definition;
 
-    this.DataItemType = $data.Class.define(reporter.extendGlobalTypeName("$entity.DataItem"), $data.Entity, null, {
+    this.DataItemType = this.reporter.dataProvider.createEntityType("DataItemType", {
+        _id : { type: "id", key: true, computed: true, nullable: false },
         dataJson: { type: "string" },
         name: { type: "string" },
         creationDate: { type: "date" },
         shortid: { type: "string"},
         modificationDate: { type: "date" }
-    }, null);
+    });
+
+    this.reporter.dataProvider.registerEntitySet("data", this.DataItemType, { tableOptions: { humanReadableKeys: [ "shortid"] }});
 
-    this.DataItemType.addMember("_id", { type: "id", key: true, computed: true, nullable: false });
     reporter.templates.TemplateType.addMember("dataItemId", { type: "string" });
 
     this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
     this.DataItemType.addEventListener("beforeUpdate", Data.prototype._beforeUpdateHandler.bind(this));
 
     this.reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
-    this.reporter.entitySetRegistrationListners.add(definition.name, this, function (entitySets) {
-            entitySets["data"] = { type: $data.EntitySet, elementType: self.DataItemType, tableOptions: { humanReadableKeys: [ "shortid"] }  };
-    });
 };
 
 Data.prototype.handleBeforeRender = function (request, response) {
     if (request.data) {
         this.reporter.logger.debug("Inline data specified.");
-        return Q();
+        return q();
     }
 
     if (!request.data && !request.template.dataItemId && !request.template.dataItem) {
         this.reporter.logger.debug("No data specified.");
-        return Q();
+        return q();
     }
 
     var self = this;
 
-    function FindDataItem() {
-        if (request.template.dataItem != null && request.template.dataItem != "")
-            return Q(request.template.dataItem);
+    function findDataItem() {
+        if (request.template.dataItem)
+            return q(request.template.dataItem);
 
         self.reporter.logger.info("Searching for before dataItem to apply");
 
         return request.context.data.single(function (d) {
-            return d.shortid == this.id;
+            return d.shortid === this.id;
         }, { id: request.template.dataItemId });
     }
 
-    return FindDataItem().then(function (di) {
+    return findDataItem().then(function (di) {
         di = di.dataJson || di;
 
         try {
@@ -71,7 +70,7 @@ Data.prototype.handleBeforeRender = function (request, response) {
         } catch (e) {
             self.reporter.logger.warn("Invalid json in data item: " + e.message);
             e.weak = true;
-            return Q.reject(e);
+            return q.reject(e);
         }
     });
 };
@@ -81,12 +80,12 @@ Data.prototype.create = function (context, dataItem) {
     context.data.add(ent);
 
     return context.saveChanges().then(function () {
-        return Q(ent);
+        return q(ent);
     });
 };
 
 Data.prototype._beforeCreateHandler = function (args, entity) {
-    if (entity.shortid == null)
+    if (!entity.shortid)
         entity.shortid = shortid.generate();
 
     entity.creationDate = new Date();
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index c521911fd1d5299f21580bfd0d9f9da0fb55e691..44dad3418863bf943547b5852e31f71321d1fb3d 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -1,4 +1,6 @@
-﻿var assert = require("assert"),
+﻿/*globals describe, it, beforeEach, afterEach */
+
+var assert = require("assert"),
     path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 

From c8c4e5096602647d551512466c1d02509bf94943 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Fri, 13 Jun 2014 19:42:28 +0200
Subject: [PATCH] usage of nedb in tests: grunt file refactoring, tests
 refactoring; excel-parser extension replaced dataParser.js

---
 extension/data/test/dataTest.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 44dad3418863bf943547b5852e31f71321d1fb3d..6fc645489ae93af455f1e050d75880d469b6878b 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -4,7 +4,7 @@ var assert = require("assert"),
     path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 
-describeReporting(path.join(__dirname, "../../"), ["data"], function (reporter) {
+describeReporting(path.join(__dirname, "../../"), ["templates","data"], function (reporter) {
     
     describe('data', function() {
 

From 209cc0f58c477118b6d3f827f0c530f8f651512e Mon Sep 17 00:00:00 2001
From: Jan Blaha <honza.pofider@seznam.cz>
Date: Wed, 18 Jun 2014 16:20:50 +0200
Subject: [PATCH] delete main_dev

---
 extension/data/public/js/main_dev.js | 90 ------------------------------------
 1 file changed, 90 deletions(-)

diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
deleted file mode 100644
index ab14fd3e71777d50594f5dc7afa183a5b8b5c075..0000000000000000000000000000000000000000
--- a/extension/data/public/js/main_dev.js
+++ /dev/null
@@ -1,90 +0,0 @@
-﻿define(["app", "marionette", "backbone",
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.standard.view",
-        "./data.toolbar.view", "./data.template.standard.model"],
-    function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateStandardView, ToolbarView, TemplateStandardModel) {
-
-        app.module("data", function (module) {
-            var Router = Backbone.Router.extend({
-                initialize: function () {
-                    app.listenTo(app, "data-saved", function (model) {
-                        window.location.hash = "/extension/data/detail/" + model.get("shortid");
-                    });
-                },
-
-                routes: {
-                    "extension/data/list": "data",
-                    "extension/data/detail/:id": "dataDetail",
-                    "extension/data/detail": "dataDetail"
-                },
-
-                data: function () {
-                    this.navigate("/extension/data/list");
-
-                    var model = new DataListModel();
-
-                    app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
-
-
-                    model.fetch();
-                },
-
-                dataDetail: function (id) {
-                    var model = new DataModel();
-                    app.layout.showToolbarViewComposition(new DataDetailView({ model: model }), new ToolbarView({ model: model }));
-
-                    if (id != null) {
-                        model.set("shortid", id);
-                        model.fetch();
-                    }
-                }
-            });
-
-            app.data.on("created", function () {
-                app.data.router.data();
-            });
-
-            app.data.router = new Router();
-
-
-            app.on("menu-render", function (context) {
-                context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
-            });
-
-            app.on("menu-actions-render", function (context) {
-                context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
-            });
-
-
-            app.on("template-extensions-render", function (context) {
-
-                var model = new TemplateStandardModel();
-                model.setTemplate(context.template);
-
-                model.fetch({ success: function () {
-                    var view = new TemplateStandardView({ model: model});
-                    context.extensionsRegion.show(view, "data");
-                }});
-            });
-
-            app.on("entity-registration", function (context) {
-
-                $data.Class.define("$entity.DataItem", $data.Entity, null, {
-                    'shortid': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
-                    'dataJson': { 'type': 'Edm.String' }
-                }, null);
-
-                $entity.DataItem.prototype.toString = function () {
-                    return "DataItem " + (this.name || "");
-                };
-
-                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
-                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-            });
-        });
-    });
\ No newline at end of file

From f0c01bc20484afb18adf5ff0073f17a5b6f4af30 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sat, 21 Jun 2014 10:08:59 +0200
Subject: [PATCH] refactoring - bootstrapper

---
 0 files changed

diff --git a/extension/data/.npmignore b/extension/data/.npmignore
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391

From e2ceb48fab95c987bfd3a58b11aff29a2702a94a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Thu, 10 Jul 2014 15:58:16 +0200
Subject: [PATCH] improving jsreport performance

---
 extension/data/lib/data.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 8b0ae84be8d166c9e69d7f44caae1fd9ed7d112f..2917072a0035b6ddb9fe0c7a86cc520aafa45c26 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -55,7 +55,7 @@ Data.prototype.handleBeforeRender = function (request, response) {
         if (request.template.dataItem)
             return q(request.template.dataItem);
 
-        self.reporter.logger.info("Searching for before dataItem to apply");
+        self.reporter.logger.debug("Searching for dataItem to apply");
 
         return request.context.data.single(function (d) {
             return d.shortid === this.id;

From 0f27c99b21b4c6b695ef1fcdb4fe44d034dbd027 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 15 Oct 2014 12:54:32 +0200
Subject: [PATCH] embedding initial commit

---
 extension/data/.gitignore                          |   3 +-
 extension/data/jsreport.config.js                  |   3 +-
 extension/data/public/js/data.model.js             |   2 +-
 .../data/public/js/data.template.standard.view.js  |   2 +-
 extension/data/public/js/main.js                   | 253 ++++++++++++++++++++-
 extension/data/public/js/main_dev.js               |  90 ++++++++
 extension/data/public/js/main_embed.js             |  82 +++++++
 .../templates/embed-data-template-extension.html   |  13 ++
 8 files changed, 437 insertions(+), 11 deletions(-)

diff --git a/extension/data/.gitignore b/extension/data/.gitignore
index 7b014069d24cdc005fd0c90b91e6c43bbbd691f8..bf074057ff68d17bb22652b8bed703bbf606131a 100644
--- a/extension/data/.gitignore
+++ b/extension/data/.gitignore
@@ -1,2 +1 @@
-public/js/main_dev.js
-public/js/main_built.js
\ No newline at end of file
+public/js/main.js
\ No newline at end of file
diff --git a/extension/data/jsreport.config.js b/extension/data/jsreport.config.js
index 8369b1b5045d6f3fa6ce7b86d8d5a34143f87107..39289317fb4036118ed094183113ac1585edbd6c 100644
--- a/extension/data/jsreport.config.js
+++ b/extension/data/jsreport.config.js
@@ -1,5 +1,6 @@
 ﻿module.exports = {
   "name": "data",
   "main": "lib/data.js",
-  "dependencies": ["templates"]
+  "dependencies": ["templates"],
+  "embeddedSupport":true
 }
\ No newline at end of file
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index fc837ab4e46bd6c155bb6d0b5f49348c79f2c174..05819d81766849b421693bd7d0ae872490ce14dd 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -10,6 +10,6 @@
         _initialize: function() {
             var self = this;
             this.Entity = $entity.DataItem;
-        },
+        }
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.standard.view.js b/extension/data/public/js/data.template.standard.view.js
index bf4a469ab3791c9b123243a31c100c8cbfb949de..0f3053b1449a4747567048aaed77a4f99b5e32a1 100644
--- a/extension/data/public/js/data.template.standard.view.js
+++ b/extension/data/public/js/data.template.standard.view.js
@@ -1,4 +1,4 @@
-﻿define(["app", "marionette", "core/view.base", "core/utils",], function(app, Marionette, ViewBase, Utils) {
+﻿define(["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
     return ViewBase.extend({
         tagName: "li",
         template: "data-template-extension-standard",
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index ab14fd3e71777d50594f5dc7afa183a5b8b5c075..fa72e57d92dd28fabc828a6b6bc0040676f8da74 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -1,8 +1,249 @@
-﻿define(["app", "marionette", "backbone",
-        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
-        "./data.model", "./data.detail.view",
-        "./data.template.standard.view",
-        "./data.toolbar.view", "./data.template.standard.model"],
+define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
+
+    return ModelBase.extend({
+        contextSet: function() { return app.dataContext.data; },
+
+        fetchQuery: function (cb) {
+            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+        },   
+        
+        _initialize: function() {
+            var self = this;
+            this.Entity = $entity.DataItem;
+        }
+    });
+});
+define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
+    return Backbone.Collection.extend({
+
+        initialize: function () {
+            var self = this;
+            this.filter = new DataGrid.Filter.Base();
+            this.filter.bind("apply", function () {
+                self.fetch();
+            });
+        },
+        
+        parse: function (data) {
+            if (data.totalCount != null)
+                this.filter.set("totalCount", data.totalCount);
+
+            return data;
+        },
+        
+        fetchQuery: function () {
+            return app.dataContext.data.applyFilter(this.filter).toArray();
+        },
+
+        model: DataModel,
+    });
+});
+
+
+
+
+define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
+    return ViewBase.extend({
+        template: "data-list",
+
+        initialize: function () {
+            this.listenTo(this.collection, "sync", this.render);
+            this.listenTo(this.collection, "remove", this.render);
+        },
+
+        onDomRefresh: function () {
+            this.dataGrid = DataGrid.show({
+                collection: this.collection,
+                filter: this.collection.filter,
+                idKey: "shortid",
+                onShowDetail: function (id) {
+                    window.location.hash = "extension/data/detail/" + id;
+                },
+                el: $("#schemaGridBox"),
+                headerTemplate: "data-list-header",
+                rowsTemplate: "data-list-rows"
+            });
+        },
+    });
+}); 
+define('data.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
+    function ($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-list-toolbar",
+            
+            initialize: function () {
+            },
+         
+            
+            events: {
+                "click #deleteCommand": "deleteCommand",
+            },
+            
+            deleteCommand: function() {
+                this.contentView.dataGrid.deleteItems();
+            }
+        });
+    });
+
+
+define('data.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
+    return ViewBase.extend({
+        template: "data-detail",
+
+        initialize: function() {
+            var self = this;
+            this.listenTo(this.model, "sync", self.render);
+        },
+
+        onDomRefresh: function() {
+
+            var top = $("#contentWrap").position().top;
+
+            this.contentEditor = ace.edit("contentArea");
+            this.contentEditor.setTheme("ace/theme/chrome");
+            this.contentEditor.getSession().setMode("ace/mode/json");
+            this.contentEditor.setOptions({
+                enableBasicAutocompletion: true,
+                enableSnippets: true
+            });
+                
+            aceBinder(this.model, "dataJson", this.contentEditor);
+
+            $("#contentArea").css("margin-top", top);
+        },
+
+        validateLeaving: function() {
+            return !this.model.hasChangesSyncLastSync();
+        },
+    });
+});
+define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.templateModel.get("dataItemId");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
+define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
+    function($, app, Utils, LayoutBase) {
+        return LayoutBase.extend({
+            template: "data-toolbar",
+
+            initialize: function() {
+                $(document).on('keydown.data-detail', this.hotkey.bind(this));
+            },
+
+            events: {
+                "click #saveCommand": "save",
+            },
+
+            save: function() {
+                if (!this.validate())
+                    return;
+
+                var self = this;
+                this.model.save({}, {
+                    success: function() {
+                        app.trigger("data-saved", self.model);
+                    }
+                });
+            },
+
+            hotkey: function(e) {
+                if (e.ctrlKey && e.which === 83) {
+                    this.save();
+                    e.preventDefault();
+                    return false;
+                }
+            },
+
+            onValidate: function() {
+                var res = [];
+
+                if (this.model.get("name") == null || this.model.get("name") == "")
+                    res.push({
+                        message: "Name cannot be empty"
+                    });
+
+                try {
+                    var json = JSON.parse(this.model.get("dataJson"));
+                } catch(e) {
+                    res.push({
+                        message: "Data must be valid JSON. e.g. { \"propertName\": \"propertyValue\"} <br/>" + e.toString()
+                    });
+                }
+
+                return res;
+            },
+
+            onClose: function() {
+                $(document).off(".data-detail");
+            }
+        });
+    });
+define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+                var empty = { name: "- not selected -", shortid: null, _id: null };
+                self.items.unshift(empty);
+
+                if (self.templateModel.get("dataItemId"))
+                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
+                else 
+                  self.set(empty, { silent: true });
+                
+                return options.success();
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
+        },
+
+        initialize: function () {
+            var self = this;
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+        },
+    });
+});
+define(["app", "marionette", "backbone",
+        "data.list.model", "data.list.view", "data.list.toolbar.view",
+        "data.model", "data.detail.view",
+        "data.template.standard.view",
+        "data.toolbar.view", "data.template.standard.model"],
     function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
         app.module("data", function (module) {
@@ -87,4 +328,4 @@
                 context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
             });
         });
-    });
\ No newline at end of file
+    });
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..ab14fd3e71777d50594f5dc7afa183a5b8b5c075
--- /dev/null
+++ b/extension/data/public/js/main_dev.js
@@ -0,0 +1,90 @@
+﻿define(["app", "marionette", "backbone",
+        "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
+        "./data.model", "./data.detail.view",
+        "./data.template.standard.view",
+        "./data.toolbar.view", "./data.template.standard.model"],
+    function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateStandardView, ToolbarView, TemplateStandardModel) {
+
+        app.module("data", function (module) {
+            var Router = Backbone.Router.extend({
+                initialize: function () {
+                    app.listenTo(app, "data-saved", function (model) {
+                        window.location.hash = "/extension/data/detail/" + model.get("shortid");
+                    });
+                },
+
+                routes: {
+                    "extension/data/list": "data",
+                    "extension/data/detail/:id": "dataDetail",
+                    "extension/data/detail": "dataDetail"
+                },
+
+                data: function () {
+                    this.navigate("/extension/data/list");
+
+                    var model = new DataListModel();
+
+                    app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
+
+
+                    model.fetch();
+                },
+
+                dataDetail: function (id) {
+                    var model = new DataModel();
+                    app.layout.showToolbarViewComposition(new DataDetailView({ model: model }), new ToolbarView({ model: model }));
+
+                    if (id != null) {
+                        model.set("shortid", id);
+                        model.fetch();
+                    }
+                }
+            });
+
+            app.data.on("created", function () {
+                app.data.router.data();
+            });
+
+            app.data.router = new Router();
+
+
+            app.on("menu-render", function (context) {
+                context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
+            });
+
+            app.on("menu-actions-render", function (context) {
+                context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
+            });
+
+
+            app.on("template-extensions-render", function (context) {
+
+                var model = new TemplateStandardModel();
+                model.setTemplate(context.template);
+
+                model.fetch({ success: function () {
+                    var view = new TemplateStandardView({ model: model});
+                    context.extensionsRegion.show(view, "data");
+                }});
+            });
+
+            app.on("entity-registration", function (context) {
+
+                $data.Class.define("$entity.DataItem", $data.Entity, null, {
+                    'shortid': { 'type': 'Edm.String' },
+                    'name': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
+                    'dataJson': { 'type': 'Edm.String' }
+                }, null);
+
+                $entity.DataItem.prototype.toString = function () {
+                    return "DataItem " + (this.name || "");
+                };
+
+                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/data/public/js/main_embed.js b/extension/data/public/js/main_embed.js
new file mode 100644
index 0000000000000000000000000000000000000000..2b23539b222668efd206b9718edf0b66f04aa5b8
--- /dev/null
+++ b/extension/data/public/js/main_embed.js
@@ -0,0 +1,82 @@
+/*! 
+ * Copyright(c) 2014 Jan Blaha 
+ */
+
+define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.standard.model", "./data.template.standard.view",
+        "core/aceBinder"],
+    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView, aceBinder) {
+
+        return app.module("data", function (module) {
+
+            var TemplateView = ViewBase.extend({
+                template: "embed-data-template-extension",
+
+                initialize: function() {
+                    _.bindAll(this, "getItems");
+                },
+
+                getItems: function () {
+                    return this.model.items;
+                },
+
+                onDomRefresh: function() {
+                    this.contentEditor = ace.edit("contentArea");
+                    this.contentEditor.setTheme("ace/theme/chrome");
+                    this.contentEditor.getSession().setMode("ace/mode/json");
+                    this.contentEditor.setOptions({
+                        enableBasicAutocompletion: true,
+                        enableSnippets: true,
+                        readOnly: true
+                    });
+
+                    aceBinder(this.model, "dataJson", this.contentEditor);
+                }
+            });
+
+
+            app.on("extensions-menu-render", function(context) {
+                context.result += "<li><a id='dataMenuCommand'><i class='fa fa-file'></i></a></li>";
+
+//                context.beforeRenderListeners.add(function(req, cb) {
+//                    if (parent.jsreport)
+//                        req.data = parent.jsreport.data;
+//                    cb();
+//                });
+
+                context.on("after-render", function($el) {
+                    $($el).find("#dataMenuCommand").click(function() {
+                        var model = new TemplateStandardModel();
+                        model.setTemplate(context.template);
+
+                        model.fetch({ success: function () {
+                            if (parent && parent.jsreport && parent.jsreport.data) {
+                                model.dataJson = JSON.stringify(parent.jsreport.data);
+                            }
+
+                            var view = new TemplateView({ model: model});
+                            context.region.show(view, "data");
+                        }});
+                    });
+                });
+            });
+
+
+            app.on("entity-registration", function (context) {
+                $data.Class.define("$entity.DataItem", $data.Entity, null, {
+                    'shortid': { 'type': 'Edm.String' },
+                    'name': { 'type': 'Edm.String' },
+                    "creationDate": { type: "date" },
+                    "modificationDate": { type: "date" },
+                    'dataJson': { 'type': 'Edm.String' }
+                }, null);
+
+                $entity.DataItem.prototype.toString = function () {
+                    return "DataItem " + (this.name || "");
+                };
+
+                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
+            });
+        });
+    });
\ No newline at end of file
diff --git a/extension/data/public/templates/embed-data-template-extension.html b/extension/data/public/templates/embed-data-template-extension.html
new file mode 100644
index 0000000000000000000000000000000000000000..22e5b3c5b6ab6892db17762f0e7f8fac3e5cff41
--- /dev/null
+++ b/extension/data/public/templates/embed-data-template-extension.html
@@ -0,0 +1,13 @@
+<div class="btn-group" data-binding="shortid">
+    <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+    <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
+        <span class="caret"></span>
+    </button>
+    <ul class="dropdown-menu pull-right" role="menu">
+        {{for ~getItems()}}
+        <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
+        {{/for}}
+    </ul>
+</div>
+
+<div id="contentArea" class="full-content-top-gap">{{:dataJson}}</div>

From c34f001dfe1e1980890f4bc024531ab5fda5c5c9 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Fri, 17 Oct 2014 16:13:10 +0200
Subject: [PATCH] examples for embedding

---
 extension/data/lib/data.js                         | 22 +++++++--
 .../data/public/js/data.template.standard.model.js | 47 +++++++++++++++---
 extension/data/public/js/main.js                   | 47 +++++++++++++++---
 extension/data/public/js/main_embed.js             | 57 +++++++++++++---------
 4 files changed, 128 insertions(+), 45 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 2917072a0035b6ddb9fe0c7a86cc520aafa45c26..961bf5c62d8d16b3d7f08bf82f275fd74e5ffb9b 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -28,8 +28,15 @@ var Data = function (reporter, definition) {
         modificationDate: { type: "date" }
     });
 
+    this.DataItemRefType = this.reporter.dataProvider.createEntityType("DataItemRefType", {
+        dataJson: { type: "string" },
+        shortid: { type: "string" }
+    });
+
     this.reporter.dataProvider.registerEntitySet("data", this.DataItemType, { tableOptions: { humanReadableKeys: [ "shortid"] }});
 
+    this.reporter.templates.TemplateType.addMember("data", { type: this.DataItemRefType });
+
     reporter.templates.TemplateType.addMember("dataItemId", { type: "string" });
 
     this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
@@ -44,22 +51,27 @@ Data.prototype.handleBeforeRender = function (request, response) {
         return q();
     }
 
-    if (!request.data && !request.template.dataItemId && !request.template.dataItem) {
-        this.reporter.logger.debug("No data specified.");
+    //back compatibility
+    if (!request.template.data && request.template.dataItemId) {
+        request.template.data = { shortid: request.template.dataItemId}
+    }
+
+    if (!request.template.data || (!request.template.data.shortid && !request.template.data.dataJson)) {
+        this.reporter.logger.debug("Data item not defined for this template.");
         return q();
     }
 
     var self = this;
 
     function findDataItem() {
-        if (request.template.dataItem)
-            return q(request.template.dataItem);
+        if (request.template.data.dataJson)
+            return q(request.template.data);
 
         self.reporter.logger.debug("Searching for dataItem to apply");
 
         return request.context.data.single(function (d) {
             return d.shortid === this.id;
-        }, { id: request.template.dataItemId });
+        }, { id: request.template.data.shortid });
     }
 
     return findDataItem().then(function (di) {
diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
index 0aec0c269a4cc48940011c9602a3baca6a6f8bac..93818121ac85f9aad49b72fc3931f8b6fa013dd2 100644
--- a/extension/data/public/js/data.template.standard.model.js
+++ b/extension/data/public/js/data.template.standard.model.js
@@ -7,14 +7,36 @@
             
             app.dataContext.data.toArray().then(function (items) {
                 self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
+
+                var data = self.templateModel.get("data");
+
+                if (!data) {
+                    data = new $entity.DataItemRefType();
+
+                    //back compatibility
+                    if (self.templateModel.get("dataItemId")) {
+                        data.shortid = self.templateModel.get("dataItemId");
+                    }
+
+                    self.templateModel.set("data", data);
+                }
+
+
+                var custom = { name: "- custom -", shortid: "custom", dataJson:   data.dataJson};
+                self.items.unshift(custom);
+
+                var empty = { name: "- not selected -", shortid: null };
                 self.items.unshift(empty);
 
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
+                if (!data.dataJson && !data.shortid)
+                    self.set(empty, { silent: true });
+
+                if (data.shortid)
+                    self.set(_.findWhere(items, { shortid: data.shortid }).toJSON(), { silent: true });
+
+                if (data.dataJson)
+                    self.set(custom, { silent: true });
+
                 return options.success();
             });
         },
@@ -30,10 +52,19 @@
 
         initialize: function () {
             var self = this;
+
             this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.templateModel.get("data").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
+                self.templateModel.get("data").dataJson = self.get("shortid") === "custom" ? self.get("content") : undefined;
                 self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
             });
-        },
+
+            this.listenTo(this, "change:dataJson", function() {
+                if (self.get("shortid") === "custom") {
+                    self.templateModel.get("data").dataJson = self.get("dataJson");
+                    _.findWhere(self.items, { shortid: "custom" }).dataJson = self.get("dataJson");
+                }
+            });
+        }
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index fa72e57d92dd28fabc828a6b6bc0040676f8da74..e1062106b9263161279c4a2d50add9e2bc6de010 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -209,14 +209,36 @@ define('data.template.standard.model',["app", "core/basicModel", "underscore"],
             
             app.dataContext.data.toArray().then(function (items) {
                 self.items = items.map(function(i) { return i.initData; });
-                var empty = { name: "- not selected -", shortid: null, _id: null };
+
+                var data = self.templateModel.get("data");
+
+                if (!data) {
+                    data = new $entity.DataItemRefType();
+
+                    //back compatibility
+                    if (self.templateModel.get("dataItemId")) {
+                        data.shortid = self.templateModel.get("dataItemId");
+                    }
+
+                    self.templateModel.set("data", data);
+                }
+
+
+                var custom = { name: "- custom -", shortid: "custom", dataJson:   data.dataJson};
+                self.items.unshift(custom);
+
+                var empty = { name: "- not selected -", shortid: null };
                 self.items.unshift(empty);
 
-                if (self.templateModel.get("dataItemId"))
-                  self.set(_.findWhere(items, { shortid: self.templateModel.get("dataItemId") }).toJSON(), { silent: true });
-                else 
-                  self.set(empty, { silent: true });
-                
+                if (!data.dataJson && !data.shortid)
+                    self.set(empty, { silent: true });
+
+                if (data.shortid)
+                    self.set(_.findWhere(items, { shortid: data.shortid }).toJSON(), { silent: true });
+
+                if (data.dataJson)
+                    self.set(custom, { silent: true });
+
                 return options.success();
             });
         },
@@ -232,11 +254,20 @@ define('data.template.standard.model',["app", "core/basicModel", "underscore"],
 
         initialize: function () {
             var self = this;
+
             this.listenTo(this, "change:shortid", function() {
-                self.templateModel.set("dataItemId", self.get("shortid"));
+                self.templateModel.get("data").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
+                self.templateModel.get("data").dataJson = self.get("shortid") === "custom" ? self.get("content") : undefined;
                 self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
             });
-        },
+
+            this.listenTo(this, "change:dataJson", function() {
+                if (self.get("shortid") === "custom") {
+                    self.templateModel.get("data").dataJson = self.get("dataJson");
+                    _.findWhere(self.items, { shortid: "custom" }).dataJson = self.get("dataJson");
+                }
+            });
+        }
     });
 });
 define(["app", "marionette", "backbone",
diff --git a/extension/data/public/js/main_embed.js b/extension/data/public/js/main_embed.js
index 2b23539b222668efd206b9718edf0b66f04aa5b8..29152f51be114c7061db460882f1d818aac72b54 100644
--- a/extension/data/public/js/main_embed.js
+++ b/extension/data/public/js/main_embed.js
@@ -11,7 +11,7 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
             var TemplateView = ViewBase.extend({
                 template: "embed-data-template-extension",
 
-                initialize: function() {
+                initialize: function () {
                     _.bindAll(this, "getItems");
                 },
 
@@ -19,7 +19,7 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     return this.model.items;
                 },
 
-                onDomRefresh: function() {
+                onDomRefresh: function () {
                     this.contentEditor = ace.edit("contentArea");
                     this.contentEditor.setTheme("ace/theme/chrome");
                     this.contentEditor.getSession().setMode("ace/mode/json");
@@ -33,29 +33,31 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                 }
             });
 
-
-            app.on("extensions-menu-render", function(context) {
+            app.on("extensions-menu-render", function (context) {
                 context.result += "<li><a id='dataMenuCommand'><i class='fa fa-file'></i></a></li>";
 
-//                context.beforeRenderListeners.add(function(req, cb) {
-//                    if (parent.jsreport)
-//                        req.data = parent.jsreport.data;
-//                    cb();
-//                });
-
-                context.on("after-render", function($el) {
-                    $($el).find("#dataMenuCommand").click(function() {
-                        var model = new TemplateStandardModel();
-                        model.setTemplate(context.template);
-
-                        model.fetch({ success: function () {
-                            if (parent && parent.jsreport && parent.jsreport.data) {
-                                model.dataJson = JSON.stringify(parent.jsreport.data);
-                            }
-
-                            var view = new TemplateView({ model: model});
-                            context.region.show(view, "data");
-                        }});
+                context.beforeRenderListeners.add(function(req, cb) {
+                    if (parent && parent.jsreport && parent.jsreport.template.data) {
+                        req.data = JSON.stringify(parent.jsreport.template.data);
+                    }
+
+                    cb();
+                });
+
+                context.on("after-render", function ($el) {
+                    var model = new TemplateStandardModel();
+                    model.setTemplate(context.template);
+
+                    model.fetch({ success: function () {
+                        if (parent && parent.jsreport && parent.jsreport.template.data) {
+                            model.set("shortid", "custom");
+                            model.set("dataJson", JSON.stringify(parent.jsreport.template.data, undefined, 2));
+                        }
+                    } });
+
+                    $($el).find("#dataMenuCommand").click(function () {
+                        var view = new TemplateView({ model: model});
+                        context.region.show(view, "data");
                     });
                 });
             });
@@ -74,7 +76,14 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     return "DataItem " + (this.name || "");
                 };
 
-                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
+                    dataJson: { type: 'Edm.String' },
+                    shortid: { type: 'Edm.String' }
+                });
+
+
+                $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
+
                 $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
                 context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
             });

From 1daa0bc62e2419417f43c67d54fee7fd4f482db3 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 21 Oct 2014 12:04:40 +0200
Subject: [PATCH] finalizing first prototype of embedding

---
 extension/data/public/js/data.template.standard.view.js |  2 +-
 extension/data/public/js/main.js                        | 12 +++++++++---
 extension/data/public/js/main_dev.js                    | 10 ++++++++--
 3 files changed, 18 insertions(+), 6 deletions(-)

diff --git a/extension/data/public/js/data.template.standard.view.js b/extension/data/public/js/data.template.standard.view.js
index 0f3053b1449a4747567048aaed77a4f99b5e32a1..0734edf88e484fc41b359f6d22bc11a3edf689ad 100644
--- a/extension/data/public/js/data.template.standard.view.js
+++ b/extension/data/public/js/data.template.standard.view.js
@@ -8,7 +8,7 @@
         },
 
         isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
+            return this.model.get("shortid") || this.model.get("dataJson");
         },
         
         getItems: function () {
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index e1062106b9263161279c4a2d50add9e2bc6de010..6e3e6fa4c81dc311d0dcb729a5a2cf7a257b740b 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -127,7 +127,7 @@ define('data.template.standard.view',["app", "marionette", "core/view.base", "co
         },
 
         isFilled: function() {
-            return this.model.templateModel.get("dataItemId");
+            return this.model.get("shortid") || this.model.get("dataJson");
         },
         
         getItems: function () {
@@ -341,7 +341,6 @@ define(["app", "marionette", "backbone",
             });
 
             app.on("entity-registration", function (context) {
-
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
                     'shortid': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
@@ -354,7 +353,14 @@ define(["app", "marionette", "backbone",
                     return "DataItem " + (this.name || "");
                 };
 
-                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
+                    dataJson: { type: 'Edm.String' },
+                    shortid: { type: 'Edm.String' }
+                });
+
+
+                $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
+
                 $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
                 context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
             });
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index ab14fd3e71777d50594f5dc7afa183a5b8b5c075..9150cccbb615bfd4725dd399b83984462811362e 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -69,7 +69,6 @@
             });
 
             app.on("entity-registration", function (context) {
-
                 $data.Class.define("$entity.DataItem", $data.Entity, null, {
                     'shortid': { 'type': 'Edm.String' },
                     'name': { 'type': 'Edm.String' },
@@ -82,7 +81,14 @@
                     return "DataItem " + (this.name || "");
                 };
 
-                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+                $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
+                    dataJson: { type: 'Edm.String' },
+                    shortid: { type: 'Edm.String' }
+                });
+
+
+                $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
+
                 $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
                 context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
             });

From 53845223f8b6baaff4230db61e7c05a2364bea64 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sat, 1 Nov 2014 14:42:45 +0100
Subject: [PATCH] ui tests

---
 extension/data/public/js/main_dev.js |  2 +-
 extension/data/test/ui/dataTest.js   | 18 ++++++++++++++++++
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 9150cccbb615bfd4725dd399b83984462811362e..e9e9d08413e32ed9c12da1a121088866ebe196fb 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -53,7 +53,7 @@
             });
 
             app.on("menu-actions-render", function (context) {
-                context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
+                context.result += "<li><a id='createDataCommand' href='#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
             });
 
 
diff --git a/extension/data/test/ui/dataTest.js b/extension/data/test/ui/dataTest.js
new file mode 100644
index 0000000000000000000000000000000000000000..5883ce62763aac67958b8ff6bd165e3196d0cda5
--- /dev/null
+++ b/extension/data/test/ui/dataTest.js
@@ -0,0 +1,18 @@
+﻿describe('data', function () {
+
+    this.timeout(5000);
+
+    beforeEach(function(done) {
+        window.location.hash = "";
+        ensureStarted(done);
+    });
+
+    it('should not fail', function (done) {
+        require(["jquery"], function ($) {
+            window.location.hash = "/extension/data/detail";
+            setTimeout(function() {
+                done();
+            }, 500);
+        });
+    });
+});

From a2fd7a1a40420fe6f838088a5fb3c5ea190ef3fa Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 12:57:33 +0100
Subject: [PATCH] refactoring embedded

---
 .../data/public/js/data.template.standard.model.js |  1 +
 extension/data/public/js/entityRegistration.js     | 28 ++++++++++++++++++++
 extension/data/public/js/main.js                   |  5 +++-
 extension/data/public/js/main_dev.js               | 30 +++-------------------
 extension/data/public/js/main_embed.js             | 30 +++-------------------
 5 files changed, 41 insertions(+), 53 deletions(-)

diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
index 93818121ac85f9aad49b72fc3931f8b6fa013dd2..dbb08d259520d6df8ceb7d3a6838fd80e2a324fd 100644
--- a/extension/data/public/js/data.template.standard.model.js
+++ b/extension/data/public/js/data.template.standard.model.js
@@ -13,6 +13,7 @@
                 if (!data) {
                     data = new $entity.DataItemRefType();
 
+                    console.log(self.templateModel.get("dataItemId"));
                     //back compatibility
                     if (self.templateModel.get("dataItemId")) {
                         data.shortid = self.templateModel.get("dataItemId");
diff --git a/extension/data/public/js/entityRegistration.js b/extension/data/public/js/entityRegistration.js
new file mode 100644
index 0000000000000000000000000000000000000000..63d0c38c503d7759d6f7ec20d211a72aea730fa7
--- /dev/null
+++ b/extension/data/public/js/entityRegistration.js
@@ -0,0 +1,28 @@
+define([], function() {
+    return function(context) {
+        $data.Class.define("$entity.DataItem", $data.Entity, null, {
+            'shortid': { 'type': 'Edm.String' },
+            'name': { 'type': 'Edm.String' },
+            "creationDate": { type: "date" },
+            "modificationDate": { type: "date" },
+            'dataJson': { 'type': 'Edm.String' }
+        }, null);
+
+        $entity.DataItem.prototype.toString = function () {
+            return "DataItem " + (this.name || "");
+        };
+
+        $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
+            dataJson: { type: 'Edm.String' },
+            shortid: { type: 'Edm.String' }
+        });
+
+
+        $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
+        //back compatibility
+        $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+
+        $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+        context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
+    }
+});
\ No newline at end of file
diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
index 6e3e6fa4c81dc311d0dcb729a5a2cf7a257b740b..c0a160cfcf19a3e1626f53578a29893ae22faaad 100644
--- a/extension/data/public/js/main.js
+++ b/extension/data/public/js/main.js
@@ -215,6 +215,7 @@ define('data.template.standard.model',["app", "core/basicModel", "underscore"],
                 if (!data) {
                     data = new $entity.DataItemRefType();
 
+                    console.log(self.templateModel.get("dataItemId"));
                     //back compatibility
                     if (self.templateModel.get("dataItemId")) {
                         data.shortid = self.templateModel.get("dataItemId");
@@ -325,7 +326,7 @@ define(["app", "marionette", "backbone",
             });
 
             app.on("menu-actions-render", function (context) {
-                context.result += "<li><a href='/#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
+                context.result += "<li><a id='createDataCommand' href='#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
             });
 
 
@@ -360,6 +361,8 @@ define(["app", "marionette", "backbone",
 
 
                 $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
+                //back compatibility
+                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
 
                 $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
                 context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index e9e9d08413e32ed9c12da1a121088866ebe196fb..6d2ad4a624fec725b3bc8dfd587f1e57cfd39950 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -2,8 +2,9 @@
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
         "./data.template.standard.view",
-        "./data.toolbar.view", "./data.template.standard.model"],
-    function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateStandardView, ToolbarView, TemplateStandardModel) {
+        "./data.toolbar.view", "./data.template.standard.model", "./entityRegistration"],
+    function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView,
+              TemplateStandardView, ToolbarView, TemplateStandardModel, entityRegistration) {
 
         app.module("data", function (module) {
             var Router = Backbone.Router.extend({
@@ -68,29 +69,6 @@
                 }});
             });
 
-            app.on("entity-registration", function (context) {
-                $data.Class.define("$entity.DataItem", $data.Entity, null, {
-                    'shortid': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
-                    'dataJson': { 'type': 'Edm.String' }
-                }, null);
-
-                $entity.DataItem.prototype.toString = function () {
-                    return "DataItem " + (this.name || "");
-                };
-
-                $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
-                    dataJson: { type: 'Edm.String' },
-                    shortid: { type: 'Edm.String' }
-                });
-
-
-                $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
-
-                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-            });
+            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file
diff --git a/extension/data/public/js/main_embed.js b/extension/data/public/js/main_embed.js
index 29152f51be114c7061db460882f1d818aac72b54..2bb078370bc52ff8eea35d0e4ad039e296155305 100644
--- a/extension/data/public/js/main_embed.js
+++ b/extension/data/public/js/main_embed.js
@@ -3,8 +3,9 @@
  */
 
 define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.standard.model", "./data.template.standard.view",
-        "core/aceBinder"],
-    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, TemplateStandardView, aceBinder) {
+        "core/aceBinder", "./entityRegistration"],
+    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel,
+              TemplateStandardView, aceBinder, entityRegistration) {
 
         return app.module("data", function (module) {
 
@@ -63,29 +64,6 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
             });
 
 
-            app.on("entity-registration", function (context) {
-                $data.Class.define("$entity.DataItem", $data.Entity, null, {
-                    'shortid': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
-                    'dataJson': { 'type': 'Edm.String' }
-                }, null);
-
-                $entity.DataItem.prototype.toString = function () {
-                    return "DataItem " + (this.name || "");
-                };
-
-                $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
-                    dataJson: { type: 'Edm.String' },
-                    shortid: { type: 'Edm.String' }
-                });
-
-
-                $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
-
-                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-            });
+            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file

From 5cfef74b5f1abd1194c97e8fc626a02e058eb2e3 Mon Sep 17 00:00:00 2001
From: Jan Blaha <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 13:50:28 +0100
Subject: [PATCH] delete built file

---
 extension/data/public/js/main.js | 371 ---------------------------------------
 1 file changed, 371 deletions(-)

diff --git a/extension/data/public/js/main.js b/extension/data/public/js/main.js
deleted file mode 100644
index c0a160cfcf19a3e1626f53578a29893ae22faaad..0000000000000000000000000000000000000000
--- a/extension/data/public/js/main.js
+++ /dev/null
@@ -1,371 +0,0 @@
-define('data.model',["app", "core/jaydataModel"], function(app, ModelBase) {
-
-    return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
-        },   
-        
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        }
-    });
-});
-define('data.list.model',["app", "backbone", "core/dataGrid", "data.model"], function (app, Backbone, DataGrid, DataModel) {
-    return Backbone.Collection.extend({
-
-        initialize: function () {
-            var self = this;
-            this.filter = new DataGrid.Filter.Base();
-            this.filter.bind("apply", function () {
-                self.fetch();
-            });
-        },
-        
-        parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
-
-            return data;
-        },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
-
-        model: DataModel,
-    });
-});
-
-
-
-
-define('data.list.view',["marionette", "core/dataGrid", "core/view.base"], function (Marionette, DataGrid, ViewBase) {
-    return ViewBase.extend({
-        template: "data-list",
-
-        initialize: function () {
-            this.listenTo(this.collection, "sync", this.render);
-            this.listenTo(this.collection, "remove", this.render);
-        },
-
-        onDomRefresh: function () {
-            this.dataGrid = DataGrid.show({
-                collection: this.collection,
-                filter: this.collection.filter,
-                idKey: "shortid",
-                onShowDetail: function (id) {
-                    window.location.hash = "extension/data/detail/" + id;
-                },
-                el: $("#schemaGridBox"),
-                headerTemplate: "data-list-header",
-                rowsTemplate: "data-list-rows"
-            });
-        },
-    });
-}); 
-define('data.list.toolbar.view',["jquery", "app", "core/utils", "core/view.base", "underscore"],
-    function ($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-list-toolbar",
-            
-            initialize: function () {
-            },
-         
-            
-            events: {
-                "click #deleteCommand": "deleteCommand",
-            },
-            
-            deleteCommand: function() {
-                this.contentView.dataGrid.deleteItems();
-            }
-        });
-    });
-
-
-define('data.detail.view',["marionette", "core/view.base", "core/aceBinder"], function(Marionette, ViewBase, aceBinder) {
-    return ViewBase.extend({
-        template: "data-detail",
-
-        initialize: function() {
-            var self = this;
-            this.listenTo(this.model, "sync", self.render);
-        },
-
-        onDomRefresh: function() {
-
-            var top = $("#contentWrap").position().top;
-
-            this.contentEditor = ace.edit("contentArea");
-            this.contentEditor.setTheme("ace/theme/chrome");
-            this.contentEditor.getSession().setMode("ace/mode/json");
-            this.contentEditor.setOptions({
-                enableBasicAutocompletion: true,
-                enableSnippets: true
-            });
-                
-            aceBinder(this.model, "dataJson", this.contentEditor);
-
-            $("#contentArea").css("margin-top", top);
-        },
-
-        validateLeaving: function() {
-            return !this.model.hasChangesSyncLastSync();
-        },
-    });
-});
-define('data.template.standard.view',["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.get("shortid") || this.model.get("dataJson");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
-define('data.toolbar.view',["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
-        return LayoutBase.extend({
-            template: "data-toolbar",
-
-            initialize: function() {
-                $(document).on('keydown.data-detail', this.hotkey.bind(this));
-            },
-
-            events: {
-                "click #saveCommand": "save",
-            },
-
-            save: function() {
-                if (!this.validate())
-                    return;
-
-                var self = this;
-                this.model.save({}, {
-                    success: function() {
-                        app.trigger("data-saved", self.model);
-                    }
-                });
-            },
-
-            hotkey: function(e) {
-                if (e.ctrlKey && e.which === 83) {
-                    this.save();
-                    e.preventDefault();
-                    return false;
-                }
-            },
-
-            onValidate: function() {
-                var res = [];
-
-                if (this.model.get("name") == null || this.model.get("name") == "")
-                    res.push({
-                        message: "Name cannot be empty"
-                    });
-
-                try {
-                    var json = JSON.parse(this.model.get("dataJson"));
-                } catch(e) {
-                    res.push({
-                        message: "Data must be valid JSON. e.g. { \"propertName\": \"propertyValue\"} <br/>" + e.toString()
-                    });
-                }
-
-                return res;
-            },
-
-            onClose: function() {
-                $(document).off(".data-detail");
-            }
-        });
-    });
-define('data.template.standard.model',["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-
-                var data = self.templateModel.get("data");
-
-                if (!data) {
-                    data = new $entity.DataItemRefType();
-
-                    console.log(self.templateModel.get("dataItemId"));
-                    //back compatibility
-                    if (self.templateModel.get("dataItemId")) {
-                        data.shortid = self.templateModel.get("dataItemId");
-                    }
-
-                    self.templateModel.set("data", data);
-                }
-
-
-                var custom = { name: "- custom -", shortid: "custom", dataJson:   data.dataJson};
-                self.items.unshift(custom);
-
-                var empty = { name: "- not selected -", shortid: null };
-                self.items.unshift(empty);
-
-                if (!data.dataJson && !data.shortid)
-                    self.set(empty, { silent: true });
-
-                if (data.shortid)
-                    self.set(_.findWhere(items, { shortid: data.shortid }).toJSON(), { silent: true });
-
-                if (data.dataJson)
-                    self.set(custom, { silent: true });
-
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
-        },
-
-        initialize: function () {
-            var self = this;
-
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.get("data").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
-                self.templateModel.get("data").dataJson = self.get("shortid") === "custom" ? self.get("content") : undefined;
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-
-            this.listenTo(this, "change:dataJson", function() {
-                if (self.get("shortid") === "custom") {
-                    self.templateModel.get("data").dataJson = self.get("dataJson");
-                    _.findWhere(self.items, { shortid: "custom" }).dataJson = self.get("dataJson");
-                }
-            });
-        }
-    });
-});
-define(["app", "marionette", "backbone",
-        "data.list.model", "data.list.view", "data.list.toolbar.view",
-        "data.model", "data.detail.view",
-        "data.template.standard.view",
-        "data.toolbar.view", "data.template.standard.model"],
-    function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView, TemplateStandardView, ToolbarView, TemplateStandardModel) {
-
-        app.module("data", function (module) {
-            var Router = Backbone.Router.extend({
-                initialize: function () {
-                    app.listenTo(app, "data-saved", function (model) {
-                        window.location.hash = "/extension/data/detail/" + model.get("shortid");
-                    });
-                },
-
-                routes: {
-                    "extension/data/list": "data",
-                    "extension/data/detail/:id": "dataDetail",
-                    "extension/data/detail": "dataDetail"
-                },
-
-                data: function () {
-                    this.navigate("/extension/data/list");
-
-                    var model = new DataListModel();
-
-                    app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
-
-
-                    model.fetch();
-                },
-
-                dataDetail: function (id) {
-                    var model = new DataModel();
-                    app.layout.showToolbarViewComposition(new DataDetailView({ model: model }), new ToolbarView({ model: model }));
-
-                    if (id != null) {
-                        model.set("shortid", id);
-                        model.fetch();
-                    }
-                }
-            });
-
-            app.data.on("created", function () {
-                app.data.router.data();
-            });
-
-            app.data.router = new Router();
-
-
-            app.on("menu-render", function (context) {
-                context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
-            });
-
-            app.on("menu-actions-render", function (context) {
-                context.result += "<li><a id='createDataCommand' href='#/extension/data/detail' class='validate-leaving'>Create Data</a></li>";
-            });
-
-
-            app.on("template-extensions-render", function (context) {
-
-                var model = new TemplateStandardModel();
-                model.setTemplate(context.template);
-
-                model.fetch({ success: function () {
-                    var view = new TemplateStandardView({ model: model});
-                    context.extensionsRegion.show(view, "data");
-                }});
-            });
-
-            app.on("entity-registration", function (context) {
-                $data.Class.define("$entity.DataItem", $data.Entity, null, {
-                    'shortid': { 'type': 'Edm.String' },
-                    'name': { 'type': 'Edm.String' },
-                    "creationDate": { type: "date" },
-                    "modificationDate": { type: "date" },
-                    'dataJson': { 'type': 'Edm.String' }
-                }, null);
-
-                $entity.DataItem.prototype.toString = function () {
-                    return "DataItem " + (this.name || "");
-                };
-
-                $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
-                    dataJson: { type: 'Edm.String' },
-                    shortid: { type: 'Edm.String' }
-                });
-
-
-                $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
-                //back compatibility
-                $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
-
-                $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-                context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-            });
-        });
-    });

From 94df0e45287fba544fc503582dc71f02c850bc9b Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Mon, 3 Nov 2014 15:22:04 +0100
Subject: [PATCH] finalizing 0.1.16

---
 .../data/public/js/data.entityRegistration.js      | 28 ++++++++++++++++++++++
 .../data/public/js/data.template.standard.model.js |  1 -
 extension/data/public/js/entityRegistration.js     | 28 ----------------------
 extension/data/public/js/main_dev.js               |  2 +-
 extension/data/public/js/main_embed.js             |  2 +-
 5 files changed, 30 insertions(+), 31 deletions(-)

diff --git a/extension/data/public/js/data.entityRegistration.js b/extension/data/public/js/data.entityRegistration.js
new file mode 100644
index 0000000000000000000000000000000000000000..63d0c38c503d7759d6f7ec20d211a72aea730fa7
--- /dev/null
+++ b/extension/data/public/js/data.entityRegistration.js
@@ -0,0 +1,28 @@
+define([], function() {
+    return function(context) {
+        $data.Class.define("$entity.DataItem", $data.Entity, null, {
+            'shortid': { 'type': 'Edm.String' },
+            'name': { 'type': 'Edm.String' },
+            "creationDate": { type: "date" },
+            "modificationDate": { type: "date" },
+            'dataJson': { 'type': 'Edm.String' }
+        }, null);
+
+        $entity.DataItem.prototype.toString = function () {
+            return "DataItem " + (this.name || "");
+        };
+
+        $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
+            dataJson: { type: 'Edm.String' },
+            shortid: { type: 'Edm.String' }
+        });
+
+
+        $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
+        //back compatibility
+        $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
+
+        $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
+        context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
+    }
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
index dbb08d259520d6df8ceb7d3a6838fd80e2a324fd..93818121ac85f9aad49b72fc3931f8b6fa013dd2 100644
--- a/extension/data/public/js/data.template.standard.model.js
+++ b/extension/data/public/js/data.template.standard.model.js
@@ -13,7 +13,6 @@
                 if (!data) {
                     data = new $entity.DataItemRefType();
 
-                    console.log(self.templateModel.get("dataItemId"));
                     //back compatibility
                     if (self.templateModel.get("dataItemId")) {
                         data.shortid = self.templateModel.get("dataItemId");
diff --git a/extension/data/public/js/entityRegistration.js b/extension/data/public/js/entityRegistration.js
deleted file mode 100644
index 63d0c38c503d7759d6f7ec20d211a72aea730fa7..0000000000000000000000000000000000000000
--- a/extension/data/public/js/entityRegistration.js
+++ /dev/null
@@ -1,28 +0,0 @@
-define([], function() {
-    return function(context) {
-        $data.Class.define("$entity.DataItem", $data.Entity, null, {
-            'shortid': { 'type': 'Edm.String' },
-            'name': { 'type': 'Edm.String' },
-            "creationDate": { type: "date" },
-            "modificationDate": { type: "date" },
-            'dataJson': { 'type': 'Edm.String' }
-        }, null);
-
-        $entity.DataItem.prototype.toString = function () {
-            return "DataItem " + (this.name || "");
-        };
-
-        $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
-            dataJson: { type: 'Edm.String' },
-            shortid: { type: 'Edm.String' }
-        });
-
-
-        $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
-        //back compatibility
-        $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
-
-        $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-        context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-    }
-});
\ No newline at end of file
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 6d2ad4a624fec725b3bc8dfd587f1e57cfd39950..e0e34b9fdd11d26f6728f4eeb1756b8087645f60 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -2,7 +2,7 @@
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
         "./data.template.standard.view",
-        "./data.toolbar.view", "./data.template.standard.model", "./entityRegistration"],
+        "./data.toolbar.view", "./data.template.standard.model", "./data.entityRegistration"],
     function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView,
               TemplateStandardView, ToolbarView, TemplateStandardModel, entityRegistration) {
 
diff --git a/extension/data/public/js/main_embed.js b/extension/data/public/js/main_embed.js
index 2bb078370bc52ff8eea35d0e4ad039e296155305..4ac73e999d9486f386dbcac4006d853bb3306366 100644
--- a/extension/data/public/js/main_embed.js
+++ b/extension/data/public/js/main_embed.js
@@ -3,7 +3,7 @@
  */
 
 define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.standard.model", "./data.template.standard.view",
-        "core/aceBinder", "./entityRegistration"],
+        "core/aceBinder", "./data.entityRegistration"],
     function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel,
               TemplateStandardView, aceBinder, entityRegistration) {
 

From 94c0e2c788bb64efaa65beb7e2018d25fb3fd877 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 12 Nov 2014 17:46:28 +0100
Subject: [PATCH] ui tests and refactoring

---
 extension/data/public/js/data.detail.view.js       |  2 +-
 .../data/public/js/data.entityRegistration.js      |  2 +-
 extension/data/public/js/data.list.model.js        |  2 +-
 extension/data/public/js/data.list.toolbar.view.js |  2 +-
 extension/data/public/js/data.list.view.js         |  2 +-
 extension/data/public/js/data.model.js             |  2 +-
 extension/data/public/js/data.template.model.js    | 68 +++++++++++++++++++
 .../data/public/js/data.template.standard.model.js | 70 --------------------
 .../data/public/js/data.template.standard.view.js  | 26 --------
 extension/data/public/js/data.template.view.js     | 26 ++++++++
 extension/data/public/js/data.toolbar.view.js      |  4 +-
 extension/data/public/js/main_dev.js               |  7 +-
 extension/data/public/js/main_embed.js             |  4 +-
 extension/data/test/dataTest.js                    |  4 +-
 extension/data/test/ui/dataTest.js                 | 77 ++++++++++++++++++++--
 15 files changed, 178 insertions(+), 120 deletions(-)

diff --git a/extension/data/public/js/data.detail.view.js b/extension/data/public/js/data.detail.view.js
index d82de31137a473402e9d6a62d9248960151a5e12..20963c9e96ee29852bfd4a3f82f332cde5bea86b 100644
--- a/extension/data/public/js/data.detail.view.js
+++ b/extension/data/public/js/data.detail.view.js
@@ -26,6 +26,6 @@
 
         validateLeaving: function() {
             return !this.model.hasChangesSyncLastSync();
-        },
+        }
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/js/data.entityRegistration.js b/extension/data/public/js/data.entityRegistration.js
index 63d0c38c503d7759d6f7ec20d211a72aea730fa7..ae002e666d28955fa31567260d200418510db1d2 100644
--- a/extension/data/public/js/data.entityRegistration.js
+++ b/extension/data/public/js/data.entityRegistration.js
@@ -24,5 +24,5 @@ define([], function() {
 
         $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
         context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-    }
+    };
 });
\ No newline at end of file
diff --git a/extension/data/public/js/data.list.model.js b/extension/data/public/js/data.list.model.js
index 06f21d4bfd89fc0b5bd3af389891b5fab877def9..f80d8a9f01e70265434e7fc1d64a701012020cb3 100644
--- a/extension/data/public/js/data.list.model.js
+++ b/extension/data/public/js/data.list.model.js
@@ -20,7 +20,7 @@
             return app.dataContext.data.applyFilter(this.filter).toArray();
         },
 
-        model: DataModel,
+        model: DataModel
     });
 });
 
diff --git a/extension/data/public/js/data.list.toolbar.view.js b/extension/data/public/js/data.list.toolbar.view.js
index 82194ca208a82851aec2faa5faebc6ca627da03a..e9491f598d4d042428b9701d112c2c3e46d333fe 100644
--- a/extension/data/public/js/data.list.toolbar.view.js
+++ b/extension/data/public/js/data.list.toolbar.view.js
@@ -8,7 +8,7 @@
          
             
             events: {
-                "click #deleteCommand": "deleteCommand",
+                "click #deleteCommand": "deleteCommand"
             },
             
             deleteCommand: function() {
diff --git a/extension/data/public/js/data.list.view.js b/extension/data/public/js/data.list.view.js
index e5048add5b9c1b5e138673e1cd5fedd8da738900..75ecd3cd9b1df289ba0794ffeb57a27693d3e7d5 100644
--- a/extension/data/public/js/data.list.view.js
+++ b/extension/data/public/js/data.list.view.js
@@ -19,6 +19,6 @@
                 headerTemplate: "data-list-header",
                 rowsTemplate: "data-list-rows"
             });
-        },
+        }
     });
 }); 
\ No newline at end of file
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index 05819d81766849b421693bd7d0ae872490ce14dd..eb9a9abd8ba5c0d5f6a1b55a655186d5e1ede928 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -4,7 +4,7 @@
         contextSet: function() { return app.dataContext.data; },
 
         fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid == this.id; }, { id: this.get("shortid") });
+            return this.contextSet().single(function(r) { return r.shortid === this.id; }, { id: this.get("shortid") });
         },   
         
         _initialize: function() {
diff --git a/extension/data/public/js/data.template.model.js b/extension/data/public/js/data.template.model.js
new file mode 100644
index 0000000000000000000000000000000000000000..77f83c528a8f1cf17177a130bef826339cfe260c
--- /dev/null
+++ b/extension/data/public/js/data.template.model.js
@@ -0,0 +1,68 @@
+﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+   
+    return ModelBase.extend({
+        
+        fetch: function (options) {
+            var self = this;
+            
+            return app.dataContext.data.toArray().then(function (items) {
+                self.items = items.map(function(i) { return i.initData; });
+
+                var data = self.templateModel.get("data");
+
+                if (!data) {
+                    data = new $entity.DataItemRefType();
+
+                    //back compatibility
+                    if (self.templateModel.get("dataItemId")) {
+                        data.shortid = self.templateModel.get("dataItemId");
+                    }
+
+                    self.templateModel.set("data", data);
+                }
+
+
+                var custom = { name: "- custom -", shortid: "custom", dataJson:   data.dataJson};
+                self.items.unshift(custom);
+
+                var empty = { name: "- not selected -", shortid: null };
+                self.items.unshift(empty);
+
+                if (!data.dataJson && !data.shortid)
+                    self.set(empty, { silent: true });
+
+                if (data.shortid)
+                    self.set(_.findWhere(items, { shortid: data.shortid }).toJSON(), { silent: true });
+
+                if (data.dataJson)
+                    self.set(custom, { silent: true });
+            });
+        },
+
+        setTemplate: function (templateModel) {
+            this.templateModel = templateModel;
+            this.listenTo(templateModel, "api-overrides", this.apiOverride);
+        },
+        
+        apiOverride: function(addProperty) {
+            addProperty("dataItemId", this.get("shortid"));
+        },
+
+        initialize: function () {
+            var self = this;
+
+            this.listenTo(this, "change:shortid", function() {
+                self.templateModel.get("data").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
+                self.templateModel.get("data").dataJson = self.get("shortid") === "custom" ? self.get("content") : undefined;
+                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
+            });
+
+            this.listenTo(this, "change:dataJson", function() {
+                if (self.get("shortid") === "custom") {
+                    self.templateModel.get("data").dataJson = self.get("dataJson");
+                    _.findWhere(self.items, { shortid: "custom" }).dataJson = self.get("dataJson");
+                }
+            });
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.standard.model.js b/extension/data/public/js/data.template.standard.model.js
deleted file mode 100644
index 93818121ac85f9aad49b72fc3931f8b6fa013dd2..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.template.standard.model.js
+++ /dev/null
@@ -1,70 +0,0 @@
-﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
-   
-    return ModelBase.extend({
-        
-        fetch: function (options) {
-            var self = this;
-            
-            app.dataContext.data.toArray().then(function (items) {
-                self.items = items.map(function(i) { return i.initData; });
-
-                var data = self.templateModel.get("data");
-
-                if (!data) {
-                    data = new $entity.DataItemRefType();
-
-                    //back compatibility
-                    if (self.templateModel.get("dataItemId")) {
-                        data.shortid = self.templateModel.get("dataItemId");
-                    }
-
-                    self.templateModel.set("data", data);
-                }
-
-
-                var custom = { name: "- custom -", shortid: "custom", dataJson:   data.dataJson};
-                self.items.unshift(custom);
-
-                var empty = { name: "- not selected -", shortid: null };
-                self.items.unshift(empty);
-
-                if (!data.dataJson && !data.shortid)
-                    self.set(empty, { silent: true });
-
-                if (data.shortid)
-                    self.set(_.findWhere(items, { shortid: data.shortid }).toJSON(), { silent: true });
-
-                if (data.dataJson)
-                    self.set(custom, { silent: true });
-
-                return options.success();
-            });
-        },
-
-        setTemplate: function (templateModel) {
-            this.templateModel = templateModel;
-            this.listenTo(templateModel, "api-overrides", this.apiOverride);
-        },
-        
-        apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
-        },
-
-        initialize: function () {
-            var self = this;
-
-            this.listenTo(this, "change:shortid", function() {
-                self.templateModel.get("data").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
-                self.templateModel.get("data").dataJson = self.get("shortid") === "custom" ? self.get("content") : undefined;
-                self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
-            });
-
-            this.listenTo(this, "change:dataJson", function() {
-                if (self.get("shortid") === "custom") {
-                    self.templateModel.get("data").dataJson = self.get("dataJson");
-                    _.findWhere(self.items, { shortid: "custom" }).dataJson = self.get("dataJson");
-                }
-            });
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.standard.view.js b/extension/data/public/js/data.template.standard.view.js
deleted file mode 100644
index 0734edf88e484fc41b359f6d22bc11a3edf689ad..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.template.standard.view.js
+++ /dev/null
@@ -1,26 +0,0 @@
-﻿define(["app", "marionette", "core/view.base", "core/utils"], function(app, Marionette, ViewBase, Utils) {
-    return ViewBase.extend({
-        tagName: "li",
-        template: "data-template-extension-standard",
-         
-        initialize: function() {
-            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
-        },
-
-        isFilled: function() {
-            return this.model.get("shortid") || this.model.get("dataJson");
-        },
-        
-        getItems: function () {
-            return this.model.items;
-        },
-        
-        getItemsLength: function () {
-            return this.model.items.length;
-        },
-        
-        onClose: function() {
-            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
-        }
-    });
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.view.js b/extension/data/public/js/data.template.view.js
new file mode 100644
index 0000000000000000000000000000000000000000..fc3871ff03a6f534b1e13914f5e0753cd153c3cb
--- /dev/null
+++ b/extension/data/public/js/data.template.view.js
@@ -0,0 +1,26 @@
+﻿define(["app", "marionette", "underscore",  "core/view.base", "core/utils"], function(app, Marionette, _, ViewBase, Utils) {
+    return ViewBase.extend({
+        tagName: "li",
+        template: "data-template-extension-standard",
+         
+        initialize: function() {
+            _.bindAll(this, "isFilled", "getItems", "getItemsLength");
+        },
+
+        isFilled: function() {
+            return this.model.get("shortid") || this.model.get("dataJson");
+        },
+        
+        getItems: function () {
+            return this.model.items;
+        },
+        
+        getItemsLength: function () {
+            return this.model.items.length;
+        },
+        
+        onClose: function() {
+            this.model.templateModel.unbind("api-overrides", this.model.apiOverride, this.model);
+        }
+    });
+});
\ No newline at end of file
diff --git a/extension/data/public/js/data.toolbar.view.js b/extension/data/public/js/data.toolbar.view.js
index 30303467125da3998ee254f5c88f713240bde179..08f0033c5e88695a2cc02c103cc61cdf6644e764 100644
--- a/extension/data/public/js/data.toolbar.view.js
+++ b/extension/data/public/js/data.toolbar.view.js
@@ -8,7 +8,7 @@
             },
 
             events: {
-                "click #saveCommand": "save",
+                "click #saveCommand": "save"
             },
 
             save: function() {
@@ -34,7 +34,7 @@
             onValidate: function() {
                 var res = [];
 
-                if (this.model.get("name") == null || this.model.get("name") == "")
+                if (this.model.get("name") == null || this.model.get("name") === "")
                     res.push({
                         message: "Name cannot be empty"
                     });
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index e0e34b9fdd11d26f6728f4eeb1756b8087645f60..cf8928d8536b62efb1211b8a8100201050929212 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -1,8 +1,8 @@
 ﻿define(["app", "marionette", "backbone",
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
-        "./data.template.standard.view",
-        "./data.toolbar.view", "./data.template.standard.model", "./data.entityRegistration"],
+        "./data.template.view",
+        "./data.toolbar.view", "./data.template.model", "./data.entityRegistration"],
     function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView,
               TemplateStandardView, ToolbarView, TemplateStandardModel, entityRegistration) {
 
@@ -24,10 +24,7 @@
                     this.navigate("/extension/data/list");
 
                     var model = new DataListModel();
-
                     app.layout.showToolbarViewComposition(new DataListView({ collection: model }), new DataListToolbarView({ collection: model }));
-
-
                     model.fetch();
                 },
 
diff --git a/extension/data/public/js/main_embed.js b/extension/data/public/js/main_embed.js
index 4ac73e999d9486f386dbcac4006d853bb3306366..a45a01fc30e54ed94fa4aa070a237ce4b319f9da 100644
--- a/extension/data/public/js/main_embed.js
+++ b/extension/data/public/js/main_embed.js
@@ -2,9 +2,9 @@
  * Copyright(c) 2014 Jan Blaha 
  */
 
-define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.standard.model", "./data.template.standard.view",
+define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.model", "./data.template.view",
         "core/aceBinder", "./data.entityRegistration"],
-    function ($, underscore, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel,
+    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel,
               TemplateStandardView, aceBinder, entityRegistration) {
 
         return app.module("data", function (module) {
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 6fc645489ae93af455f1e050d75880d469b6878b..8d0d28e740d4a8f0d771b221cc9f14d236f27728 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -1,6 +1,4 @@
-﻿/*globals describe, it, beforeEach, afterEach */
-
-var assert = require("assert"),
+﻿var assert = require("assert"),
     path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 
diff --git a/extension/data/test/ui/dataTest.js b/extension/data/test/ui/dataTest.js
index 5883ce62763aac67958b8ff6bd165e3196d0cda5..86db88af0069a968111f91dc6d5fa7f4b9e31c02 100644
--- a/extension/data/test/ui/dataTest.js
+++ b/extension/data/test/ui/dataTest.js
@@ -1,18 +1,83 @@
 ﻿describe('data', function () {
-
     this.timeout(5000);
 
-    beforeEach(function(done) {
+    beforeEach(function (done) {
         window.location.hash = "";
         ensureStarted(done);
     });
 
-    it('should not fail', function (done) {
-        require(["jquery"], function ($) {
+    describe('nagivation', function () {
+        it('/extension/data/list should go to list', function (done) {
+            window.location.hash = "/extension/data/list";
+            expect("#schemaGridBox").to.be.shown(done);
+        });
+
+        it('/extension/data/detail should go to detail', function (done) {
             window.location.hash = "/extension/data/detail";
-            setTimeout(function() {
+            expect("#contentWrap").to.be.shown(done);
+        });
+    });
+
+    describe('model', function () {
+        var originalDataContext;
+        var SUT;
+        var templateModel;
+        var app;
+
+        beforeEach(function (done) {
+            require(["app", "data/data.template.model", "templates/template.model"], function (_app, Model, TemplateModel) {
+                originalDataContext = _app.dataContext;
+
+                app = _app;
+                SUT = new Model();
+                templateModel = new TemplateModel();
+                SUT.setTemplate(templateModel);
+                done();
+            });
+        });
+
+        afterEach(function (done) {
+            require(["app"], function (app) {
+                app.dataContext = originalDataContext;
+                done();
+            });
+        });
+
+        it("fetch should add default items", function (done) {
+            app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([]))}};
+            SUT.fetch().then(function () {
+                expect(SUT.items.length).to.be.eql(2);
+                expect(SUT.get("shortid")).to.be.eql(null);
+                done();
+            });
+        });
+
+        it("fetch should select proper item based on template.data.shortid", function (done) {
+            templateModel.set("data", {shortid: "foo"});
+            app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([new $entity.DataItem({shortid: "foo"})]))}};
+
+            SUT.fetch().then(function () {
+                expect(SUT.get("shortid")).to.be.eql("foo");
+                done();
+            });
+        });
+
+        it("changing shortid should propagate changes to template and reload selected object", function (done) {
+            app.dataContext = {
+                data: {
+                    toArray: sinon.stub().returns($.Deferred().resolve([new $entity.DataItem({
+                        shortid: "foo",
+                        dataJson: "{}"
+                    })]))
+                }
+            };
+
+            SUT.fetch().then(function () {
+                SUT.set("shortid", "foo");
+                expect(templateModel.get("data").shortid).to.be.eql("foo");
+                expect(SUT.get("dataJson")).to.be.eql("{}");
                 done();
-            }, 500);
+            });
         });
     });
 });

From 35240ca6af7c1545a90e2495792aac3e11537d67 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 08:15:22 +0100
Subject: [PATCH] improving embedded studio

---
 extension/data/lib/data.js                         | 12 ++--
 extension/data/public/js/data.template.model.js    | 26 +++++---
 extension/data/public/js/main_dev.js               |  6 +-
 extension/data/public/js/main_embed.js             | 69 -------------------
 extension/data/public/js/main_embed_dev.js         | 78 ++++++++++++++++++++++
 .../templates/embed-data-template-extension.html   | 35 +++++++---
 extension/data/test/ui/dataTest.js                 |  2 +-
 7 files changed, 129 insertions(+), 99 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 961bf5c62d8d16b3d7f08bf82f275fd74e5ffb9b..03ddae211a4b939907daf47670dce369853df6cb 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -9,13 +9,7 @@ var shortid = require("shortid"),
     _ = require("underscore"),
     q = require("q");
 
-
-module.exports = function (reporter, definition) {
-    reporter[definition.name] = new Data(reporter, definition);
-};
-
 var Data = function (reporter, definition) {
-    var self = this;
     this.reporter = reporter;
     this.definition = definition;
 
@@ -53,7 +47,7 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
     //back compatibility
     if (!request.template.data && request.template.dataItemId) {
-        request.template.data = { shortid: request.template.dataItemId}
+        request.template.data = { shortid: request.template.dataItemId};
     }
 
     if (!request.template.data || (!request.template.data.shortid && !request.template.data.dataJson)) {
@@ -106,4 +100,8 @@ Data.prototype._beforeCreateHandler = function (args, entity) {
 
 Data.prototype._beforeUpdateHandler = function (args, entity) {
     entity.modificationDate = new Date();
+};
+
+module.exports = function (reporter, definition) {
+    reporter[definition.name] = new Data(reporter, definition);
 };
\ No newline at end of file
diff --git a/extension/data/public/js/data.template.model.js b/extension/data/public/js/data.template.model.js
index 77f83c528a8f1cf17177a130bef826339cfe260c..775eafe867d5a7257ff10ed88f4358bfb4e715e6 100644
--- a/extension/data/public/js/data.template.model.js
+++ b/extension/data/public/js/data.template.model.js
@@ -1,11 +1,11 @@
-﻿define(["app", "core/basicModel", "underscore"], function (app, ModelBase, _) {
+﻿define(["app", "core/basicModel", "underscore", "jquery"], function (app, ModelBase, _, $) {
    
     return ModelBase.extend({
         
         fetch: function (options) {
             var self = this;
-            
-            return app.dataContext.data.toArray().then(function (items) {
+
+            function processItems(items) {
                 self.items = items.map(function(i) { return i.initData; });
 
                 var data = self.templateModel.get("data");
@@ -21,7 +21,6 @@
                     self.templateModel.set("data", data);
                 }
 
-
                 var custom = { name: "- custom -", shortid: "custom", dataJson:   data.dataJson};
                 self.items.unshift(custom);
 
@@ -29,14 +28,23 @@
                 self.items.unshift(empty);
 
                 if (!data.dataJson && !data.shortid)
-                    self.set(empty, { silent: true });
+                    self.set(custom, { silent: true });
 
-                if (data.shortid)
-                    self.set(_.findWhere(items, { shortid: data.shortid }).toJSON(), { silent: true });
+                if (data.shortid) {
+                    self.set(_.findWhere(self.items, {shortid: data.shortid}), {silent: true});
+                }
 
                 if (data.dataJson)
                     self.set(custom, { silent: true });
-            });
+
+                return $.Deferred().resolve();
+            }
+
+            if (app.options.data.allowChoosing) {
+                return app.dataContext.data.toArray().then(processItems);
+            } else {
+                return processItems([]);
+            }
         },
 
         setTemplate: function (templateModel) {
@@ -53,7 +61,7 @@
 
             this.listenTo(this, "change:shortid", function() {
                 self.templateModel.get("data").shortid = self.get("shortid") !== "custom" ? self.get("shortid") : undefined;
-                self.templateModel.get("data").dataJson = self.get("shortid") === "custom" ? self.get("content") : undefined;
+                self.templateModel.get("data").dataJson = self.get("shortid") === "custom" ? self.get("dataJson") : undefined;
                 self.set(_.findWhere(self.items, { shortid: self.get("shortid")}));
             });
 
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index cf8928d8536b62efb1211b8a8100201050929212..df85ee0c1a7c2d028913d4ff5a05597aa46c9e1f 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -6,6 +6,8 @@
     function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView,
               TemplateStandardView, ToolbarView, TemplateStandardModel, entityRegistration) {
 
+        app.options.data = app.options.data || { allowChoosing: true};
+
         app.module("data", function (module) {
             var Router = Backbone.Router.extend({
                 initialize: function () {
@@ -60,10 +62,10 @@
                 var model = new TemplateStandardModel();
                 model.setTemplate(context.template);
 
-                model.fetch({ success: function () {
+                model.fetch().then(function () {
                     var view = new TemplateStandardView({ model: model});
                     context.extensionsRegion.show(view, "data");
-                }});
+                });
             });
 
             app.on("entity-registration", entityRegistration);
diff --git a/extension/data/public/js/main_embed.js b/extension/data/public/js/main_embed.js
deleted file mode 100644
index a45a01fc30e54ed94fa4aa070a237ce4b319f9da..0000000000000000000000000000000000000000
--- a/extension/data/public/js/main_embed.js
+++ /dev/null
@@ -1,69 +0,0 @@
-/*! 
- * Copyright(c) 2014 Jan Blaha 
- */
-
-define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.model", "./data.template.view",
-        "core/aceBinder", "./data.entityRegistration"],
-    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel,
-              TemplateStandardView, aceBinder, entityRegistration) {
-
-        return app.module("data", function (module) {
-
-            var TemplateView = ViewBase.extend({
-                template: "embed-data-template-extension",
-
-                initialize: function () {
-                    _.bindAll(this, "getItems");
-                },
-
-                getItems: function () {
-                    return this.model.items;
-                },
-
-                onDomRefresh: function () {
-                    this.contentEditor = ace.edit("contentArea");
-                    this.contentEditor.setTheme("ace/theme/chrome");
-                    this.contentEditor.getSession().setMode("ace/mode/json");
-                    this.contentEditor.setOptions({
-                        enableBasicAutocompletion: true,
-                        enableSnippets: true,
-                        readOnly: true
-                    });
-
-                    aceBinder(this.model, "dataJson", this.contentEditor);
-                }
-            });
-
-            app.on("extensions-menu-render", function (context) {
-                context.result += "<li><a id='dataMenuCommand'><i class='fa fa-file'></i></a></li>";
-
-                context.beforeRenderListeners.add(function(req, cb) {
-                    if (parent && parent.jsreport && parent.jsreport.template.data) {
-                        req.data = JSON.stringify(parent.jsreport.template.data);
-                    }
-
-                    cb();
-                });
-
-                context.on("after-render", function ($el) {
-                    var model = new TemplateStandardModel();
-                    model.setTemplate(context.template);
-
-                    model.fetch({ success: function () {
-                        if (parent && parent.jsreport && parent.jsreport.template.data) {
-                            model.set("shortid", "custom");
-                            model.set("dataJson", JSON.stringify(parent.jsreport.template.data, undefined, 2));
-                        }
-                    } });
-
-                    $($el).find("#dataMenuCommand").click(function () {
-                        var view = new TemplateView({ model: model});
-                        context.region.show(view, "data");
-                    });
-                });
-            });
-
-
-            app.on("entity-registration", entityRegistration);
-        });
-    });
\ No newline at end of file
diff --git a/extension/data/public/js/main_embed_dev.js b/extension/data/public/js/main_embed_dev.js
new file mode 100644
index 0000000000000000000000000000000000000000..f5aa65f19f662218da443d673377106a0e130118
--- /dev/null
+++ b/extension/data/public/js/main_embed_dev.js
@@ -0,0 +1,78 @@
+/*! 
+ * Copyright(c) 2014 Jan Blaha 
+ */
+
+define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.model",
+        "core/aceBinder", "./data.entityRegistration"],
+    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, aceBinder, entityRegistration) {
+
+        return app.module("data", function (module) {
+
+            app.options.data = app.options.data || { allowChoosing: true};
+
+            var TemplateView = ViewBase.extend({
+                template: "embed-data-template-extension",
+
+                initialize: function () {
+                    _.bindAll(this, "getItems");
+                    var self = this;
+
+                    this.listenTo(this.model, "change:shortid", function() {
+                        self.contentEditor.setOptions({
+                            readOnly: self.model.get("shortid") !== "custom" && app.options.data.allowChoosing
+                        });
+                    });
+
+                    this.listenTo(this, "animation-done", function() {
+                        self.fixAcePosition();
+                    });
+                },
+
+                getItems: function () {
+                    return this.model.items;
+                },
+
+                onDomRefresh: function () {
+
+                    this.contentEditor = ace.edit("contentArea");
+                    this.contentEditor.setTheme("ace/theme/chrome");
+                    this.contentEditor.getSession().setMode("ace/mode/json");
+                    this.contentEditor.setOptions({
+                        enableBasicAutocompletion: true,
+                        enableSnippets: true,
+                        readOnly: this.model.get("shortid") !== "custom" && app.options.data.allowChoosing
+                    });
+
+                    aceBinder(this.model, "dataJson", this.contentEditor);
+
+                    this.fixAcePosition();
+                },
+
+                fixAcePosition: function() {
+                    var top = $("#contentWrap").position().top;
+                    $("#contentArea").css("margin-top", top);
+                }
+
+
+            });
+
+            app.on("extensions-menu-render", function (context) {
+                context.result += "<li><a id='dataMenuCommand' title='sample data definition'><i data-position='right' data-intro='Define sample input data' class='fa fa-file'></i></a></li>";
+
+                context.on("after-render", function ($el) {
+                    $($el).find("#dataMenuCommand").click(function () {
+                        var model = new TemplateStandardModel();
+                        model.setTemplate(context.template);
+
+                        model.fetch().then(function () {
+                                var view = new TemplateView({model: model});
+                                context.region.show(view, "data");
+                        });
+                    });
+                });
+            });
+
+
+            app.on("entity-registration", entityRegistration);
+        });
+    });
\ No newline at end of file
diff --git a/extension/data/public/templates/embed-data-template-extension.html b/extension/data/public/templates/embed-data-template-extension.html
index 22e5b3c5b6ab6892db17762f0e7f8fac3e5cff41..5ce4c16eb5182458e52f6174e9a15c4ca6da45f2 100644
--- a/extension/data/public/templates/embed-data-template-extension.html
+++ b/extension/data/public/templates/embed-data-template-extension.html
@@ -1,13 +1,26 @@
-<div class="btn-group" data-binding="shortid">
-    <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
-    <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
-        <span class="caret"></span>
-    </button>
-    <ul class="dropdown-menu pull-right" role="menu">
-        {{for ~getItems()}}
-        <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
-        {{/for}}
-    </ul>
+<div class="extended-menu-options">
+    <a class='fa fa-lightbulb-o' href="http://jsreport.net/learn/inline-data" target="_blank"
+       title="Here you can define sample input data for report previewing. This data will be then override during real report rendering. Click to see the documentation.">
+            <span style="margin-left:5px">
+                Sample input data (hover)
+            </span>
+    </a>
+    {{if ~getApp().options.scripts.allowChoosing}}
+    <div class="btn-group" data-binding="shortid">
+        <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
+        <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
+            <span class="caret"></span>
+        </button>
+        <ul class="dropdown-menu pull-right" role="menu">
+            {{for ~getItems()}}
+            <li role="presentation"><a role="menuitem" tabindex="-1" data-value="{{:shortid}}">{{:name}}</a></li>
+            {{/for}}
+        </ul>
+    </div>
+    {{else}}{{/if}}
+</div>
+
+<div id="contentWrap">
+    <div id="contentArea" class="full-content-menu">{{:dataJson}}</div>
 </div>
 
-<div id="contentArea" class="full-content-top-gap">{{:dataJson}}</div>
diff --git a/extension/data/test/ui/dataTest.js b/extension/data/test/ui/dataTest.js
index 86db88af0069a968111f91dc6d5fa7f4b9e31c02..17aa50f29509cd1d907e7eae5fd22d66ddc1822a 100644
--- a/extension/data/test/ui/dataTest.js
+++ b/extension/data/test/ui/dataTest.js
@@ -47,7 +47,7 @@
             app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([]))}};
             SUT.fetch().then(function () {
                 expect(SUT.items.length).to.be.eql(2);
-                expect(SUT.get("shortid")).to.be.eql(null);
+                expect(SUT.get("shortid")).to.be.eql("custom");
                 done();
             });
         });

From c4d7814a28d413b08579b02526e9b4685b21900a Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 09:59:25 +0100
Subject: [PATCH] remove files being built

---
 extension/data/.gitignore | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/extension/data/.gitignore b/extension/data/.gitignore
index bf074057ff68d17bb22652b8bed703bbf606131a..9b57ea946cd37bcaa9e096b7cab28123780bb353 100644
--- a/extension/data/.gitignore
+++ b/extension/data/.gitignore
@@ -1 +1,2 @@
-public/js/main.js
\ No newline at end of file
+public/js/main.js
+public/js/main_embed.js
\ No newline at end of file

From 4da5550562d83eee24890f060e6e6511603f5c07 Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Wed, 26 Nov 2014 19:47:34 +0100
Subject: [PATCH] embed version refactoring

---
 extension/data/public/js/data.template.model.js            | 14 ++++++++------
 extension/data/public/js/main_dev.js                       |  2 +-
 extension/data/public/js/main_embed_dev.js                 |  4 +++-
 .../public/templates/embed-data-template-extension.html    |  2 +-
 extension/data/test/ui/dataTest.js                         |  4 ++--
 5 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/extension/data/public/js/data.template.model.js b/extension/data/public/js/data.template.model.js
index 775eafe867d5a7257ff10ed88f4358bfb4e715e6..5b9890c4471a273dc4a838946444720912bf4d99 100644
--- a/extension/data/public/js/data.template.model.js
+++ b/extension/data/public/js/data.template.model.js
@@ -20,27 +20,29 @@
 
                     self.templateModel.set("data", data);
                 }
-
-                var custom = { name: "- custom -", shortid: "custom", dataJson:   data.dataJson};
-                self.items.unshift(custom);
+                var custom;
+                if (app.options.data.allowCustom) {
+                    custom = {name: "- custom -", shortid: "custom", dataJson: data.dataJson};
+                    self.items.unshift(custom);
+                }
 
                 var empty = { name: "- not selected -", shortid: null };
                 self.items.unshift(empty);
 
                 if (!data.dataJson && !data.shortid)
-                    self.set(custom, { silent: true });
+                    self.set(custom || empty, { silent: true });
 
                 if (data.shortid) {
                     self.set(_.findWhere(self.items, {shortid: data.shortid}), {silent: true});
                 }
 
                 if (data.dataJson)
-                    self.set(custom, { silent: true });
+                    self.set(custom || empty, { silent: true });
 
                 return $.Deferred().resolve();
             }
 
-            if (app.options.data.allowChoosing) {
+            if (app.options.data.allowSelection) {
                 return app.dataContext.data.toArray().then(processItems);
             } else {
                 return processItems([]);
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index df85ee0c1a7c2d028913d4ff5a05597aa46c9e1f..f5f60733ebd3ec0892c6bbbe25d813e0b8c42148 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -6,7 +6,7 @@
     function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView,
               TemplateStandardView, ToolbarView, TemplateStandardModel, entityRegistration) {
 
-        app.options.data = app.options.data || { allowChoosing: true};
+        app.options.data = app.options.data || { allowSelection: true, allowCustom: false};
 
         app.module("data", function (module) {
             var Router = Backbone.Router.extend({
diff --git a/extension/data/public/js/main_embed_dev.js b/extension/data/public/js/main_embed_dev.js
index f5aa65f19f662218da443d673377106a0e130118..26c6535081dd549cad2a3de84b749643671add65 100644
--- a/extension/data/public/js/main_embed_dev.js
+++ b/extension/data/public/js/main_embed_dev.js
@@ -6,6 +6,8 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
         "core/aceBinder", "./data.entityRegistration"],
     function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, aceBinder, entityRegistration) {
 
+        app.options.data = $.extend(app.options.data, { allowSelection: false, allowCustom: true}, app.options.data);
+
         return app.module("data", function (module) {
 
             app.options.data = app.options.data || { allowChoosing: true};
@@ -19,7 +21,7 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
 
                     this.listenTo(this.model, "change:shortid", function() {
                         self.contentEditor.setOptions({
-                            readOnly: self.model.get("shortid") !== "custom" && app.options.data.allowChoosing
+                            readOnly: self.model.get("shortid") !== "custom" && app.options.data.allowSelection
                         });
                     });
 
diff --git a/extension/data/public/templates/embed-data-template-extension.html b/extension/data/public/templates/embed-data-template-extension.html
index 5ce4c16eb5182458e52f6174e9a15c4ca6da45f2..335da42c4c641ab6af5f12c18e70e597fe6f73e1 100644
--- a/extension/data/public/templates/embed-data-template-extension.html
+++ b/extension/data/public/templates/embed-data-template-extension.html
@@ -5,7 +5,7 @@
                 Sample input data (hover)
             </span>
     </a>
-    {{if ~getApp().options.scripts.allowChoosing}}
+    {{if ~getApp().options.scripts.allowSelection}}
     <div class="btn-group" data-binding="shortid">
         <button class="btn btn-success btn-xs dropdown-button" id="schema" data-value="{{:shortid}}">{{:name}}</button>
         <button class="btn btn-success btn-xs dropdown-toggle" data-toggle="dropdown">
diff --git a/extension/data/test/ui/dataTest.js b/extension/data/test/ui/dataTest.js
index 17aa50f29509cd1d907e7eae5fd22d66ddc1822a..9752bcd2eadc19850eecf60cb471b987ebbb3e31 100644
--- a/extension/data/test/ui/dataTest.js
+++ b/extension/data/test/ui/dataTest.js
@@ -46,8 +46,8 @@
         it("fetch should add default items", function (done) {
             app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([]))}};
             SUT.fetch().then(function () {
-                expect(SUT.items.length).to.be.eql(2);
-                expect(SUT.get("shortid")).to.be.eql("custom");
+                expect(SUT.items.length).to.be.eql(1);
+                expect(SUT.get("shortid")).to.be.eql(null);
                 done();
             });
         });

From 0f040daabb21ee9bb6768b06ca5a83d084ef7d41 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sat, 20 Dec 2014 13:13:59 +0100
Subject: [PATCH] fixing minor bugs and improving .net embedded integration

---
 extension/data/public/js/data.template.model.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/public/js/data.template.model.js b/extension/data/public/js/data.template.model.js
index 5b9890c4471a273dc4a838946444720912bf4d99..9959b3384bf4907f0235efe1979108fe040fdf66 100644
--- a/extension/data/public/js/data.template.model.js
+++ b/extension/data/public/js/data.template.model.js
@@ -55,7 +55,7 @@
         },
         
         apiOverride: function(addProperty) {
-            addProperty("dataItemId", this.get("shortid"));
+            addProperty("data", { "shortid": this.get("shortid"), "dataJson": "{\'foo\' : \'...\' }" });
         },
 
         initialize: function () {

From 7b16a38ebbe6e6ab18779e27eb1e58da83e8a6ef Mon Sep 17 00:00:00 2001
From: pofider <honza.pofider@seznam.cz>
Date: Sun, 4 Jan 2015 18:41:52 +0100
Subject: [PATCH] some tests

---
 extension/data/test/ui/dataTest.js | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/extension/data/test/ui/dataTest.js b/extension/data/test/ui/dataTest.js
index 9752bcd2eadc19850eecf60cb471b987ebbb3e31..056fe0b4ad213aa28d607b30097facd073ad03f2 100644
--- a/extension/data/test/ui/dataTest.js
+++ b/extension/data/test/ui/dataTest.js
@@ -18,6 +18,35 @@
         });
     });
 
+    describe('list', function() {
+        var originalDataContext;
+        var listView;
+        var listToolbarView;
+        var listModel;
+        var Model;
+        var app;
+
+        beforeEach(function (done) {
+            require(["app", "data/data.list.model", "data/data.list.view", "data/data.list.toolbar.view"],
+                function (_app, ListModel, ListView, ListToolbarView) {
+
+                app = _app;
+                var model = new ListModel();
+                listView = new ListView({ collection: model});
+                listToolbarView = new ListToolbarView({ collection: model });
+                app.layout.showToolbarViewComposition(listView, listToolbarView);
+
+                done();
+            });
+        });
+
+        //it("foo", function(done) {
+        //    listView.
+        //    done();
+        //});
+        //app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([]))}}
+    });
+
     describe('model', function () {
         var originalDataContext;
         var SUT;

From c5d5885f43c5e654033eaa472fd0fa0bc9e8fcc7 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Mon, 5 Jan 2015 11:52:59 +0100
Subject: [PATCH] improved ui tests

---
 extension/data/test/ui/dataTest.js | 88 ++++++++++++++++++++++++++++++--------
 1 file changed, 70 insertions(+), 18 deletions(-)

diff --git a/extension/data/test/ui/dataTest.js b/extension/data/test/ui/dataTest.js
index 056fe0b4ad213aa28d607b30097facd073ad03f2..dd9ca628853e26e1d236d1bf81924ad074706282 100644
--- a/extension/data/test/ui/dataTest.js
+++ b/extension/data/test/ui/dataTest.js
@@ -19,32 +19,84 @@
     });
 
     describe('list', function() {
-        var originalDataContext;
-        var listView;
-        var listToolbarView;
-        var listModel;
-        var Model;
-        var app;
 
-        beforeEach(function (done) {
+        function showList(items, cb) {
             require(["app", "data/data.list.model", "data/data.list.view", "data/data.list.toolbar.view"],
-                function (_app, ListModel, ListView, ListToolbarView) {
+                function (app, ListModel, ListView, ListToolbarView) {
 
-                app = _app;
-                var model = new ListModel();
-                listView = new ListView({ collection: model});
-                listToolbarView = new ListToolbarView({ collection: model });
-                app.layout.showToolbarViewComposition(listView, listToolbarView);
+                    var model = new ListModel(items);
+                    var listView = new ListView({ collection: model});
+                    var listToolbarView = new ListToolbarView({ collection: model });
+                    app.layout.showToolbarViewComposition(listView, listToolbarView);
+
+                    cb();
+                });
+        }
 
+        it("with no data should render wrapper", function(done) {
+            showList([], function() {
+                expect("#schemaGridBox").to.be.shown(done);
+            });
+        });
+
+        it("with one model should render one row", function(done) {
+            showList([ { name: "test-data"} ], function() {
+                expect("a:contains('test-data')").to.be.shown(done);
+            });
+        });
+    });
+
+    describe('detail view', function() {
+        var model;
+        var view;
+        var toolbarView;
+        var app;
+        function showDetail(item, cb) {
+            require(["app", "data/data.detail.view", "data/data.model", "data/data.toolbar.view"],
+                function (_app, DetailView, Model, ToolbarView) {
+                    app = _app;
+                    model = new Model(item);
+                    view = new DetailView({ model: model});
+                    toolbarView = new ToolbarView({ model: model });
+                    app.layout.showToolbarViewComposition(view, toolbarView);
+
+                    cb();
+                });
+        }
+
+        it("save should trigger save on model", function(done) {
+            showDetail({ name: "test", dataJson: "{}"}, function() {
+                model.save = function() {
+                    expect(model.get("name")).to.be.eql("test");
+                    expect(model.get("dataJson")).to.be.eql("{}");
+                    done();
+                };
+
+                toolbarView.save();
+            });
+        });
+
+        it("save without name should validate for empty name", function(done) {
+            showDetail({ dataJson: "{}"}, function() {
+                model.save = function() {
+                    throw new Error("model.save should not be called");
+                };
+
+                toolbarView.save();
                 done();
             });
         });
 
-        //it("foo", function(done) {
-        //    listView.
-        //    done();
-        //});
-        //app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([]))}}
+        it("save with invalid json should validated", function(done) {
+            showDetail({ name: "foo", dataJson: "foo"}, function() {
+                model.save = function() {
+                    throw new Error("model.save should not be called");
+                };
+
+                toolbarView.save();
+                done();
+            });
+        });
     });
 
     describe('model', function () {

From 1e2806c4f0ff177653201dca876542d578587d4b Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 13 Jan 2015 20:54:35 +0100
Subject: [PATCH] sharing templates, wrapped recipes

---
 extension/data/lib/data.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 03ddae211a4b939907daf47670dce369853df6cb..a87112ec4bf91488433978a17fa567efe80e5134 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -1,7 +1,7 @@
 ﻿/*! 
  * Copyright(c) 2014 Jan Blaha 
  *
- * Inline Data plugin able to add some sample data to rendering process
+ * Extension which allows to specify some sample report data for designing purposes.
  */
 
 var shortid = require("shortid"),

From 786c46cb223cc96a3b4e08183b63aeaea51861c3 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 20 Jan 2015 15:26:55 +0100
Subject: [PATCH] users management

---
 extension/data/lib/data.js                        |  2 +-
 extension/data/public/js/data.model.js            |  7 +++++--
 extension/data/public/js/data.toolbar.view.js     | 22 ++++++++++++++++++++--
 extension/data/public/templates/data-toolbar.html |  2 +-
 extension/data/test/dataTest.js                   |  2 +-
 5 files changed, 28 insertions(+), 7 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index a87112ec4bf91488433978a17fa567efe80e5134..0a187753e8992454049f653c9242cb489a4f1503 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -27,7 +27,7 @@ var Data = function (reporter, definition) {
         shortid: { type: "string" }
     });
 
-    this.reporter.dataProvider.registerEntitySet("data", this.DataItemType, { tableOptions: { humanReadableKeys: [ "shortid"] }});
+    this.reporter.dataProvider.registerEntitySet("data", this.DataItemType, {  tableOptions: { humanReadableKeys: [ "shortid"] }});
 
     this.reporter.templates.TemplateType.addMember("data", { type: this.DataItemRefType });
 
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index eb9a9abd8ba5c0d5f6a1b55a655186d5e1ede928..f3f1d4805e7acb9c52136e9e8192a991f3fcabc6 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -5,11 +5,14 @@
 
         fetchQuery: function (cb) {
             return this.contextSet().single(function(r) { return r.shortid === this.id; }, { id: this.get("shortid") });
-        },   
-        
+        },
         _initialize: function() {
             var self = this;
             this.Entity = $entity.DataItem;
+        },
+
+        toString: function() {
+            return "Data Item " + (this.get("name") || "");
         }
     });
 });
\ No newline at end of file
diff --git a/extension/data/public/js/data.toolbar.view.js b/extension/data/public/js/data.toolbar.view.js
index 08f0033c5e88695a2cc02c103cc61cdf6644e764..0c7ebe4022f097126d4bd48c2042fb1e106b86e3 100644
--- a/extension/data/public/js/data.toolbar.view.js
+++ b/extension/data/public/js/data.toolbar.view.js
@@ -1,16 +1,34 @@
-﻿define(["jquery", "app", "core/utils", "core/view.base"],
-    function($, app, Utils, LayoutBase) {
+﻿define(["marionette", "jquery", "app", "core/utils", "core/view.base"],
+    function(Marionette, $, app, Utils, LayoutBase) {
         return LayoutBase.extend({
             template: "data-toolbar",
 
             initialize: function() {
+                var self = this;
                 $(document).on('keydown.data-detail', this.hotkey.bind(this));
+
+                this.listenTo(this, "render", function() {
+                    var contextToolbar = {
+                        name: "data-detail",
+                        model: self.model,
+                        region: self.extensionsToolbarRegion,
+                        view: self
+                    };
+                    app.trigger("toolbar-render", contextToolbar);
+                });
             },
 
             events: {
                 "click #saveCommand": "save"
             },
 
+            regions: {
+                extensionsToolbarRegion: {
+                    selector: "#extensionsToolbarBox",
+                    regionType: Marionette.MultiRegion
+                }
+            },
+
             save: function() {
                 if (!this.validate())
                     return;
diff --git a/extension/data/public/templates/data-toolbar.html b/extension/data/public/templates/data-toolbar.html
index 8faf2c51486b3cd1581ae5e2d7c5a6e80dfbc582..18c6f23d8c6a6751b26029b327118f764d3ea439 100644
--- a/extension/data/public/templates/data-toolbar.html
+++ b/extension/data/public/templates/data-toolbar.html
@@ -1,5 +1,5 @@
 ﻿<div class="navbar-header submenu">
-    <ul class="nav navbar-nav sub-header">
+    <ul class="nav navbar-nav sub-header" id="extensionsToolbarBox">
         <li><a id="saveCommand"><i class="glyphicon glyphicon-floppy-save"></i>Save</a></li>
     </ul>
     <ul class="nav navbar-nav sub-header pull-right">
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 8d0d28e740d4a8f0d771b221cc9f14d236f27728..924bf666452abd582e10f716eac9623a2212a5c0 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -31,7 +31,7 @@ describeReporting(path.join(__dirname, "../../"), ["templates","data"], function
         it('should callback error when missing data', function(done) {
             var request = {
                 reporter: reporter,
-                template: { content: "html", dataItemId: "AAAAAAAAAAAAAAAAAAAAAAAA" },
+                template: { content: "html", dataItemId: "MnI0b0QwNXBhZHlRSXBhRg==" },
                 options: { recipe: "html" },
                 context: reporter.context
             };

From 1d4b5caad830e524c7aaa918035aa634ac2d3b64 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Fri, 30 Jan 2015 20:12:46 +0100
Subject: [PATCH] fixing bugs found during jsreportonline release

---
 extension/data/lib/data.js | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 0a187753e8992454049f653c9242cb489a4f1503..bb2131df1162bed3b94b6df550b6b737a78074f4 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -69,6 +69,9 @@ Data.prototype.handleBeforeRender = function (request, response) {
     }
 
     return findDataItem().then(function (di) {
+        if (!di)
+            return;
+
         di = di.dataJson || di;
 
         try {
@@ -76,7 +79,7 @@ Data.prototype.handleBeforeRender = function (request, response) {
         } catch (e) {
             self.reporter.logger.warn("Invalid json in data item: " + e.message);
             e.weak = true;
-            return q.reject(e);
+            throw e;
         }
     });
 };

From 8de2c54ec35470618e47c25bb04212182ef5ab11 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 26 Mar 2015 17:15:19 +0100
Subject: [PATCH] merge odata layer

fix #50 #42 #25
---
 extension/data/lib/data.js                         | 86 +++++++++-------------
 .../data/public/js/data.entityRegistration.js      | 28 -------
 extension/data/public/js/data.list.model.js        | 14 ++--
 extension/data/public/js/data.model.js             | 12 +--
 extension/data/public/js/data.template.model.js    |  6 +-
 extension/data/public/js/main_dev.js               |  6 +-
 extension/data/public/js/main_embed_dev.js         |  7 +-
 extension/data/test/dataTest.js                    | 26 +++----
 extension/data/test/ui/dataTest.js                 | 16 +---
 9 files changed, 68 insertions(+), 133 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index bb2131df1162bed3b94b6df550b6b737a78074f4..32e9cfe5a9c2ceebbd0ca4549824222aa5027e9f 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -10,33 +10,40 @@ var shortid = require("shortid"),
     q = require("q");
 
 var Data = function (reporter, definition) {
+    var self = this;
     this.reporter = reporter;
     this.definition = definition;
 
-    this.DataItemType = this.reporter.dataProvider.createEntityType("DataItemType", {
-        _id : { type: "id", key: true, computed: true, nullable: false },
-        dataJson: { type: "string" },
-        name: { type: "string" },
-        creationDate: { type: "date" },
-        shortid: { type: "string"},
-        modificationDate: { type: "date" }
+    reporter.documentStore.registerEntityType("DataItemType", {
+        _id: {type: "Edm.String", key: true},
+        dataJson: { type: "Edm.String" },
+        name: { type: "Edm.String" },
+        creationDate: { type: "Edm.DateTimeOffset" },
+        shortid: { type: "Edm.String"},
+        modificationDate: { type: "Edm.DateTimeOffset" }
     });
 
-    this.DataItemRefType = this.reporter.dataProvider.createEntityType("DataItemRefType", {
-        dataJson: { type: "string" },
-        shortid: { type: "string" }
+    reporter.documentStore.registerComplexType("DataItemRefType", {
+        dataJson: { type: "Edm.String" },
+        shortid: { type: "Edm.String" }
     });
 
-    this.reporter.dataProvider.registerEntitySet("data", this.DataItemType, {  tableOptions: { humanReadableKeys: [ "shortid"] }});
-
-    this.reporter.templates.TemplateType.addMember("data", { type: this.DataItemRefType });
-
-    reporter.templates.TemplateType.addMember("dataItemId", { type: "string" });
-
-    this.DataItemType.addEventListener("beforeCreate", Data.prototype._beforeCreateHandler.bind(this));
-    this.DataItemType.addEventListener("beforeUpdate", Data.prototype._beforeUpdateHandler.bind(this));
+    reporter.documentStore.registerEntitySet("data", {entityType: "DataItemType", humanReadableKey: "shortid"});
+    reporter.documentStore.model.entityTypes["TemplateType"].data = {type: "jsreport.DataItemRefType"};
+
+    reporter.initializeListener.add("data", function () {
+        var col = self.reporter.documentStore.collection("data");
+        col.beforeUpdateListeners.add("data", function(query, update) {
+            update.$set.modificationDate = new Date();
+        });
+        col.beforeInsertListeners.add("data", function (doc) {
+            doc.shortid = doc.shortid || shortid.generate();
+            doc.creationDate = new Date();
+            doc.modificationDate = new Date();
+        });
+    });
 
-    this.reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
+    reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
 };
 
 Data.prototype.handleBeforeRender = function (request, response) {
@@ -63,9 +70,11 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
         self.reporter.logger.debug("Searching for dataItem to apply");
 
-        return request.context.data.single(function (d) {
-            return d.shortid === this.id;
-        }, { id: request.template.data.shortid });
+        return self.reporter.documentStore.collection("data").find({ shortid: request.template.data.shortid}).then(function(items) {
+            if (items.length !== 1)
+                throw new Error("Data entry not found (" + request.template.data.shortid + ")");
+            return items[0];
+        });
     }
 
     return findDataItem().then(function (di) {
@@ -73,38 +82,13 @@ Data.prototype.handleBeforeRender = function (request, response) {
             return;
 
         di = di.dataJson || di;
-
-        try {
-            request.data = JSON.parse(di);
-        } catch (e) {
-            self.reporter.logger.warn("Invalid json in data item: " + e.message);
-            e.weak = true;
-            throw e;
-        }
+        request.data = JSON.parse(di);
+    }).catch(function(e) {
+        e.weak = true;
+        throw e;
     });
 };
 
-Data.prototype.create = function (context, dataItem) {
-    var ent = new this.DataItemType(dataItem);
-    context.data.add(ent);
-
-    return context.saveChanges().then(function () {
-        return q(ent);
-    });
-};
-
-Data.prototype._beforeCreateHandler = function (args, entity) {
-    if (!entity.shortid)
-        entity.shortid = shortid.generate();
-
-    entity.creationDate = new Date();
-    entity.modificationDate = new Date();
-};
-
-Data.prototype._beforeUpdateHandler = function (args, entity) {
-    entity.modificationDate = new Date();
-};
-
 module.exports = function (reporter, definition) {
     reporter[definition.name] = new Data(reporter, definition);
 };
\ No newline at end of file
diff --git a/extension/data/public/js/data.entityRegistration.js b/extension/data/public/js/data.entityRegistration.js
deleted file mode 100644
index ae002e666d28955fa31567260d200418510db1d2..0000000000000000000000000000000000000000
--- a/extension/data/public/js/data.entityRegistration.js
+++ /dev/null
@@ -1,28 +0,0 @@
-define([], function() {
-    return function(context) {
-        $data.Class.define("$entity.DataItem", $data.Entity, null, {
-            'shortid': { 'type': 'Edm.String' },
-            'name': { 'type': 'Edm.String' },
-            "creationDate": { type: "date" },
-            "modificationDate": { type: "date" },
-            'dataJson': { 'type': 'Edm.String' }
-        }, null);
-
-        $entity.DataItem.prototype.toString = function () {
-            return "DataItem " + (this.name || "");
-        };
-
-        $data.Class.define("$entity.DataItemRefType", $data.Entity, null, {
-            dataJson: { type: 'Edm.String' },
-            shortid: { type: 'Edm.String' }
-        });
-
-
-        $entity.Template.addMember("data", { 'type': "$entity.DataItemRefType" });
-        //back compatibility
-        $entity.Template.addMember("dataItemId", { 'type': "Edm.String" });
-
-        $entity.DataItem.addMember('_id', { 'key': true, 'nullable': false, 'computed': true, 'type': 'Edm.String' });
-        context["data"] = { type: $data.EntitySet, elementType: $entity.DataItem };
-    };
-});
\ No newline at end of file
diff --git a/extension/data/public/js/data.list.model.js b/extension/data/public/js/data.list.model.js
index f80d8a9f01e70265434e7fc1d64a701012020cb3..dba477cf5c1ee0f23532df37e2ab702c3f7e9eb6 100644
--- a/extension/data/public/js/data.list.model.js
+++ b/extension/data/public/js/data.list.model.js
@@ -1,6 +1,12 @@
 ﻿define(["app", "backbone", "core/dataGrid", "./data.model"], function (app, Backbone, DataGrid, DataModel) {
     return Backbone.Collection.extend({
 
+        url: function() {
+            var qs =  this.filter.toOData();
+            qs.$orderby = "modificationDate desc";
+            return "odata/data?" + $.param(qs);
+        },
+
         initialize: function () {
             var self = this;
             this.filter = new DataGrid.Filter.Base();
@@ -10,15 +16,11 @@
         },
         
         parse: function (data) {
-            if (data.totalCount != null)
-                this.filter.set("totalCount", data.totalCount);
+            if (this.meta && this.meta["@odata.count"])
+                this.filter.set("totalCount", this.meta["@odata.count"]);
 
             return data;
         },
-        
-        fetchQuery: function () {
-            return app.dataContext.data.applyFilter(this.filter).toArray();
-        },
 
         model: DataModel
     });
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index f3f1d4805e7acb9c52136e9e8192a991f3fcabc6..1eb43d6ef4d842c20a96f8e2dcde7f4ad1239ed3 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -1,15 +1,7 @@
-﻿define(["app", "core/jaydataModel"], function(app, ModelBase) {
+﻿define(["app", "core/basicModel"], function(app, ModelBase) {
 
     return ModelBase.extend({
-        contextSet: function() { return app.dataContext.data; },
-
-        fetchQuery: function (cb) {
-            return this.contextSet().single(function(r) { return r.shortid === this.id; }, { id: this.get("shortid") });
-        },
-        _initialize: function() {
-            var self = this;
-            this.Entity = $entity.DataItem;
-        },
+        odata: "data",
 
         toString: function() {
             return "Data Item " + (this.get("name") || "");
diff --git a/extension/data/public/js/data.template.model.js b/extension/data/public/js/data.template.model.js
index 9959b3384bf4907f0235efe1979108fe040fdf66..967cfde06999baed0f0357835fd047b5a71e5982 100644
--- a/extension/data/public/js/data.template.model.js
+++ b/extension/data/public/js/data.template.model.js
@@ -6,12 +6,12 @@
             var self = this;
 
             function processItems(items) {
-                self.items = items.map(function(i) { return i.initData; });
+                self.items = items;
 
                 var data = self.templateModel.get("data");
 
                 if (!data) {
-                    data = new $entity.DataItemRefType();
+                    data = {};
 
                     //back compatibility
                     if (self.templateModel.get("dataItemId")) {
@@ -43,7 +43,7 @@
             }
 
             if (app.options.data.allowSelection) {
-                return app.dataContext.data.toArray().then(processItems);
+                return app.dataProvider.get("odata/data").then(processItems);
             } else {
                 return processItems([]);
             }
diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index f5f60733ebd3ec0892c6bbbe25d813e0b8c42148..033fb04056ab511ec18c3bfca14c8fee4170e1dd 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -2,9 +2,9 @@
         "./data.list.model", "./data.list.view", "./data.list.toolbar.view",
         "./data.model", "./data.detail.view",
         "./data.template.view",
-        "./data.toolbar.view", "./data.template.model", "./data.entityRegistration"],
+        "./data.toolbar.view", "./data.template.model"],
     function (app, Marionette, Backbone, DataListModel, DataListView, DataListToolbarView, DataModel, DataDetailView,
-              TemplateStandardView, ToolbarView, TemplateStandardModel, entityRegistration) {
+              TemplateStandardView, ToolbarView, TemplateStandardModel) {
 
         app.options.data = app.options.data || { allowSelection: true, allowCustom: false};
 
@@ -67,7 +67,5 @@
                     context.extensionsRegion.show(view, "data");
                 });
             });
-
-            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file
diff --git a/extension/data/public/js/main_embed_dev.js b/extension/data/public/js/main_embed_dev.js
index 26c6535081dd549cad2a3de84b749643671add65..9d29ff695175f372183ee143cb5f4914d25debdb 100644
--- a/extension/data/public/js/main_embed_dev.js
+++ b/extension/data/public/js/main_embed_dev.js
@@ -3,8 +3,8 @@
  */
 
 define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base", "core/listenerCollection", "./data.template.model",
-        "core/aceBinder", "./data.entityRegistration"],
-    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, aceBinder, entityRegistration) {
+        "core/aceBinder"],
+    function ($, _, app, Marionette, Backbone, ViewBase, ListenerCollection, TemplateStandardModel, aceBinder) {
 
         app.options.data = $.extend(app.options.data, { allowSelection: false, allowCustom: true}, app.options.data);
 
@@ -73,8 +73,5 @@ define(["jquery", "underscore", "app", "marionette", "backbone", "core/view.base
                     });
                 });
             });
-
-
-            app.on("entity-registration", entityRegistration);
         });
     });
\ No newline at end of file
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 924bf666452abd582e10f716eac9623a2212a5c0..3f2be6479cd5fb72fea5a204d692c2fc9eeac235 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -12,31 +12,30 @@ describeReporting(path.join(__dirname, "../../"), ["templates","data"], function
                 dataJson: JSON.stringify({ a: 'xx' }) + ""
             };
 
-            reporter.data.create(reporter.context, dataItem).then(function(data) {
+            return reporter.documentStore.collection("data").insert(dataItem).then(function(data) {
+                return done();
+
                 var request = {
                     reporter: reporter,
-                    template: { content: "html", dataItemId: data.shortid },
-                    options: { recipe: "html" },
-                    context: reporter.context
+                    template: { content: "html", data: { shortid: data.shortid } },
+                    options: { recipe: "html" }
                 };
 
-                reporter.data.handleBeforeRender(request, {}).then(function() {
+                return reporter.data.handleBeforeRender(request, {}).then(function() {
                     assert.equal(request.data.a, JSON.parse(dataItem.dataJson).a);
-
                     done();
                 });
-            });
+            }).catch(done);
         });
         
         it('should callback error when missing data', function(done) {
             var request = {
                 reporter: reporter,
-                template: { content: "html", dataItemId: "MnI0b0QwNXBhZHlRSXBhRg==" },
-                options: { recipe: "html" },
-                context: reporter.context
+                template: { content: "html", data: { shortid : "MnI0b0QwNXBhZHlRSXBhRg=="} },
+                options: { recipe: "html" }
             };
 
-            reporter.data.handleBeforeRender(request, {}).fail(function (err) {
+            return reporter.data.handleBeforeRender(request, {}).fail(function (err) {
                 assert.notEqual(null, err);
                 done();
             });
@@ -46,13 +45,12 @@ describeReporting(path.join(__dirname, "../../"), ["templates","data"], function
             var request = {
                 reporter: reporter,
                 template: { content: "html", dataItemId: null },
-                options: { recipe: "html" },
-                context: reporter.context
+                options: { recipe: "html" }
             };
 
             reporter.data.handleBeforeRender(request, {}).then(function () {
                 done();
-            });
+            }).catch(done);
         });
 
     });
diff --git a/extension/data/test/ui/dataTest.js b/extension/data/test/ui/dataTest.js
index dd9ca628853e26e1d236d1bf81924ad074706282..366dc04d2deeabc8665f20d660e81a435349907f 100644
--- a/extension/data/test/ui/dataTest.js
+++ b/extension/data/test/ui/dataTest.js
@@ -100,15 +100,12 @@
     });
 
     describe('model', function () {
-        var originalDataContext;
         var SUT;
         var templateModel;
         var app;
 
         beforeEach(function (done) {
             require(["app", "data/data.template.model", "templates/template.model"], function (_app, Model, TemplateModel) {
-                originalDataContext = _app.dataContext;
-
                 app = _app;
                 SUT = new Model();
                 templateModel = new TemplateModel();
@@ -119,13 +116,12 @@
 
         afterEach(function (done) {
             require(["app"], function (app) {
-                app.dataContext = originalDataContext;
                 done();
             });
         });
 
         it("fetch should add default items", function (done) {
-            app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([]))}};
+            app.dataProvider.get = sinon.stub().returns($.Deferred().resolve([]));
             SUT.fetch().then(function () {
                 expect(SUT.items.length).to.be.eql(1);
                 expect(SUT.get("shortid")).to.be.eql(null);
@@ -135,7 +131,7 @@
 
         it("fetch should select proper item based on template.data.shortid", function (done) {
             templateModel.set("data", {shortid: "foo"});
-            app.dataContext = {data: {toArray: sinon.stub().returns($.Deferred().resolve([new $entity.DataItem({shortid: "foo"})]))}};
+            app.dataProvider.get = sinon.stub().returns($.Deferred().resolve([{shortid: "foo"}]));
 
             SUT.fetch().then(function () {
                 expect(SUT.get("shortid")).to.be.eql("foo");
@@ -144,14 +140,10 @@
         });
 
         it("changing shortid should propagate changes to template and reload selected object", function (done) {
-            app.dataContext = {
-                data: {
-                    toArray: sinon.stub().returns($.Deferred().resolve([new $entity.DataItem({
+            app.dataProvider.get = sinon.stub().returns($.Deferred().resolve([{
                         shortid: "foo",
                         dataJson: "{}"
-                    })]))
-                }
-            };
+                    }]));
 
             SUT.fetch().then(function () {
                 SUT.set("shortid", "foo");

From be456c7aaae047c3bbdce01de376bc091ea53e10 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 29 Mar 2015 15:11:11 +0200
Subject: [PATCH] fixing last bugs for release 0.3

---
 extension/data/lib/data.js             | 2 +-
 extension/data/public/js/data.model.js | 1 +
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 32e9cfe5a9c2ceebbd0ca4549824222aa5027e9f..299383026ebf15335a34f23e3b19291497b1ea90 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -28,7 +28,7 @@ var Data = function (reporter, definition) {
         shortid: { type: "Edm.String" }
     });
 
-    reporter.documentStore.registerEntitySet("data", {entityType: "DataItemType", humanReadableKey: "shortid"});
+    reporter.documentStore.registerEntitySet("data", {entityType: "jsreport.DataItemType", humanReadableKey: "shortid"});
     reporter.documentStore.model.entityTypes["TemplateType"].data = {type: "jsreport.DataItemRefType"};
 
     reporter.initializeListener.add("data", function () {
diff --git a/extension/data/public/js/data.model.js b/extension/data/public/js/data.model.js
index 1eb43d6ef4d842c20a96f8e2dcde7f4ad1239ed3..04a4ba2b84f31724ff515b321f71a602c379934f 100644
--- a/extension/data/public/js/data.model.js
+++ b/extension/data/public/js/data.model.js
@@ -2,6 +2,7 @@
 
     return ModelBase.extend({
         odata: "data",
+        url: "odata/data",
 
         toString: function() {
             return "Data Item " + (this.get("name") || "");

From 5666b2a8177dc5a791723c43580fc1d07ab8204f Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Mon, 6 Apr 2015 17:38:08 +0200
Subject: [PATCH] #52 Assure Script extension is running just after data but
 before child templates

---
 extension/data/lib/data.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 299383026ebf15335a34f23e3b19291497b1ea90..9458add9f386ac5296b98e127120475ab8d037aa 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -43,7 +43,7 @@ var Data = function (reporter, definition) {
         });
     });
 
-    reporter.beforeRenderListeners.add(definition.name, this, Data.prototype.handleBeforeRender);
+    reporter.beforeRenderListeners.insert(0, definition.name, this, Data.prototype.handleBeforeRender);
 };
 
 Data.prototype.handleBeforeRender = function (request, response) {

From 62e8d2a291e8945a08b05f9f802375edd61b8c61 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Tue, 7 Apr 2015 15:37:25 +0200
Subject: [PATCH] update dependencies

---
 extension/data/lib/data.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 9458add9f386ac5296b98e127120475ab8d037aa..234fd6cc8a2268896af3f263eaf34f698f059930 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -52,6 +52,8 @@ Data.prototype.handleBeforeRender = function (request, response) {
         return q();
     }
 
+    request.data = request.data || {};
+
     //back compatibility
     if (!request.template.data && request.template.dataItemId) {
         request.template.data = { shortid: request.template.dataItemId};

From 6300c6b75c730688c448fb1c51d3e0ee41c8523c Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 9 Apr 2015 13:02:59 +0200
Subject: [PATCH] new extension resources

---
 extension/data/public/js/data.template.model.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/public/js/data.template.model.js b/extension/data/public/js/data.template.model.js
index 967cfde06999baed0f0357835fd047b5a71e5982..152da3e3a0969617239ed2eab045f07abf6560a6 100644
--- a/extension/data/public/js/data.template.model.js
+++ b/extension/data/public/js/data.template.model.js
@@ -43,7 +43,7 @@
             }
 
             if (app.options.data.allowSelection) {
-                return app.dataProvider.get("odata/data").then(processItems);
+                return app.dataProvider.get("odata/data?$select=name,shortid").then(processItems);
             } else {
                 return processItems([]);
             }

From 01365e96248c13b3ffdc824f0e41e068fdf24c88 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 9 Apr 2015 21:55:00 +0200
Subject: [PATCH] scripts can call reporter.render

---
 extension/data/lib/data.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 234fd6cc8a2268896af3f263eaf34f698f059930..16abc55b0002f5e51ce796576874a4db6b045078 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -43,7 +43,7 @@ var Data = function (reporter, definition) {
         });
     });
 
-    reporter.beforeRenderListeners.insert(0, definition.name, this, Data.prototype.handleBeforeRender);
+    reporter.beforeRenderListeners.insert({ after: "templates"}, definition.name, this, Data.prototype.handleBeforeRender);
 };
 
 Data.prototype.handleBeforeRender = function (request, response) {

From 9072100a2cc913e3321c9aa13a688d103970cc25 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 12 Apr 2015 12:04:42 +0200
Subject: [PATCH] preparing release 0.4.0, add fullscreen options to the embed

---
 extension/data/public/js/data.template.model.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/extension/data/public/js/data.template.model.js b/extension/data/public/js/data.template.model.js
index 152da3e3a0969617239ed2eab045f07abf6560a6..2427f1805f3f22bbf2e072d1a6b2bf8c0dec5b25 100644
--- a/extension/data/public/js/data.template.model.js
+++ b/extension/data/public/js/data.template.model.js
@@ -54,8 +54,8 @@
             this.listenTo(templateModel, "api-overrides", this.apiOverride);
         },
         
-        apiOverride: function(addProperty) {
-            addProperty("data", { "shortid": this.get("shortid"), "dataJson": "{\'foo\' : \'...\' }" });
+        apiOverride: function(req) {
+            req.template.data = { "shortid": this.get("shortid") || "...", "dataJson": "{\'foo\' : \'...\' }" };
         },
 
         initialize: function () {

From cabc0f16e2a147f279e3ee4ffd2a70e7677a3cff Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 23 Apr 2015 16:00:54 +0200
Subject: [PATCH] #58 make sure that jsreport works correctly under subpath

---
 extension/data/public/js/main_dev.js                   | 2 +-
 extension/data/public/templates/data-list-toolbar.html | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/extension/data/public/js/main_dev.js b/extension/data/public/js/main_dev.js
index 033fb04056ab511ec18c3bfca14c8fee4170e1dd..4c9b418248c6741161a889e7dca615e6228b84c1 100644
--- a/extension/data/public/js/main_dev.js
+++ b/extension/data/public/js/main_dev.js
@@ -49,7 +49,7 @@
 
 
             app.on("menu-render", function (context) {
-                context.result += "<li><a href='/#/extension/data/list'>Data</a></li>";
+                context.result += "<li><a href='#/extension/data/list'>Data</a></li>";
             });
 
             app.on("menu-actions-render", function (context) {
diff --git a/extension/data/public/templates/data-list-toolbar.html b/extension/data/public/templates/data-list-toolbar.html
index 6063cf3eabc6799f3e602eb47de0cb6b289093bc..dad3753e746262b28df36a09d6931296a03389aa 100644
--- a/extension/data/public/templates/data-list-toolbar.html
+++ b/extension/data/public/templates/data-list-toolbar.html
@@ -1,6 +1,6 @@
 ﻿<div class="navbar-header submenu">
     <ul class="nav navbar-nav sub-header">
-        <li><a href="/#/extension/data/detail"><i class="glyphicon glyphicon-plus"></i>New</a></li>
+        <li><a href="#/extension/data/detail"><i class="glyphicon glyphicon-plus"></i>New</a></li>
         <li><a id="deleteCommand"><i class="glyphicon glyphicon-trash"></i>Delete</a></li>
     </ul>
 </div>
\ No newline at end of file

From dc807ec68585ff25b1b77e26f39d61cd5b055372 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Thu, 28 May 2015 12:00:45 +0200
Subject: [PATCH] split rendering part into the toner package

---
 extension/data/test/dataTest.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 3f2be6479cd5fb72fea5a204d692c2fc9eeac235..3b57035984f51886fa90e5da3b943bebf18739fd 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -2,7 +2,7 @@
     path = require("path"),
     describeReporting = require("../../../test/helpers.js").describeReporting;
 
-describeReporting(path.join(__dirname, "../../"), ["templates","data"], function (reporter) {
+describeReporting(path.join(__dirname, "../../../"), ["templates","data"], function (reporter) {
     
     describe('data', function() {
 

From a9eb226751bb8fe15fd8038db15aa1411a323461 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sun, 19 Jul 2015 15:24:57 +0200
Subject: [PATCH] #88 api calls can identify objects using name in addition to
 shortid

---
 extension/data/lib/data.js      | 13 ++++++++++---
 extension/data/test/dataTest.js | 24 +++++++++++++++++++++---
 2 files changed, 31 insertions(+), 6 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index 16abc55b0002f5e51ce796576874a4db6b045078..fd6b188a6bf00d047723532feeacf1c40a5f4fd9 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -59,7 +59,7 @@ Data.prototype.handleBeforeRender = function (request, response) {
         request.template.data = { shortid: request.template.dataItemId};
     }
 
-    if (!request.template.data || (!request.template.data.shortid && !request.template.data.dataJson)) {
+    if (!request.template.data || (!request.template.data.shortid && !request.template.data.dataJson&& !request.template.data.name)) {
         this.reporter.logger.debug("Data item not defined for this template.");
         return q();
     }
@@ -72,9 +72,16 @@ Data.prototype.handleBeforeRender = function (request, response) {
 
         self.reporter.logger.debug("Searching for dataItem to apply");
 
-        return self.reporter.documentStore.collection("data").find({ shortid: request.template.data.shortid}).then(function(items) {
+        var query = {};
+        if (request.template.data.shortid)
+            query.shortid = request.template.data.shortid;
+
+        if (request.template.data.name)
+            query.name = request.template.data.name;
+
+        return self.reporter.documentStore.collection("data").find(query).then(function(items) {
             if (items.length !== 1)
-                throw new Error("Data entry not found (" + request.template.data.shortid + ")");
+                throw new Error("Data entry not found (" + (request.template.data.shortid || request.template.data.name)  + ")");
             return items[0];
         });
     }
diff --git a/extension/data/test/dataTest.js b/extension/data/test/dataTest.js
index 3b57035984f51886fa90e5da3b943bebf18739fd..2369dbf53418edfe93af88edb4f3dc87084f0c7b 100644
--- a/extension/data/test/dataTest.js
+++ b/extension/data/test/dataTest.js
@@ -6,15 +6,13 @@ describeReporting(path.join(__dirname, "../../../"), ["templates","data"], funct
     
     describe('data', function() {
 
-        it('should find and use data', function (done) {
+        it('should find and use data based on shortid', function (done) {
             var dataItem = {
                 name: "test",
                 dataJson: JSON.stringify({ a: 'xx' }) + ""
             };
 
             return reporter.documentStore.collection("data").insert(dataItem).then(function(data) {
-                return done();
-
                 var request = {
                     reporter: reporter,
                     template: { content: "html", data: { shortid: data.shortid } },
@@ -27,6 +25,26 @@ describeReporting(path.join(__dirname, "../../../"), ["templates","data"], funct
                 });
             }).catch(done);
         });
+
+        it('should find and use data based on name', function (done) {
+            var dataItem = {
+                name: "test",
+                dataJson: JSON.stringify({ a: 'xx' }) + ""
+            };
+
+            return reporter.documentStore.collection("data").insert(dataItem).then(function(data) {
+                var request = {
+                    reporter: reporter,
+                    template: { content: "html", data: { name: "test" } },
+                    options: { recipe: "html" }
+                };
+
+                return reporter.data.handleBeforeRender(request, {}).then(function() {
+                    assert.equal(request.data.a, JSON.parse(dataItem.dataJson).a);
+                    done();
+                });
+            }).catch(done);
+        });
         
         it('should callback error when missing data', function(done) {
             var request = {

From b95e80a6c1f5f70bf9a20566c32dca145e8cfcf1 Mon Sep 17 00:00:00 2001
From: "honza.pofider@seznam.cz" <honza.pofider@seznam.cz>
Date: Sat, 17 Oct 2015 14:43:51 +0200
Subject: [PATCH] adding support for fs-store

---
 extension/data/lib/data.js | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/extension/data/lib/data.js b/extension/data/lib/data.js
index fd6b188a6bf00d047723532feeacf1c40a5f4fd9..2b246eaad88fe63f014e3ee05a7e290b7b6f719d 100644
--- a/extension/data/lib/data.js
+++ b/extension/data/lib/data.js
@@ -16,8 +16,8 @@ var Data = function (reporter, definition) {
 
     reporter.documentStore.registerEntityType("DataItemType", {
         _id: {type: "Edm.String", key: true},
-        dataJson: { type: "Edm.String" },
-        name: { type: "Edm.String" },
+        dataJson: { type: "Edm.String", document: { extension: 'json'  }},
+        name: { type: "Edm.String", publicKey: true },
         creationDate: { type: "Edm.DateTimeOffset" },
         shortid: { type: "Edm.String"},
         modificationDate: { type: "Edm.DateTimeOffset" }
@@ -28,7 +28,7 @@ var Data = function (reporter, definition) {
         shortid: { type: "Edm.String" }
     });
 
-    reporter.documentStore.registerEntitySet("data", {entityType: "jsreport.DataItemType", humanReadableKey: "shortid"});
+    reporter.documentStore.registerEntitySet("data", {entityType: "jsreport.DataItemType", humanReadableKey: "shortid", splitIntoDirectories: true});
     reporter.documentStore.model.entityTypes["TemplateType"].data = {type: "jsreport.DataItemRefType"};
 
     reporter.initializeListener.add("data", function () {
